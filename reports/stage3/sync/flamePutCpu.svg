<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (1,001 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 1.00%)</title><rect x="10.0" y="883.0" width="11.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.10%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.10%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.10%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.10%)</title><rect x="10.0" y="659.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.10%)</title><rect x="10.0" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (1 samples, 0.10%)</title><rect x="10.0" y="627.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (1 samples, 0.10%)</title><rect x="10.0" y="611.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="10.0" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="10.0" y="579.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="10.0" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="10.0" y="547.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="10.0" y="531.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="10.0" y="515.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="10.0" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>call_stub (9 samples, 0.90%)</title><rect x="11.2" y="867.0" width="10.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 1.20%)</title><rect x="21.8" y="883.0" width="14.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="24.8" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (10 samples, 1.00%)</title><rect x="21.8" y="867.0" width="11.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="24.8" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (10 samples, 1.00%)</title><rect x="21.8" y="851.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.00%)</title><rect x="21.8" y="835.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.00%)</title><rect x="21.8" y="819.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.00%)</title><rect x="21.8" y="803.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (10 samples, 1.00%)</title><rect x="21.8" y="787.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="24.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (10 samples, 1.00%)</title><rect x="21.8" y="771.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (10 samples, 1.00%)</title><rect x="21.8" y="755.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (10 samples, 1.00%)</title><rect x="21.8" y="739.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 1.00%)</title><rect x="21.8" y="723.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.00%)</title><rect x="21.8" y="707.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (10 samples, 1.00%)</title><rect x="21.8" y="691.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 1.00%)</title><rect x="21.8" y="675.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (10 samples, 1.00%)</title><rect x="21.8" y="659.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.8" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (10 samples, 1.00%)</title><rect x="21.8" y="643.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.8" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (10 samples, 1.00%)</title><rect x="21.8" y="627.0" width="11.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.8" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (10 samples, 1.00%)</title><rect x="21.8" y="611.0" width="11.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="24.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 1.00%)</title><rect x="21.8" y="595.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (10 samples, 1.00%)</title><rect x="21.8" y="579.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.8" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.30%)</title><rect x="21.8" y="563.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="24.8" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.30%)</title><rect x="21.8" y="547.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="24.8" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.30%)</title><rect x="21.8" y="531.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="24.8" y="542.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="21.8" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="24.8" y="526.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="23.0" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.0" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="24.1" y="515.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="27.1" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.70%)</title><rect x="25.3" y="563.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.3" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (7 samples, 0.70%)</title><rect x="25.3" y="547.0" width="8.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="28.3" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (7 samples, 0.70%)</title><rect x="25.3" y="531.0" width="8.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="28.3" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.70%)</title><rect x="25.3" y="515.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="28.3" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.30%)</title><rect x="26.5" y="499.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="29.5" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.30%)</title><rect x="30.0" y="499.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="33.0" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.20%)</title><rect x="31.2" y="483.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="34.2" y="494.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.20%)</title><rect x="33.6" y="867.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="36.6" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (979 samples, 97.80%)</title><rect x="35.9" y="883.0" width="1154.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.9" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.10%)</title><rect x="35.9" y="867.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.10%)</title><rect x="35.9" y="851.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.10%)</title><rect x="35.9" y="835.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5 samples, 0.50%)</title><rect x="37.1" y="867.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (5 samples, 0.50%)</title><rect x="37.1" y="851.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.50%)</title><rect x="37.1" y="835.0" width="5.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="40.1" y="846.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.50%)</title><rect x="37.1" y="819.0" width="5.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="40.1" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.50%)</title><rect x="37.1" y="803.0" width="5.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="40.1" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.50%)</title><rect x="37.1" y="787.0" width="5.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="40.1" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.50%)</title><rect x="37.1" y="771.0" width="5.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="40.1" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (5 samples, 0.50%)</title><rect x="37.1" y="755.0" width="5.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="40.1" y="766.0"></text>
</g>
<g>
<title>ep_poll (4 samples, 0.40%)</title><rect x="38.3" y="739.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="41.3" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (4 samples, 0.40%)</title><rect x="38.3" y="723.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="41.3" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.20%)</title><rect x="39.5" y="707.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="42.5" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.20%)</title><rect x="39.5" y="691.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="42.5" y="702.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.20%)</title><rect x="39.5" y="675.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="42.5" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="40.6" y="659.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="43.6" y="670.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.10%)</title><rect x="41.8" y="707.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="44.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (973 samples, 97.20%)</title><rect x="43.0" y="867.0" width="1147.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.0" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (970 samples, 96.90%)</title><rect x="45.4" y="851.0" width="1143.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.4" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (957 samples, 95.60%)</title><rect x="46.5" y="835.0" width="1128.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.5" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (946 samples, 94.51%)</title><rect x="46.5" y="819.0" width="1115.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.5" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (946 samples, 94.51%)</title><rect x="46.5" y="803.0" width="1115.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.5" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (945 samples, 94.41%)</title><rect x="46.5" y="787.0" width="1114.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.5" y="798.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (98 samples, 9.79%)</title><rect x="46.5" y="771.0" width="115.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.5" y="782.0">one/nio/http/H..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.10%)</title><rect x="46.5" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.10%)</title><rect x="46.5" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="46.5" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.5" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="46.5" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="49.5" y="718.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.10%)</title><rect x="46.5" y="691.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="49.5" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="46.5" y="675.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="49.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (97 samples, 9.69%)</title><rect x="47.7" y="755.0" width="114.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="766.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.30%)</title><rect x="47.7" y="739.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (94 samples, 9.39%)</title><rect x="51.3" y="739.0" width="110.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.3" y="750.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (94 samples, 9.39%)</title><rect x="51.3" y="723.0" width="110.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.3" y="734.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (94 samples, 9.39%)</title><rect x="51.3" y="707.0" width="110.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="718.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (94 samples, 9.39%)</title><rect x="51.3" y="691.0" width="110.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="702.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.10%)</title><rect x="53.6" y="675.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="56.6" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="53.6" y="659.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="56.6" y="670.0"></text>
</g>
<g>
<title>__libc_send (90 samples, 8.99%)</title><rect x="54.8" y="675.0" width="106.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="57.8" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (89 samples, 8.89%)</title><rect x="56.0" y="659.0" width="104.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="59.0" y="670.0">entry_SYSCAL..</text>
</g>
<g>
<title>__x64_sys_sendto (1 samples, 0.10%)</title><rect x="56.0" y="643.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="59.0" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (88 samples, 8.79%)</title><rect x="57.2" y="643.0" width="103.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="60.2" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (86 samples, 8.59%)</title><rect x="58.3" y="627.0" width="101.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="61.3" y="638.0">__x64_sys_se..</text>
</g>
<g>
<title>__sys_sendto (86 samples, 8.59%)</title><rect x="58.3" y="611.0" width="101.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="61.3" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (83 samples, 8.29%)</title><rect x="60.7" y="595.0" width="97.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="63.7" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (81 samples, 8.09%)</title><rect x="60.7" y="579.0" width="95.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="63.7" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (80 samples, 7.99%)</title><rect x="61.9" y="563.0" width="94.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="64.9" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>release_sock (1 samples, 0.10%)</title><rect x="63.0" y="547.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="66.0" y="558.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.10%)</title><rect x="63.0" y="531.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="66.0" y="542.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.10%)</title><rect x="63.0" y="515.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="66.0" y="526.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (77 samples, 7.69%)</title><rect x="64.2" y="547.0" width="90.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="67.2" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.10%)</title><rect x="66.6" y="531.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="69.6" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.10%)</title><rect x="67.8" y="531.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="70.8" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.20%)</title><rect x="68.9" y="531.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="71.9" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.20%)</title><rect x="68.9" y="515.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="71.9" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (6 samples, 0.60%)</title><rect x="71.3" y="531.0" width="7.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="74.3" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.50%)</title><rect x="72.5" y="515.0" width="5.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="75.5" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.10%)</title><rect x="72.5" y="499.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="75.5" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.10%)</title><rect x="72.5" y="483.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="75.5" y="494.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.20%)</title><rect x="73.7" y="499.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="76.7" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.20%)</title><rect x="76.0" y="499.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="79.0" y="510.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.10%)</title><rect x="78.4" y="531.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="81.4" y="542.0"></text>
</g>
<g>
<title>tcp_push (63 samples, 6.29%)</title><rect x="79.6" y="531.0" width="74.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="82.6" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (63 samples, 6.29%)</title><rect x="79.6" y="515.0" width="74.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="82.6" y="526.0">__tcp_pu..</text>
</g>
<g>
<title>tcp_write_xmit (63 samples, 6.29%)</title><rect x="79.6" y="499.0" width="74.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="82.6" y="510.0">tcp_writ..</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.10%)</title><rect x="80.7" y="483.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="83.7" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (54 samples, 5.39%)</title><rect x="81.9" y="483.0" width="63.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="84.9" y="494.0">__tcp_t..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.10%)</title><rect x="83.1" y="467.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="86.1" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (52 samples, 5.19%)</title><rect x="84.3" y="467.0" width="61.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="87.3" y="478.0">ip_que..</text>
</g>
<g>
<title>__ip_queue_xmit (50 samples, 5.00%)</title><rect x="84.3" y="451.0" width="58.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="87.3" y="462.0">__ip_q..</text>
</g>
<g>
<title>ip_local_out (49 samples, 4.90%)</title><rect x="85.4" y="435.0" width="57.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="88.4" y="446.0">ip_loc..</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.60%)</title><rect x="85.4" y="419.0" width="7.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="88.4" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.10%)</title><rect x="85.4" y="403.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="88.4" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.50%)</title><rect x="86.6" y="403.0" width="5.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="89.6" y="414.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (2 samples, 0.20%)</title><rect x="86.6" y="387.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="89.6" y="398.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.20%)</title><rect x="86.6" y="371.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="89.6" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (3 samples, 0.30%)</title><rect x="89.0" y="387.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="92.0" y="398.0"></text>
</g>
<g>
<title>get_l4proto?[nf_conntrack] (1 samples, 0.10%)</title><rect x="89.0" y="371.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="92.0" y="382.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.20%)</title><rect x="90.2" y="371.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="93.2" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.10%)</title><rect x="90.2" y="355.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="93.2" y="366.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (1 samples, 0.10%)</title><rect x="91.3" y="355.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="94.3" y="366.0"></text>
</g>
<g>
<title>ip_output (43 samples, 4.30%)</title><rect x="92.5" y="419.0" width="50.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="95.5" y="430.0">ip_ou..</text>
</g>
<g>
<title>ip_finish_output (43 samples, 4.30%)</title><rect x="92.5" y="403.0" width="50.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="95.5" y="414.0">ip_fi..</text>
</g>
<g>
<title>__ip_finish_output (42 samples, 4.20%)</title><rect x="92.5" y="387.0" width="49.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="95.5" y="398.0">__ip_..</text>
</g>
<g>
<title>ip_finish_output2 (42 samples, 4.20%)</title><rect x="92.5" y="371.0" width="49.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="95.5" y="382.0">ip_fi..</text>
</g>
<g>
<title>__local_bh_enable_ip (39 samples, 3.90%)</title><rect x="92.5" y="355.0" width="46.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="95.5" y="366.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.20 (39 samples, 3.90%)</title><rect x="92.5" y="339.0" width="46.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="95.5" y="350.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (36 samples, 3.60%)</title><rect x="96.1" y="323.0" width="42.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="99.1" y="334.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (36 samples, 3.60%)</title><rect x="96.1" y="307.0" width="42.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="99.1" y="318.0">__so..</text>
</g>
<g>
<title>net_rx_action (34 samples, 3.40%)</title><rect x="98.4" y="291.0" width="40.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="101.4" y="302.0">net..</text>
</g>
<g>
<title>process_backlog (34 samples, 3.40%)</title><rect x="98.4" y="275.0" width="40.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="101.4" y="286.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (34 samples, 3.40%)</title><rect x="98.4" y="259.0" width="40.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="101.4" y="270.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (34 samples, 3.40%)</title><rect x="98.4" y="243.0" width="40.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="101.4" y="254.0">__n..</text>
</g>
<g>
<title>ip_rcv (34 samples, 3.40%)</title><rect x="98.4" y="227.0" width="40.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="101.4" y="238.0">ip_..</text>
</g>
<g>
<title>ip_rcv_finish (34 samples, 3.40%)</title><rect x="98.4" y="211.0" width="40.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="101.4" y="222.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver (34 samples, 3.40%)</title><rect x="98.4" y="195.0" width="40.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="101.4" y="206.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (31 samples, 3.10%)</title><rect x="98.4" y="179.0" width="36.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="101.4" y="190.0">ip_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (30 samples, 3.00%)</title><rect x="99.6" y="163.0" width="35.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="102.6" y="174.0">ip_..</text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.10%)</title><rect x="99.6" y="147.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="102.6" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (29 samples, 2.90%)</title><rect x="100.8" y="147.0" width="34.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="103.8" y="158.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.20%)</title><rect x="103.1" y="131.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="106.1" y="142.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.10%)</title><rect x="104.3" y="115.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="107.3" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (25 samples, 2.50%)</title><rect x="105.5" y="131.0" width="29.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="108.5" y="142.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (25 samples, 2.50%)</title><rect x="105.5" y="115.0" width="29.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="108.5" y="126.0">tc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.10%)</title><rect x="106.7" y="99.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="109.7" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.10%)</title><rect x="106.7" y="83.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="109.7" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.10%)</title><rect x="106.7" y="67.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="109.7" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.10%)</title><rect x="106.7" y="51.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="109.7" y="62.0"></text>
</g>
<g>
<title>tcp_ack (12 samples, 1.20%)</title><rect x="107.8" y="99.0" width="14.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="110.8" y="110.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="110.2" y="83.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="113.2" y="94.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.10%)</title><rect x="111.4" y="83.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="114.4" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.70%)</title><rect x="112.6" y="83.0" width="8.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="115.6" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.40%)</title><rect x="116.1" y="67.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="119.1" y="78.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.40%)</title><rect x="116.1" y="51.0" width="4.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="119.1" y="62.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.30%)</title><rect x="116.1" y="35.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="119.1" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.10%)</title><rect x="119.6" y="35.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="122.6" y="46.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.10%)</title><rect x="120.8" y="83.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="123.8" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (7 samples, 0.70%)</title><rect x="122.0" y="99.0" width="8.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="125.0" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (7 samples, 0.70%)</title><rect x="122.0" y="83.0" width="8.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="125.0" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (7 samples, 0.70%)</title><rect x="122.0" y="67.0" width="8.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="125.0" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 0.70%)</title><rect x="122.0" y="51.0" width="8.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="125.0" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.70%)</title><rect x="122.0" y="35.0" width="8.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="125.0" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.20%)</title><rect x="130.2" y="99.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="133.2" y="110.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.10%)</title><rect x="132.6" y="99.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="135.6" y="110.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.10%)</title><rect x="133.8" y="99.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="136.8" y="110.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.10%)</title><rect x="135.0" y="179.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="138.0" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.20%)</title><rect x="136.1" y="179.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="139.1" y="190.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (2 samples, 0.20%)</title><rect x="136.1" y="163.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="139.1" y="174.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.20%)</title><rect x="136.1" y="147.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="139.1" y="158.0"></text>
</g>
<g>
<title>dev_queue_xmit (3 samples, 0.30%)</title><rect x="138.5" y="355.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="141.5" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (3 samples, 0.30%)</title><rect x="138.5" y="339.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="141.5" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.10%)</title><rect x="138.5" y="323.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="141.5" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.10%)</title><rect x="138.5" y="307.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="141.5" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.10%)</title><rect x="138.5" y="291.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="141.5" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.10%)</title><rect x="138.5" y="275.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="141.5" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.10%)</title><rect x="138.5" y="259.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="141.5" y="270.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.10%)</title><rect x="139.7" y="323.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="142.7" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.10%)</title><rect x="140.8" y="323.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="143.8" y="334.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.10%)</title><rect x="142.0" y="387.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="145.0" y="398.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.20%)</title><rect x="143.2" y="451.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="146.2" y="462.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.10%)</title><rect x="145.6" y="483.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="148.6" y="494.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.10%)</title><rect x="146.7" y="483.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="149.7" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.20%)</title><rect x="147.9" y="483.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="150.9" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.10%)</title><rect x="149.1" y="467.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="152.1" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.10%)</title><rect x="149.1" y="451.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="152.1" y="462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.10%)</title><rect x="149.1" y="435.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="152.1" y="446.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.10%)</title><rect x="149.1" y="419.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="152.1" y="430.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.10%)</title><rect x="150.3" y="483.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="153.3" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.10%)</title><rect x="151.5" y="483.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="154.5" y="494.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.10%)</title><rect x="152.6" y="483.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="155.6" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.10%)</title><rect x="153.8" y="531.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="156.8" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.10%)</title><rect x="153.8" y="515.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="156.8" y="526.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="155.0" y="547.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="158.0" y="558.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.20%)</title><rect x="156.2" y="579.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="159.2" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.20%)</title><rect x="156.2" y="563.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="159.2" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.20%)</title><rect x="156.2" y="547.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="159.2" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.20%)</title><rect x="156.2" y="531.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="159.2" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.10%)</title><rect x="158.5" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="161.5" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="158.5" y="579.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="161.5" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="158.5" y="563.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="161.5" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="158.5" y="547.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="161.5" y="558.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="159.7" y="627.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="162.7" y="638.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="159.7" y="611.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="162.7" y="622.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.10%)</title><rect x="160.9" y="675.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="163.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (847 samples, 84.62%)</title><rect x="162.1" y="771.0" width="998.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.1" y="782.0">ru/mail/polis/service/stasyanoi/CustomServer.put</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (846 samples, 84.52%)</title><rect x="162.1" y="755.0" width="997.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.1" y="766.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (846 samples, 84.52%)</title><rect x="162.1" y="739.0" width="997.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.1" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (843 samples, 84.22%)</title><rect x="165.6" y="723.0" width="993.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.6" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.20%)</title><rect x="166.8" y="707.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.8" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (670 samples, 66.93%)</title><rect x="169.1" y="707.0" width="789.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="172.1" y="718.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.20%)</title><rect x="169.1" y="691.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="172.1" y="702.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (668 samples, 66.73%)</title><rect x="171.5" y="691.0" width="787.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.5" y="702.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteA..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.20%)</title><rect x="171.5" y="675.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="174.5" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="172.7" y="659.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="175.7" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.10%)</title><rect x="173.9" y="675.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="176.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (665 samples, 66.43%)</title><rect x="175.0" y="675.0" width="784.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="178.0" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (665 samples, 66.43%)</title><rect x="175.0" y="659.0" width="784.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="178.0" y="670.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocks..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (664 samples, 66.33%)</title><rect x="175.0" y="643.0" width="782.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="178.0" y="654.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="176.2" y="627.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="179.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.10%)</title><rect x="177.4" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="180.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (657 samples, 65.63%)</title><rect x="178.6" y="627.0" width="774.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="181.6" y="638.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.10%)</title><rect x="178.6" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="181.6" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.10%)</title><rect x="179.8" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="182.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (1 samples, 0.10%)</title><rect x="180.9" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="183.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (648 samples, 64.74%)</title><rect x="182.1" y="611.0" width="763.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="185.1" y="622.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, uns..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.10%)</title><rect x="185.6" y="595.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="188.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 0.40%)</title><rect x="186.8" y="595.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="189.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (3 samples, 0.30%)</title><rect x="186.8" y="579.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="189.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (3 samples, 0.30%)</title><rect x="186.8" y="563.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="189.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.10%)</title><rect x="186.8" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="189.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.20%)</title><rect x="188.0" y="547.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.0" y="558.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.10%)</title><rect x="188.0" y="531.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="191.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.10%)</title><rect x="189.2" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="192.2" y="542.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.10%)</title><rect x="190.4" y="579.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="193.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.10%)</title><rect x="191.5" y="595.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="194.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.20%)</title><rect x="192.7" y="595.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="192.7" y="579.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="195.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.10%)</title><rect x="195.1" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="198.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.70%)</title><rect x="196.3" y="595.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="199.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 0.70%)</title><rect x="196.3" y="579.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="199.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.70%)</title><rect x="196.3" y="563.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.70%)</title><rect x="196.3" y="547.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="199.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 0.70%)</title><rect x="196.3" y="531.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="199.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 0.70%)</title><rect x="196.3" y="515.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="199.3" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (1 samples, 0.10%)</title><rect x="196.3" y="499.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="199.3" y="510.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (6 samples, 0.60%)</title><rect x="197.4" y="499.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="200.4" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (5 samples, 0.50%)</title><rect x="198.6" y="483.0" width="5.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="201.6" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (4 samples, 0.40%)</title><rect x="198.6" y="467.0" width="4.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="201.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.40%)</title><rect x="198.6" y="451.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="201.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.30%)</title><rect x="199.8" y="435.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="202.8" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.30%)</title><rect x="199.8" y="419.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="202.8" y="430.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.30%)</title><rect x="199.8" y="403.0" width="3.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="202.8" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="199.8" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="202.8" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.20%)</title><rect x="201.0" y="387.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="204.0" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="202.1" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="205.1" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.10%)</title><rect x="202.1" y="355.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="205.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="203.3" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="206.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="203.3" y="451.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="206.3" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.10%)</title><rect x="203.3" y="435.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="206.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (526 samples, 52.55%)</title><rect x="204.5" y="595.0" width="620.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="207.5" y="606.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, ..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.10%)</title><rect x="206.9" y="579.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="209.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.20%)</title><rect x="208.0" y="579.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="211.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.20%)</title><rect x="208.0" y="563.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="211.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (521 samples, 52.05%)</title><rect x="210.4" y="579.0" width="614.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="213.4" y="590.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (521 samples, 52.05%)</title><rect x="210.4" y="563.0" width="614.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="213.4" y="574.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (516 samples, 51.55%)</title><rect x="213.9" y="547.0" width="608.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="216.9" y="558.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.10%)</title><rect x="213.9" y="531.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="216.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (513 samples, 51.25%)</title><rect x="215.1" y="531.0" width="604.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.1" y="542.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::S..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const [clone .plt] (1 samples, 0.10%)</title><rect x="215.1" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="218.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (511 samples, 51.05%)</title><rect x="216.3" y="515.0" width="602.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="219.3" y="526.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (1 samples, 0.10%)</title><rect x="217.5" y="499.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="220.5" y="510.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.10%)</title><rect x="217.5" y="483.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="220.5" y="494.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.10%)</title><rect x="217.5" y="467.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="220.5" y="478.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.10%)</title><rect x="217.5" y="451.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="220.5" y="462.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="217.5" y="435.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="220.5" y="446.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="217.5" y="419.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="220.5" y="430.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.10%)</title><rect x="217.5" y="403.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="220.5" y="414.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.10%)</title><rect x="218.7" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="221.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.10%)</title><rect x="219.8" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (507 samples, 50.65%)</title><rect x="221.0" y="499.0" width="597.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="224.0" y="510.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurre..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (507 samples, 50.65%)</title><rect x="221.0" y="483.0" width="597.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="224.0" y="494.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;tr..</text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (486 samples, 48.55%)</title><rect x="224.5" y="467.0" width="573.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="227.5" y="478.0">/tmp/librocksdbjni11202309319664131237.so</text>
</g>
<g>
<title>/tmp/librocksdbjni11202309319664131237.so (473 samples, 47.25%)</title><rect x="239.9" y="451.0" width="557.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="242.9" y="462.0">/tmp/librocksdbjni11202309319664131237.so</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.10%)</title><rect x="243.4" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="244.6" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="247.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (468 samples, 46.75%)</title><rect x="245.8" y="435.0" width="551.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.8" y="446.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice con..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="248.1" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="251.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (460 samples, 45.95%)</title><rect x="249.3" y="419.0" width="542.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="252.3" y="430.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb:..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (37 samples, 3.70%)</title><rect x="256.4" y="403.0" width="43.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="259.4" y="414.0">JNIE..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="256.4" y="387.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.4" y="398.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (36 samples, 3.60%)</title><rect x="257.6" y="387.0" width="42.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="260.6" y="398.0">jni_..</text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.10%)</title><rect x="264.6" y="371.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="267.6" y="382.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="265.8" y="371.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.8" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.20%)</title><rect x="267.0" y="371.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="270.0" y="382.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (26 samples, 2.60%)</title><rect x="269.3" y="371.0" width="30.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="272.3" y="382.0">jn..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.10%)</title><rect x="275.2" y="355.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="278.2" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples, 1.50%)</title><rect x="276.4" y="355.0" width="17.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="279.4" y="366.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.10%)</title><rect x="278.8" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.8" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.10%)</title><rect x="280.0" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="283.0" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (4 samples, 0.40%)</title><rect x="281.1" y="339.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="284.1" y="350.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (5 samples, 0.50%)</title><rect x="285.8" y="339.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="288.8" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.10%)</title><rect x="290.6" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="293.6" y="334.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.20%)</title><rect x="291.7" y="339.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="294.7" y="350.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.10%)</title><rect x="292.9" y="323.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="295.9" y="334.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="294.1" y="355.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="297.1" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.20%)</title><rect x="295.3" y="355.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.3" y="366.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.10%)</title><rect x="297.6" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="300.6" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.10%)</title><rect x="298.8" y="355.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="301.8" y="366.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (81 samples, 8.09%)</title><rect x="300.0" y="403.0" width="95.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.0" y="414.0">JNIEnv_::Ca..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="300.0" y="387.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="303.0" y="398.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (2 samples, 0.20%)</title><rect x="301.2" y="387.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="303.5" y="387.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="306.5" y="398.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (77 samples, 7.69%)</title><rect x="304.7" y="387.0" width="90.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="307.7" y="398.0">jni_CallVo..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="310.6" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="313.6" y="382.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (2 samples, 0.20%)</title><rect x="311.8" y="371.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="314.8" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.30%)</title><rect x="314.1" y="371.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="317.1" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="317.7" y="371.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="320.7" y="382.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.20%)</title><rect x="318.9" y="371.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="321.9" y="382.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.20%)</title><rect x="321.2" y="371.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.2" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.30%)</title><rect x="323.6" y="371.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="326.6" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (8 samples, 0.80%)</title><rect x="327.1" y="371.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.1" y="382.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (49 samples, 4.90%)</title><rect x="336.5" y="371.0" width="57.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="339.5" y="382.0">jni_in..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="346.0" y="355.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="349.0" y="366.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.10%)</title><rect x="347.1" y="355.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="350.1" y="366.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.30%)</title><rect x="348.3" y="355.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.3" y="366.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (7 samples, 0.70%)</title><rect x="351.9" y="355.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="354.9" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (24 samples, 2.40%)</title><rect x="360.1" y="355.0" width="28.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="363.1" y="366.0">Ja..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.10%)</title><rect x="370.7" y="339.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.7" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="371.9" y="339.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="374.9" y="350.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.80%)</title><rect x="373.1" y="339.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="376.1" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.30%)</title><rect x="379.0" y="323.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.0" y="334.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.10%)</title><rect x="382.5" y="339.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="385.5" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.40%)</title><rect x="383.7" y="339.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="386.7" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="388.4" y="355.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="391.4" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.30%)</title><rect x="389.6" y="355.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="392.6" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.10%)</title><rect x="393.1" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="396.1" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="394.3" y="371.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="395.5" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="398.5" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="396.7" y="403.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="399.7" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (105 samples, 10.49%)</title><rect x="397.8" y="403.0" width="123.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="400.8" y="414.0">__lll_lock_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (79 samples, 7.89%)</title><rect x="428.5" y="387.0" width="93.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="431.5" y="398.0">entry_SYSCA..</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="428.5" y="371.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="431.5" y="382.0"></text>
</g>
<g>
<title>do_syscall_64 (77 samples, 7.69%)</title><rect x="429.7" y="371.0" width="90.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="432.7" y="382.0">do_syscall..</text>
</g>
<g>
<title>__x64_sys_futex (44 samples, 4.40%)</title><rect x="442.6" y="355.0" width="51.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="445.6" y="366.0">__x64..</text>
</g>
<g>
<title>do_futex (41 samples, 4.10%)</title><rect x="443.8" y="339.0" width="48.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="446.8" y="350.0">do_f..</text>
</g>
<g>
<title>drop_futex_key_refs.isra.12 (1 samples, 0.10%)</title><rect x="447.3" y="323.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="450.3" y="334.0"></text>
</g>
<g>
<title>futex_wait (37 samples, 3.70%)</title><rect x="448.5" y="323.0" width="43.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="451.5" y="334.0">fute..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="459.1" y="307.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="462.1" y="318.0"></text>
</g>
<g>
<title>futex_wait_queue_me (12 samples, 1.20%)</title><rect x="460.3" y="307.0" width="14.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="463.3" y="318.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.30%)</title><rect x="462.7" y="291.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="465.7" y="302.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.70%)</title><rect x="466.2" y="291.0" width="8.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.2" y="302.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.60%)</title><rect x="467.4" y="275.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="470.4" y="286.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.40%)</title><rect x="469.7" y="259.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="472.7" y="270.0"></text>
</g>
<g>
<title>futex_wait_setup (13 samples, 1.30%)</title><rect x="474.5" y="307.0" width="15.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="477.5" y="318.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="478.0" y="291.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="481.0" y="302.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="478.0" y="275.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="481.0" y="286.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.10%)</title><rect x="479.2" y="291.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="482.2" y="302.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="479.2" y="275.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="482.2" y="286.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="480.3" y="291.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="483.3" y="302.0"></text>
</g>
<g>
<title>get_futex_value_locked (7 samples, 0.70%)</title><rect x="481.5" y="291.0" width="8.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="484.5" y="302.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.10%)</title><rect x="489.8" y="307.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="492.8" y="318.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.10%)</title><rect x="491.0" y="307.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="494.0" y="318.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.20%)</title><rect x="492.1" y="339.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="495.1" y="350.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (22 samples, 2.20%)</title><rect x="494.5" y="355.0" width="25.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="497.5" y="366.0">s..</text>
</g>
<g>
<title>__audit_syscall_exit (16 samples, 1.60%)</title><rect x="501.6" y="339.0" width="18.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="504.6" y="350.0"></text>
</g>
<g>
<title>dput (2 samples, 0.20%)</title><rect x="511.0" y="323.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="514.0" y="334.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.20%)</title><rect x="513.4" y="323.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="516.4" y="334.0"></text>
</g>
<g>
<title>mntput (1 samples, 0.10%)</title><rect x="515.7" y="323.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="518.7" y="334.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.10%)</title><rect x="516.9" y="323.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="519.9" y="334.0"></text>
</g>
<g>
<title>unroll_tree_refs (2 samples, 0.20%)</title><rect x="518.1" y="323.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="521.1" y="334.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="520.4" y="371.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="523.4" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (185 samples, 18.48%)</title><rect x="521.6" y="403.0" width="218.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="524.6" y="414.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (178 samples, 17.78%)</title><rect x="529.9" y="387.0" width="209.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="532.9" y="398.0">entry_SYSCALL_64_after_hwfr..</text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.20%)</title><rect x="529.9" y="371.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="532.9" y="382.0"></text>
</g>
<g>
<title>do_syscall_64 (176 samples, 17.58%)</title><rect x="532.2" y="371.0" width="207.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="535.2" y="382.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (162 samples, 16.18%)</title><rect x="544.0" y="355.0" width="191.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="547.0" y="366.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (162 samples, 16.18%)</title><rect x="544.0" y="339.0" width="191.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="547.0" y="350.0">do_futex</text>
</g>
<g>
<title>futex_wake (161 samples, 16.08%)</title><rect x="545.2" y="323.0" width="189.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="548.2" y="334.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (10 samples, 1.00%)</title><rect x="553.4" y="307.0" width="11.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="556.4" y="318.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.20%)</title><rect x="565.2" y="307.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="568.2" y="318.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="567.6" y="307.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="570.6" y="318.0"></text>
</g>
<g>
<title>mark_wake_futex (8 samples, 0.80%)</title><rect x="568.8" y="307.0" width="9.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="571.8" y="318.0"></text>
</g>
<g>
<title>__unqueue_futex (5 samples, 0.50%)</title><rect x="571.1" y="291.0" width="5.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="574.1" y="302.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.10%)</title><rect x="577.0" y="291.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="580.0" y="302.0"></text>
</g>
<g>
<title>wake_up_q (133 samples, 13.29%)</title><rect x="578.2" y="307.0" width="156.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="581.2" y="318.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (133 samples, 13.29%)</title><rect x="578.2" y="291.0" width="156.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="581.2" y="302.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (132 samples, 13.19%)</title><rect x="579.4" y="275.0" width="155.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="582.4" y="286.0">__lock_text_start</text>
</g>
<g>
<title>syscall_slow_exit_work (3 samples, 0.30%)</title><rect x="735.0" y="355.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="738.0" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.20%)</title><rect x="736.2" y="339.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="739.2" y="350.0"></text>
</g>
<g>
<title>path_put (2 samples, 0.20%)</title><rect x="736.2" y="323.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="739.2" y="334.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="738.5" y="355.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="741.5" y="366.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.30%)</title><rect x="739.7" y="403.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="742.7" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 1.20%)</title><rect x="743.2" y="403.0" width="14.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="746.2" y="414.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.20%)</title><rect x="744.4" y="387.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="747.4" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.30%)</title><rect x="746.8" y="387.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.8" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.60%)</title><rect x="750.3" y="387.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="753.3" y="398.0"></text>
</g>
<g>
<title>jni_GetEnv (5 samples, 0.50%)</title><rect x="757.4" y="403.0" width="5.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="760.4" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.10%)</title><rect x="763.3" y="403.0" width="12.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="766.3" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.60%)</title><rect x="776.2" y="403.0" width="7.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="779.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.60%)</title><rect x="783.3" y="403.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="786.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="786.8" y="387.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="789.8" y="398.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.20%)</title><rect x="788.0" y="387.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="791.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.10%)</title><rect x="790.4" y="403.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="793.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.10%)</title><rect x="791.6" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.20%)</title><rect x="792.7" y="419.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.20%)</title><rect x="795.1" y="419.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (18 samples, 1.80%)</title><rect x="797.5" y="467.0" width="21.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.5" y="478.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 1.60%)</title><rect x="798.6" y="451.0" width="18.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.6" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="801.0" y="435.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.0" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.10%)</title><rect x="801.0" y="419.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="804.0" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="801.0" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.0" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="802.2" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="805.2" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="802.2" y="419.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="805.2" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="802.2" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.2" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.10%)</title><rect x="803.3" y="435.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="806.3" y="446.0"></text>
</g>
<g>
<title>__lll_unlock_wake (10 samples, 1.00%)</title><rect x="804.5" y="435.0" width="11.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="807.5" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.00%)</title><rect x="804.5" y="419.0" width="11.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="807.5" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 1.00%)</title><rect x="804.5" y="403.0" width="11.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="807.5" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.90%)</title><rect x="804.5" y="387.0" width="10.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="807.5" y="398.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.90%)</title><rect x="804.5" y="371.0" width="10.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="807.5" y="382.0"></text>
</g>
<g>
<title>futex_wake (9 samples, 0.90%)</title><rect x="804.5" y="355.0" width="10.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="807.5" y="366.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="804.5" y="339.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="807.5" y="350.0"></text>
</g>
<g>
<title>wake_up_q (8 samples, 0.80%)</title><rect x="805.7" y="339.0" width="9.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="808.7" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (8 samples, 0.80%)</title><rect x="805.7" y="323.0" width="9.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="808.7" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.80%)</title><rect x="805.7" y="307.0" width="9.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="808.7" y="318.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="815.1" y="387.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="818.1" y="398.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="815.1" y="371.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="818.1" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="816.3" y="435.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="819.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.10%)</title><rect x="817.5" y="451.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.5" y="462.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, rocksdb::MemTable* const&amp;) (1 samples, 0.10%)</title><rect x="818.7" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.7" y="526.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (2 samples, 0.20%)</title><rect x="819.9" y="531.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="822.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.20%)</title><rect x="822.2" y="547.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="825.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (57 samples, 5.69%)</title><rect x="824.6" y="595.0" width="67.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.6" y="606.0">rocksdb..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="888.2" y="579.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="891.2" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="888.2" y="563.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="891.2" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="888.2" y="547.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="891.2" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="889.4" y="547.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="892.4" y="558.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="889.4" y="531.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="892.4" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="889.4" y="515.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="892.4" y="526.0"></text>
</g>
<g>
<title>std::condition_variable::condition_variable() [clone .plt] (1 samples, 0.10%)</title><rect x="890.6" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (39 samples, 3.90%)</title><rect x="891.8" y="595.0" width="45.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.8" y="606.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (38 samples, 3.80%)</title><rect x="891.8" y="579.0" width="44.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.8" y="590.0">rock..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="933.0" y="563.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="936.0" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="934.2" y="547.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="937.2" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="934.2" y="531.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="937.2" y="542.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="934.2" y="515.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="937.2" y="526.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="934.2" y="499.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="937.2" y="510.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) [clone .plt] (1 samples, 0.10%)</title><rect x="935.4" y="563.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.4" y="574.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.10%)</title><rect x="936.6" y="579.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="939.6" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="936.6" y="563.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="939.6" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="936.6" y="547.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="939.6" y="558.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.10%)</title><rect x="936.6" y="531.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="939.6" y="542.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.10%)</title><rect x="936.6" y="515.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="939.6" y="526.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="936.6" y="499.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="939.6" y="510.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="936.6" y="483.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="939.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.30%)</title><rect x="937.7" y="595.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="937.7" y="579.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.10%)</title><rect x="938.9" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.9" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="938.9" y="563.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="941.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.10%)</title><rect x="940.1" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="941.3" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.10%)</title><rect x="941.3" y="579.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) [clone .plt] (1 samples, 0.10%)</title><rect x="942.4" y="595.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.4" y="606.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) (2 samples, 0.20%)</title><rect x="943.6" y="595.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (1 samples, 0.10%)</title><rect x="946.0" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.10%)</title><rect x="947.2" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="948.3" y="611.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="951.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="949.5" y="611.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="950.7" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.7" y="622.0"></text>
</g>
<g>
<title>std::condition_variable::~condition_variable() [clone .plt] (1 samples, 0.10%)</title><rect x="951.9" y="611.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.10%)</title><rect x="953.1" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="954.2" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.10%)</title><rect x="954.2" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="955.4" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.4" y="638.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.10%)</title><rect x="956.6" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="959.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="957.8" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 2.80%)</title><rect x="959.0" y="707.0" width="33.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="962.0" y="718.0">[u..</text>
</g>
<g>
<title>__GI_write (9 samples, 0.90%)</title><rect x="959.0" y="691.0" width="10.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="962.0" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.90%)</title><rect x="959.0" y="675.0" width="10.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="962.0" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.90%)</title><rect x="959.0" y="659.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="962.0" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="959.0" y="643.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="962.0" y="654.0"></text>
</g>
<g>
<title>__x64_sys_write (8 samples, 0.80%)</title><rect x="960.1" y="643.0" width="9.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="963.1" y="654.0"></text>
</g>
<g>
<title>ksys_write (8 samples, 0.80%)</title><rect x="960.1" y="627.0" width="9.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="963.1" y="638.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.20%)</title><rect x="960.1" y="611.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="963.1" y="622.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="960.1" y="595.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="963.1" y="606.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="960.1" y="579.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="963.1" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.10%)</title><rect x="961.3" y="595.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="964.3" y="606.0"></text>
</g>
<g>
<title>vfs_write (6 samples, 0.60%)</title><rect x="962.5" y="611.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="965.5" y="622.0"></text>
</g>
<g>
<title>__vfs_write (6 samples, 0.60%)</title><rect x="962.5" y="595.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="965.5" y="606.0"></text>
</g>
<g>
<title>new_sync_write (6 samples, 0.60%)</title><rect x="962.5" y="579.0" width="7.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="965.5" y="590.0"></text>
</g>
<g>
<title>ext4_file_write_iter (6 samples, 0.60%)</title><rect x="962.5" y="563.0" width="7.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="965.5" y="574.0"></text>
</g>
<g>
<title>__generic_file_write_iter (5 samples, 0.50%)</title><rect x="962.5" y="547.0" width="5.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="965.5" y="558.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 0.50%)</title><rect x="962.5" y="531.0" width="5.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="965.5" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.30%)</title><rect x="962.5" y="515.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="965.5" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.30%)</title><rect x="962.5" y="499.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="965.5" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (3 samples, 0.30%)</title><rect x="962.5" y="483.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="965.5" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.20%)</title><rect x="962.5" y="467.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="965.5" y="478.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.10%)</title><rect x="964.8" y="467.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="967.8" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.20%)</title><rect x="966.0" y="515.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="969.0" y="526.0"></text>
</g>
<g>
<title>generic_write_end (2 samples, 0.20%)</title><rect x="966.0" y="499.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="969.0" y="510.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.20%)</title><rect x="966.0" y="483.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="969.0" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.20%)</title><rect x="966.0" y="467.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="969.0" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.20%)</title><rect x="966.0" y="451.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="969.0" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.10%)</title><rect x="966.0" y="435.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="969.0" y="446.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.10%)</title><rect x="966.0" y="419.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="969.0" y="430.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.10%)</title><rect x="966.0" y="403.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="969.0" y="414.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.10%)</title><rect x="967.2" y="435.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="970.2" y="446.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.10%)</title><rect x="967.2" y="419.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="970.2" y="430.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.10%)</title><rect x="967.2" y="403.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="970.2" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (1 samples, 0.10%)</title><rect x="968.4" y="547.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="971.4" y="558.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="969.6" y="691.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="972.6" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="970.7" y="691.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="973.7" y="702.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (16 samples, 1.60%)</title><rect x="971.9" y="691.0" width="18.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="974.9" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.20%)</title><rect x="976.6" y="675.0" width="14.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="979.6" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.20%)</title><rect x="976.6" y="659.0" width="14.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="979.6" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.90%)</title><rect x="977.8" y="643.0" width="10.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="980.8" y="654.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.90%)</title><rect x="977.8" y="627.0" width="10.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="980.8" y="638.0"></text>
</g>
<g>
<title>futex_wait (8 samples, 0.80%)</title><rect x="979.0" y="611.0" width="9.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="982.0" y="622.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.40%)</title><rect x="981.3" y="595.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="984.3" y="606.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.40%)</title><rect x="981.3" y="579.0" width="4.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="984.3" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.20%)</title><rect x="983.7" y="563.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="986.7" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.20%)</title><rect x="983.7" y="547.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="986.7" y="558.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.20%)</title><rect x="986.1" y="595.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="989.1" y="606.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.10%)</title><rect x="987.2" y="579.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="990.2" y="590.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.20%)</title><rect x="988.4" y="643.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="991.4" y="654.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.10%)</title><rect x="989.6" y="627.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="992.6" y="638.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.10%)</title><rect x="990.8" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.8" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (31 samples, 3.10%)</title><rect x="992.0" y="707.0" width="36.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="995.0" y="718.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 3.00%)</title><rect x="993.1" y="691.0" width="35.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="996.1" y="702.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (30 samples, 3.00%)</title><rect x="993.1" y="675.0" width="35.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="996.1" y="686.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (29 samples, 2.90%)</title><rect x="994.3" y="659.0" width="34.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="997.3" y="670.0">__..</text>
</g>
<g>
<title>do_futex (29 samples, 2.90%)</title><rect x="994.3" y="643.0" width="34.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="997.3" y="654.0">do..</text>
</g>
<g>
<title>futex_wake (29 samples, 2.90%)</title><rect x="994.3" y="627.0" width="34.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="997.3" y="638.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.50%)</title><rect x="995.5" y="611.0" width="5.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="998.5" y="622.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.10%)</title><rect x="1000.2" y="595.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1003.2" y="606.0"></text>
</g>
<g>
<title>wake_up_q (23 samples, 2.30%)</title><rect x="1001.4" y="611.0" width="27.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1004.4" y="622.0">w..</text>
</g>
<g>
<title>try_to_wake_up (23 samples, 2.30%)</title><rect x="1001.4" y="595.0" width="27.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1004.4" y="606.0">t..</text>
</g>
<g>
<title>__lock_text_start (23 samples, 2.30%)</title><rect x="1001.4" y="579.0" width="27.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1004.4" y="590.0">_..</text>
</g>
<g>
<title>call_stub (2 samples, 0.20%)</title><rect x="1028.5" y="707.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1031.5" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (17 samples, 1.70%)</title><rect x="1030.9" y="707.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (92 samples, 9.19%)</title><rect x="1050.9" y="707.0" width="108.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.9" y="718.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (92 samples, 9.19%)</title><rect x="1050.9" y="691.0" width="108.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1053.9" y="702.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.10%)</title><rect x="1055.6" y="675.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1058.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.10%)</title><rect x="1055.6" y="659.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1058.6" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (87 samples, 8.69%)</title><rect x="1056.8" y="675.0" width="102.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1059.8" y="686.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (8 samples, 0.80%)</title><rect x="1056.8" y="659.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.8" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (79 samples, 7.89%)</title><rect x="1066.2" y="659.0" width="93.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1069.2" y="670.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (75 samples, 7.49%)</title><rect x="1070.9" y="643.0" width="88.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1073.9" y="654.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (69 samples, 6.89%)</title><rect x="1078.0" y="627.0" width="81.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1081.0" y="638.0">Java_org_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="1080.4" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="1081.5" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.5" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="1082.7" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.7" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="1083.9" y="611.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1086.9" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 1.00%)</title><rect x="1085.1" y="611.0" width="11.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1088.1" y="622.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="1085.1" y="595.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.1" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.40%)</title><rect x="1086.3" y="595.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.3" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.50%)</title><rect x="1091.0" y="595.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.0" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (36 samples, 3.60%)</title><rect x="1096.9" y="611.0" width="42.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1099.9" y="622.0">jni_..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.20%)</title><rect x="1101.6" y="595.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.6" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="1103.9" y="595.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.9" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.60%)</title><rect x="1105.1" y="595.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.1" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (23 samples, 2.30%)</title><rect x="1112.2" y="595.0" width="27.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.2" y="606.0">T..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (21 samples, 2.10%)</title><rect x="1114.6" y="579.0" width="24.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.6" y="590.0">C..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.20%)</title><rect x="1115.7" y="563.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.7" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 1.30%)</title><rect x="1118.1" y="563.0" width="15.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.1" y="574.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.10%)</title><rect x="1122.8" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.8" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.20%)</title><rect x="1124.0" y="547.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="558.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.30%)</title><rect x="1126.3" y="547.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.3" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (3 samples, 0.30%)</title><rect x="1129.9" y="547.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1132.9" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.30%)</title><rect x="1133.4" y="563.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="1137.0" y="563.0" width="2.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1140.0" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 1.50%)</title><rect x="1139.3" y="611.0" width="17.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1142.3" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="1142.8" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.50%)</title><rect x="1144.0" y="595.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.0" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.40%)</title><rect x="1149.9" y="595.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.20%)</title><rect x="1154.6" y="595.0" width="2.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1157.6" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1155.8" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.20%)</title><rect x="1157.0" y="611.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.getResponseWithNoBody (1 samples, 0.10%)</title><rect x="1159.4" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1162.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.10%)</title><rect x="1159.4" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.10%)</title><rect x="1160.5" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.10%)</title><rect x="1160.5" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.10%)</title><rect x="1160.5" y="755.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1163.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.50%)</title><rect x="1161.7" y="819.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1164.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.20%)</title><rect x="1164.1" y="803.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1167.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.10%)</title><rect x="1166.4" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1169.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.20%)</title><rect x="1167.6" y="819.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1170.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.10%)</title><rect x="1168.8" y="803.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1171.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.10%)</title><rect x="1168.8" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.10%)</title><rect x="1168.8" y="771.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.10%)</title><rect x="1168.8" y="755.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.10%)</title><rect x="1170.0" y="819.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1173.0" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="1170.0" y="803.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1173.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.20%)</title><rect x="1171.1" y="819.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1174.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.20%)</title><rect x="1171.1" y="803.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1174.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (2 samples, 0.20%)</title><rect x="1171.1" y="787.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1174.1" y="798.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="1172.3" y="771.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1175.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1173.5" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1173.5" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1173.5" y="787.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1173.5" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.10%)</title><rect x="1173.5" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 1.20%)</title><rect x="1174.7" y="835.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1177.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 1.20%)</title><rect x="1174.7" y="819.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.10%)</title><rect x="1174.7" y="803.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>__GI___recv (11 samples, 1.10%)</title><rect x="1175.9" y="803.0" width="12.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.00%)</title><rect x="1177.0" y="787.0" width="11.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (1 samples, 0.10%)</title><rect x="1177.0" y="771.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.90%)</title><rect x="1178.2" y="771.0" width="10.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 0.60%)</title><rect x="1179.4" y="755.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 0.60%)</title><rect x="1179.4" y="739.0" width="7.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1182.4" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 0.50%)</title><rect x="1179.4" y="723.0" width="5.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1182.4" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (4 samples, 0.40%)</title><rect x="1179.4" y="707.0" width="4.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 0.40%)</title><rect x="1179.4" y="691.0" width="4.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="1181.7" y="675.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="1181.7" y="659.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.10%)</title><rect x="1182.9" y="675.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1185.9" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.10%)</title><rect x="1182.9" y="659.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.10%)</title><rect x="1182.9" y="643.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.10%)</title><rect x="1184.1" y="707.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.10%)</title><rect x="1184.1" y="691.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1187.1" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.10%)</title><rect x="1184.1" y="675.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1187.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.10%)</title><rect x="1184.1" y="659.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1187.1" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.10%)</title><rect x="1184.1" y="643.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.10%)</title><rect x="1184.1" y="627.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.10%)</title><rect x="1185.3" y="723.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1188.3" y="734.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="1185.3" y="707.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="1185.3" y="691.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="1185.3" y="675.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.20%)</title><rect x="1186.5" y="755.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.20%)</title><rect x="1186.5" y="739.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="1188.8" y="851.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.10%)</title><rect x="1188.8" y="835.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
</g>
</svg>
