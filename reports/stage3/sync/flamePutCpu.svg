<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (862 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.70%)</title><rect x="10.0" y="883.0" width="8.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>call_stub (6 samples, 0.70%)</title><rect x="10.0" y="867.0" width="8.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (15 samples, 1.74%)</title><rect x="18.2" y="883.0" width="20.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="21.2" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (13 samples, 1.51%)</title><rect x="18.2" y="867.0" width="17.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="21.2" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (13 samples, 1.51%)</title><rect x="18.2" y="851.0" width="17.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="21.2" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (13 samples, 1.51%)</title><rect x="18.2" y="835.0" width="17.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (13 samples, 1.51%)</title><rect x="18.2" y="819.0" width="17.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (13 samples, 1.51%)</title><rect x="18.2" y="803.0" width="17.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (13 samples, 1.51%)</title><rect x="18.2" y="787.0" width="17.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (13 samples, 1.51%)</title><rect x="18.2" y="771.0" width="17.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.35%)</title><rect x="18.2" y="755.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.35%)</title><rect x="18.2" y="739.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.35%)</title><rect x="18.2" y="723.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.35%)</title><rect x="18.2" y="707.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.35%)</title><rect x="18.2" y="691.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.35%)</title><rect x="18.2" y="675.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.2" y="686.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.35%)</title><rect x="18.2" y="659.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.2" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (3 samples, 0.35%)</title><rect x="18.2" y="643.0" width="4.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.2" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (2 samples, 0.23%)</title><rect x="18.2" y="627.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="21.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.23%)</title><rect x="18.2" y="611.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.23%)</title><rect x="18.2" y="595.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.2" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.23%)</title><rect x="18.2" y="579.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.2" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.23%)</title><rect x="18.2" y="563.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="21.2" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.23%)</title><rect x="18.2" y="547.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="21.2" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.23%)</title><rect x="18.2" y="531.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.2" y="542.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.12%)</title><rect x="18.2" y="515.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.2" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.12%)</title><rect x="19.6" y="515.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.6" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="19.6" y="499.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.12%)</title><rect x="21.0" y="627.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.12%)</title><rect x="21.0" y="611.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.0" y="622.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.12%)</title><rect x="21.0" y="595.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.0" y="606.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.12%)</title><rect x="21.0" y="579.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="24.0" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.12%)</title><rect x="21.0" y="563.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.0" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.12%)</title><rect x="21.0" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.0" y="558.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.12%)</title><rect x="21.0" y="531.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (10 samples, 1.16%)</title><rect x="22.3" y="755.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="25.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (10 samples, 1.16%)</title><rect x="22.3" y="739.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 1.16%)</title><rect x="22.3" y="723.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.16%)</title><rect x="22.3" y="707.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (10 samples, 1.16%)</title><rect x="22.3" y="691.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 1.16%)</title><rect x="22.3" y="675.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (10 samples, 1.16%)</title><rect x="22.3" y="659.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.3" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (10 samples, 1.16%)</title><rect x="22.3" y="643.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.3" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (10 samples, 1.16%)</title><rect x="22.3" y="627.0" width="13.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.3" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (10 samples, 1.16%)</title><rect x="22.3" y="611.0" width="13.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 1.16%)</title><rect x="22.3" y="595.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (10 samples, 1.16%)</title><rect x="22.3" y="579.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.3" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.46%)</title><rect x="22.3" y="563.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.3" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.46%)</title><rect x="22.3" y="547.0" width="5.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="25.3" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.46%)</title><rect x="22.3" y="531.0" width="5.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="25.3" y="542.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.12%)</title><rect x="22.3" y="515.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.3" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.35%)</title><rect x="23.7" y="515.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.7" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.23%)</title><rect x="25.1" y="499.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="28.1" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 0.70%)</title><rect x="27.8" y="563.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="30.8" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 0.70%)</title><rect x="27.8" y="547.0" width="8.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="30.8" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.70%)</title><rect x="27.8" y="531.0" width="8.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="30.8" y="542.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.12%)</title><rect x="27.8" y="515.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="30.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.58%)</title><rect x="29.2" y="515.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="32.2" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.46%)</title><rect x="30.5" y="499.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="33.5" y="510.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.23%)</title><rect x="36.0" y="867.0" width="2.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="39.0" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (836 samples, 96.98%)</title><rect x="38.7" y="883.0" width="1144.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.7" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.12%)</title><rect x="48.3" y="867.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.12%)</title><rect x="49.7" y="867.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (13 samples, 1.51%)</title><rect x="51.1" y="867.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (13 samples, 1.51%)</title><rect x="51.1" y="851.0" width="17.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 1.04%)</title><rect x="51.1" y="835.0" width="12.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="54.1" y="846.0"></text>
</g>
<g>
<title>epoll_wait (9 samples, 1.04%)</title><rect x="51.1" y="819.0" width="12.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="54.1" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 1.04%)</title><rect x="51.1" y="803.0" width="12.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="54.1" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 1.04%)</title><rect x="51.1" y="787.0" width="12.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="54.1" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (8 samples, 0.93%)</title><rect x="51.1" y="771.0" width="10.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="54.1" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (8 samples, 0.93%)</title><rect x="51.1" y="755.0" width="10.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="54.1" y="766.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.12%)</title><rect x="51.1" y="739.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="54.1" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.12%)</title><rect x="51.1" y="723.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="54.1" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.12%)</title><rect x="51.1" y="707.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="54.1" y="718.0"></text>
</g>
<g>
<title>ep_poll (7 samples, 0.81%)</title><rect x="52.4" y="739.0" width="9.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="55.4" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (5 samples, 0.58%)</title><rect x="53.8" y="723.0" width="6.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="56.8" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.35%)</title><rect x="55.2" y="707.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="58.2" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.23%)</title><rect x="56.5" y="691.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="59.5" y="702.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.23%)</title><rect x="56.5" y="675.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="59.5" y="686.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.12%)</title><rect x="57.9" y="659.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="60.9" y="670.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.12%)</title><rect x="59.3" y="707.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="62.3" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.12%)</title><rect x="60.6" y="723.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="63.6" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.12%)</title><rect x="60.6" y="707.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="63.6" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.12%)</title><rect x="60.6" y="691.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="63.6" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.12%)</title><rect x="60.6" y="675.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="63.6" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.12%)</title><rect x="60.6" y="659.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="63.6" y="670.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.12%)</title><rect x="62.0" y="771.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.0" y="782.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.12%)</title><rect x="62.0" y="755.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="65.0" y="766.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.23%)</title><rect x="63.4" y="835.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="66.4" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="66.1" y="835.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="69.1" y="846.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.23%)</title><rect x="66.1" y="819.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="69.1" y="830.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.23%)</title><rect x="66.1" y="803.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="69.1" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (814 samples, 94.43%)</title><rect x="68.9" y="867.0" width="1114.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (814 samples, 94.43%)</title><rect x="68.9" y="851.0" width="1114.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (800 samples, 92.81%)</title><rect x="68.9" y="835.0" width="1095.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.9" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.12%)</title><rect x="70.2" y="819.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (790 samples, 91.65%)</title><rect x="71.6" y="819.0" width="1081.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.6" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (790 samples, 91.65%)</title><rect x="71.6" y="803.0" width="1081.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.6" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (789 samples, 91.53%)</title><rect x="73.0" y="787.0" width="1080.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.0" y="798.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (75 samples, 8.70%)</title><rect x="73.0" y="771.0" width="102.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.0" y="782.0">one/nio/http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.35%)</title><rect x="74.3" y="755.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.35%)</title><rect x="74.3" y="739.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.35%)</title><rect x="74.3" y="723.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.3" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="77.1" y="707.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="80.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (70 samples, 8.12%)</title><rect x="78.4" y="755.0" width="95.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.4" y="766.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.23%)</title><rect x="78.4" y="739.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.12%)</title><rect x="79.8" y="723.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.12%)</title><rect x="79.8" y="707.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.12%)</title><rect x="79.8" y="691.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.12%)</title><rect x="79.8" y="675.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.12%)</title><rect x="79.8" y="659.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (68 samples, 7.89%)</title><rect x="81.2" y="739.0" width="93.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.2" y="750.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (68 samples, 7.89%)</title><rect x="81.2" y="723.0" width="93.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.2" y="734.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (67 samples, 7.77%)</title><rect x="82.6" y="707.0" width="91.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.6" y="718.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (67 samples, 7.77%)</title><rect x="82.6" y="691.0" width="91.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.6" y="702.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.23%)</title><rect x="83.9" y="675.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="86.9" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.23%)</title><rect x="83.9" y="659.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="86.9" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="85.3" y="643.0" width="1.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="88.3" y="654.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.12%)</title><rect x="86.7" y="675.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="89.7" y="686.0"></text>
</g>
<g>
<title>__libc_send (63 samples, 7.31%)</title><rect x="88.0" y="675.0" width="86.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="91.0" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (61 samples, 7.08%)</title><rect x="90.8" y="659.0" width="83.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="93.8" y="670.0">entry_SYS..</text>
</g>
<g>
<title>do_syscall_64 (61 samples, 7.08%)</title><rect x="90.8" y="643.0" width="83.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="93.8" y="654.0">do_syscal..</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.12%)</title><rect x="90.8" y="627.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="93.8" y="638.0"></text>
</g>
<g>
<title>__x64_sys_sendto (60 samples, 6.96%)</title><rect x="92.1" y="627.0" width="82.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="95.1" y="638.0">__x64_sys..</text>
</g>
<g>
<title>__sys_sendto (58 samples, 6.73%)</title><rect x="92.1" y="611.0" width="79.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="95.1" y="622.0">__sys_sen..</text>
</g>
<g>
<title>sock_sendmsg (57 samples, 6.61%)</title><rect x="93.5" y="595.0" width="78.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="96.5" y="606.0">sock_send..</text>
</g>
<g>
<title>inet6_sendmsg (55 samples, 6.38%)</title><rect x="93.5" y="579.0" width="75.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="96.5" y="590.0">inet6_se..</text>
</g>
<g>
<title>tcp_sendmsg (55 samples, 6.38%)</title><rect x="93.5" y="563.0" width="75.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="96.5" y="574.0">tcp_send..</text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.12%)</title><rect x="93.5" y="547.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="96.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (54 samples, 6.26%)</title><rect x="94.9" y="547.0" width="73.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="97.9" y="558.0">tcp_send..</text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.35%)</title><rect x="96.2" y="531.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="99.2" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.23%)</title><rect x="97.6" y="515.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="100.6" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.12%)</title><rect x="97.6" y="499.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="100.6" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.12%)</title><rect x="99.0" y="499.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="102.0" y="510.0"></text>
</g>
<g>
<title>tcp_push (50 samples, 5.80%)</title><rect x="100.3" y="531.0" width="68.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="103.3" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (50 samples, 5.80%)</title><rect x="100.3" y="515.0" width="68.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="103.3" y="526.0">__tcp_p..</text>
</g>
<g>
<title>tcp_write_xmit (50 samples, 5.80%)</title><rect x="100.3" y="499.0" width="68.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="103.3" y="510.0">tcp_wri..</text>
</g>
<g>
<title>__tcp_transmit_skb (46 samples, 5.34%)</title><rect x="101.7" y="483.0" width="63.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="104.7" y="494.0">__tcp_..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.12%)</title><rect x="101.7" y="467.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="104.7" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (44 samples, 5.10%)</title><rect x="103.1" y="467.0" width="60.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="106.1" y="478.0">ip_que..</text>
</g>
<g>
<title>__ip_queue_xmit (43 samples, 4.99%)</title><rect x="103.1" y="451.0" width="58.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="106.1" y="462.0">__ip_q..</text>
</g>
<g>
<title>ip_local_out (43 samples, 4.99%)</title><rect x="103.1" y="435.0" width="58.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="106.1" y="446.0">ip_loc..</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.46%)</title><rect x="103.1" y="419.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="106.1" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.12%)</title><rect x="103.1" y="403.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="106.1" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.35%)</title><rect x="104.5" y="403.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="107.5" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (3 samples, 0.35%)</title><rect x="104.5" y="387.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="107.5" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.35%)</title><rect x="104.5" y="371.0" width="4.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="107.5" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.12%)</title><rect x="104.5" y="355.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="107.5" y="366.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (1 samples, 0.12%)</title><rect x="105.8" y="355.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="108.8" y="366.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (1 samples, 0.12%)</title><rect x="107.2" y="355.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="110.2" y="366.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (1 samples, 0.12%)</title><rect x="107.2" y="339.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="110.2" y="350.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (1 samples, 0.12%)</title><rect x="107.2" y="323.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="110.2" y="334.0"></text>
</g>
<g>
<title>ip_output (38 samples, 4.41%)</title><rect x="108.6" y="419.0" width="52.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="111.6" y="430.0">ip_ou..</text>
</g>
<g>
<title>ip_finish_output (36 samples, 4.18%)</title><rect x="111.3" y="403.0" width="49.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="114.3" y="414.0">ip_fi..</text>
</g>
<g>
<title>__ip_finish_output (36 samples, 4.18%)</title><rect x="111.3" y="387.0" width="49.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="114.3" y="398.0">__ip_..</text>
</g>
<g>
<title>ip_finish_output2 (36 samples, 4.18%)</title><rect x="111.3" y="371.0" width="49.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="114.3" y="382.0">ip_fi..</text>
</g>
<g>
<title>__local_bh_enable_ip (31 samples, 3.60%)</title><rect x="112.7" y="355.0" width="42.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="115.7" y="366.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.20 (31 samples, 3.60%)</title><rect x="112.7" y="339.0" width="42.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="115.7" y="350.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (31 samples, 3.60%)</title><rect x="112.7" y="323.0" width="42.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="115.7" y="334.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (31 samples, 3.60%)</title><rect x="112.7" y="307.0" width="42.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="115.7" y="318.0">__so..</text>
</g>
<g>
<title>net_rx_action (31 samples, 3.60%)</title><rect x="112.7" y="291.0" width="42.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="115.7" y="302.0">net_..</text>
</g>
<g>
<title>process_backlog (30 samples, 3.48%)</title><rect x="114.0" y="275.0" width="41.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="117.0" y="286.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (30 samples, 3.48%)</title><rect x="114.0" y="259.0" width="41.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="117.0" y="270.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (29 samples, 3.36%)</title><rect x="115.4" y="243.0" width="39.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="118.4" y="254.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.12%)</title><rect x="115.4" y="227.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="118.4" y="238.0"></text>
</g>
<g>
<title>ip_rcv (28 samples, 3.25%)</title><rect x="116.8" y="227.0" width="38.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="119.8" y="238.0">ip_..</text>
</g>
<g>
<title>ip_rcv_finish (28 samples, 3.25%)</title><rect x="116.8" y="211.0" width="38.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.8" y="222.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver (28 samples, 3.25%)</title><rect x="116.8" y="195.0" width="38.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="119.8" y="206.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (27 samples, 3.13%)</title><rect x="116.8" y="179.0" width="36.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="119.8" y="190.0">ip_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (27 samples, 3.13%)</title><rect x="116.8" y="163.0" width="36.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="119.8" y="174.0">ip_..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.12%)</title><rect x="118.1" y="147.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="121.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.12%)</title><rect x="119.5" y="147.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="122.5" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (24 samples, 2.78%)</title><rect x="120.9" y="147.0" width="32.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="123.9" y="158.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.23%)</title><rect x="120.9" y="131.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="123.9" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.35%)</title><rect x="123.6" y="131.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="126.6" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.12%)</title><rect x="123.6" y="115.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="126.6" y="126.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.12%)</title><rect x="125.0" y="115.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="128.0" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.12%)</title><rect x="126.4" y="115.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="129.4" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.12%)</title><rect x="127.7" y="131.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="130.7" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (18 samples, 2.09%)</title><rect x="129.1" y="131.0" width="24.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="132.1" y="142.0">t..</text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.12%)</title><rect x="129.1" y="115.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="132.1" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (17 samples, 1.97%)</title><rect x="130.5" y="115.0" width="23.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="133.5" y="126.0">t..</text>
</g>
<g>
<title>tcp_ack (6 samples, 0.70%)</title><rect x="130.5" y="99.0" width="8.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="133.5" y="110.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.12%)</title><rect x="131.8" y="83.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="134.8" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.12%)</title><rect x="133.2" y="83.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="136.2" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.35%)</title><rect x="134.6" y="83.0" width="4.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="137.6" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.12%)</title><rect x="135.9" y="67.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="138.9" y="78.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.12%)</title><rect x="135.9" y="51.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="138.9" y="62.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.12%)</title><rect x="135.9" y="35.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="138.9" y="46.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.12%)</title><rect x="137.3" y="67.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="140.3" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.12%)</title><rect x="138.7" y="99.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="141.7" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (10 samples, 1.16%)</title><rect x="140.0" y="99.0" width="13.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="143.0" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (10 samples, 1.16%)</title><rect x="140.0" y="83.0" width="13.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="143.0" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (9 samples, 1.04%)</title><rect x="141.4" y="67.0" width="12.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="144.4" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (9 samples, 1.04%)</title><rect x="141.4" y="51.0" width="12.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="144.4" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 1.04%)</title><rect x="141.4" y="35.0" width="12.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="144.4" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.12%)</title><rect x="153.7" y="179.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="156.7" y="190.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.12%)</title><rect x="153.7" y="163.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="156.7" y="174.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.12%)</title><rect x="153.7" y="147.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="156.7" y="158.0"></text>
</g>
<g>
<title>dev_queue_xmit (4 samples, 0.46%)</title><rect x="155.1" y="355.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="158.1" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.46%)</title><rect x="155.1" y="339.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="158.1" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.23%)</title><rect x="155.1" y="323.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="158.1" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.12%)</title><rect x="155.1" y="307.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="158.1" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.12%)</title><rect x="155.1" y="291.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="158.1" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.12%)</title><rect x="155.1" y="275.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="158.1" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.12%)</title><rect x="155.1" y="259.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="158.1" y="270.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.12%)</title><rect x="156.5" y="307.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="159.5" y="318.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.12%)</title><rect x="157.8" y="323.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="160.8" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.12%)</title><rect x="159.2" y="323.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="162.2" y="334.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.12%)</title><rect x="159.2" y="307.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="162.2" y="318.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.12%)</title><rect x="160.6" y="419.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="163.6" y="430.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.12%)</title><rect x="161.9" y="451.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="164.9" y="462.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.12%)</title><rect x="163.3" y="467.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="166.3" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.12%)</title><rect x="163.3" y="451.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="166.3" y="462.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.35%)</title><rect x="164.7" y="483.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="167.7" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.12%)</title><rect x="167.4" y="467.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="170.4" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.12%)</title><rect x="167.4" y="451.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="170.4" y="462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.12%)</title><rect x="167.4" y="435.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="170.4" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.12%)</title><rect x="167.4" y="419.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="170.4" y="430.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.23%)</title><rect x="168.8" y="579.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="171.8" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.23%)</title><rect x="168.8" y="563.0" width="2.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="171.8" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.23%)</title><rect x="168.8" y="547.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="171.8" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.12%)</title><rect x="170.2" y="531.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="173.2" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.12%)</title><rect x="170.2" y="515.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="173.2" y="526.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (1 samples, 0.12%)</title><rect x="170.2" y="499.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="173.2" y="510.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.23%)</title><rect x="171.5" y="611.0" width="2.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="174.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.12%)</title><rect x="174.3" y="755.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="177.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.12%)</title><rect x="175.6" y="771.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.12%)</title><rect x="175.6" y="755.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="175.6" y="739.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="175.6" y="723.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (713 samples, 82.71%)</title><rect x="177.0" y="771.0" width="976.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.0" y="782.0">ru/mail/polis/service/stasyanoi/CustomServer.put</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.12%)</title><rect x="177.0" y="755.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.12%)</title><rect x="177.0" y="739.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.12%)</title><rect x="177.0" y="723.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.12%)</title><rect x="177.0" y="707.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (712 samples, 82.60%)</title><rect x="178.4" y="755.0" width="974.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.4" y="766.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (712 samples, 82.60%)</title><rect x="178.4" y="739.0" width="974.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.4" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (711 samples, 82.48%)</title><rect x="179.7" y="723.0" width="973.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.7" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.35%)</title><rect x="179.7" y="707.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.7" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (555 samples, 64.39%)</title><rect x="183.9" y="707.0" width="759.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="186.9" y="718.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (555 samples, 64.39%)</title><rect x="183.9" y="691.0" width="759.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="186.9" y="702.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jb..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (554 samples, 64.27%)</title><rect x="183.9" y="675.0" width="758.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="186.9" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (554 samples, 64.27%)</title><rect x="183.9" y="659.0" width="758.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="186.9" y="670.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, ro..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (553 samples, 64.15%)</title><rect x="183.9" y="643.0" width="757.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="186.9" y="654.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (546 samples, 63.34%)</title><rect x="183.9" y="627.0" width="747.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="186.9" y="638.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.12%)</title><rect x="183.9" y="611.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="186.9" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_destroy (2 samples, 0.23%)</title><rect x="185.2" y="611.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="188.2" y="622.0"></text>
</g>
<g>
<title>pthread_cond_destroy@plt (1 samples, 0.12%)</title><rect x="188.0" y="611.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="191.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (537 samples, 62.30%)</title><rect x="189.3" y="611.0" width="735.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="192.3" y="622.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*,..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.35%)</title><rect x="196.2" y="595.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="199.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (6 samples, 0.70%)</title><rect x="200.3" y="595.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="203.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (6 samples, 0.70%)</title><rect x="200.3" y="579.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="203.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (6 samples, 0.70%)</title><rect x="200.3" y="563.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="203.3" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (1 samples, 0.12%)</title><rect x="200.3" y="547.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="203.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.35%)</title><rect x="201.6" y="547.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="204.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.12%)</title><rect x="203.0" y="531.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="206.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.12%)</title><rect x="204.4" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="207.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.12%)</title><rect x="205.8" y="547.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="208.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.12%)</title><rect x="207.1" y="547.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.12%)</title><rect x="207.1" y="531.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="210.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned long, unsigned long) (1 samples, 0.12%)</title><rect x="207.1" y="515.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="210.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (15 samples, 1.74%)</title><rect x="208.5" y="595.0" width="20.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (15 samples, 1.74%)</title><rect x="208.5" y="579.0" width="20.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="211.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (15 samples, 1.74%)</title><rect x="208.5" y="563.0" width="20.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="211.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 1.74%)</title><rect x="208.5" y="547.0" width="20.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.12%)</title><rect x="208.5" y="531.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="211.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (14 samples, 1.62%)</title><rect x="209.9" y="531.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="212.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (13 samples, 1.51%)</title><rect x="209.9" y="515.0" width="17.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="212.9" y="526.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (12 samples, 1.39%)</title><rect x="211.2" y="499.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="214.2" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (9 samples, 1.04%)</title><rect x="211.2" y="483.0" width="12.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="214.2" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (4 samples, 0.46%)</title><rect x="212.6" y="467.0" width="5.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="215.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.46%)</title><rect x="212.6" y="451.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="215.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.46%)</title><rect x="212.6" y="435.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="215.6" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.12%)</title><rect x="212.6" y="419.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="215.6" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.12%)</title><rect x="212.6" y="403.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="215.6" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.12%)</title><rect x="212.6" y="387.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="215.6" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.12%)</title><rect x="212.6" y="371.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="215.6" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.35%)</title><rect x="214.0" y="419.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="217.0" y="430.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.35%)</title><rect x="214.0" y="403.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="217.0" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="214.0" y="387.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="217.0" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.23%)</title><rect x="215.3" y="387.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="218.3" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.12%)</title><rect x="215.3" y="371.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="218.3" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.12%)</title><rect x="215.3" y="355.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="218.3" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.12%)</title><rect x="215.3" y="339.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.3" y="350.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.12%)</title><rect x="216.7" y="371.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="219.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.46%)</title><rect x="218.1" y="467.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="221.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.35%)</title><rect x="218.1" y="451.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="221.1" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.12%)</title><rect x="218.1" y="435.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="221.1" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.12%)</title><rect x="218.1" y="419.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="221.1" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.12%)</title><rect x="218.1" y="403.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="221.1" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.12%)</title><rect x="218.1" y="387.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="221.1" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.12%)</title><rect x="218.1" y="371.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="221.1" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.12%)</title><rect x="219.4" y="435.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="222.4" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.12%)</title><rect x="219.4" y="419.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="222.4" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.12%)</title><rect x="219.4" y="403.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="222.4" y="414.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.12%)</title><rect x="220.8" y="435.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="223.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.12%)</title><rect x="222.2" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="225.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.35%)</title><rect x="223.5" y="483.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="226.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.35%)</title><rect x="223.5" y="467.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="226.5" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.35%)</title><rect x="223.5" y="451.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="226.5" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.35%)</title><rect x="223.5" y="435.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="226.5" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.35%)</title><rect x="223.5" y="419.0" width="4.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="226.5" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.12%)</title><rect x="226.3" y="403.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="229.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.12%)</title><rect x="227.7" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="230.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (360 samples, 41.76%)</title><rect x="229.0" y="595.0" width="492.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="232.0" y="606.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.12%)</title><rect x="230.4" y="579.0" width="1.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="233.4" y="590.0"></text>
</g>
<g>
<title>free@plt (1 samples, 0.12%)</title><rect x="231.8" y="579.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="234.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (356 samples, 41.30%)</title><rect x="233.1" y="579.0" width="487.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="236.1" y="590.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.12%)</title><rect x="233.1" y="563.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="236.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.12%)</title><rect x="234.5" y="563.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (354 samples, 41.07%)</title><rect x="235.9" y="563.0" width="484.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="238.9" y="574.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, ro..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (353 samples, 40.95%)</title><rect x="237.2" y="547.0" width="483.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="240.2" y="558.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const..</text>
</g>
<g>
<title>__malloc (1 samples, 0.12%)</title><rect x="237.2" y="531.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="240.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.12%)</title><rect x="238.6" y="531.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="241.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (351 samples, 40.72%)</title><rect x="240.0" y="531.0" width="480.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="243.0" y="542.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice ..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.12%)</title><rect x="241.3" y="515.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="244.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.12%)</title><rect x="242.7" y="515.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="245.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (347 samples, 40.26%)</title><rect x="244.1" y="515.0" width="475.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="247.1" y="526.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (3 samples, 0.35%)</title><rect x="244.1" y="499.0" width="4.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="247.1" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.12%)</title><rect x="244.1" y="483.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="247.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.12%)</title><rect x="245.5" y="483.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="248.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.12%)</title><rect x="246.8" y="483.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="249.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.12%)</title><rect x="248.2" y="499.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (343 samples, 39.79%)</title><rect x="249.6" y="499.0" width="469.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="252.6" y="510.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (343 samples, 39.79%)</title><rect x="249.6" y="483.0" width="469.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="252.6" y="494.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator ..</text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (321 samples, 37.24%)</title><rect x="250.9" y="467.0" width="439.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="253.9" y="478.0">/tmp/librocksdbjni12271379581293310500.so</text>
</g>
<g>
<title>/tmp/librocksdbjni12271379581293310500.so (316 samples, 36.66%)</title><rect x="257.8" y="451.0" width="432.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="260.8" y="462.0">/tmp/librocksdbjni12271379581293310500.so</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.35%)</title><rect x="257.8" y="435.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="260.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (313 samples, 36.31%)</title><rect x="261.9" y="435.0" width="428.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="264.9" y="446.0">rocksdb::MemTable::KeyComparator::operator()(char const*, r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (312 samples, 36.19%)</title><rect x="263.2" y="419.0" width="427.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="266.2" y="430.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice ..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (22 samples, 2.55%)</title><rect x="270.1" y="403.0" width="30.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="273.1" y="414.0">JN..</text>
</g>
<g>
<title>jni_CallIntMethodV (22 samples, 2.55%)</title><rect x="270.1" y="387.0" width="30.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="273.1" y="398.0">jn..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.12%)</title><rect x="275.6" y="371.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.6" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="276.9" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="279.9" y="382.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (16 samples, 1.86%)</title><rect x="278.3" y="371.0" width="21.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="281.3" y="382.0">j..</text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.12%)</title><rect x="283.8" y="355.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="286.8" y="366.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.23%)</title><rect x="285.2" y="355.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.2" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.81%)</title><rect x="287.9" y="355.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.9" y="366.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.12%)</title><rect x="287.9" y="339.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="290.9" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.12%)</title><rect x="289.3" y="339.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.3" y="350.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.23%)</title><rect x="290.6" y="339.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="293.6" y="350.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.12%)</title><rect x="293.4" y="339.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="296.4" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.23%)</title><rect x="294.7" y="339.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="297.7" y="350.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.23%)</title><rect x="297.5" y="355.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.5" y="366.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (52 samples, 6.03%)</title><rect x="300.2" y="403.0" width="71.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="303.2" y="414.0">JNIEnv_:..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="300.2" y="387.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="303.2" y="398.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (51 samples, 5.92%)</title><rect x="301.6" y="387.0" width="69.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="304.6" y="398.0">jni_Cal..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="302.9" y="371.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="305.9" y="382.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.12%)</title><rect x="304.3" y="371.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="307.3" y="382.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.23%)</title><rect x="305.7" y="371.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="308.7" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.12%)</title><rect x="308.4" y="371.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="311.4" y="382.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.12%)</title><rect x="309.8" y="371.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="312.8" y="382.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.12%)</title><rect x="311.2" y="371.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="314.2" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.35%)</title><rect x="312.5" y="371.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.5" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.35%)</title><rect x="316.6" y="371.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="319.6" y="382.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (37 samples, 4.29%)</title><rect x="320.7" y="371.0" width="50.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="323.7" y="382.0">jni_i..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.23%)</title><rect x="327.6" y="355.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.6" y="366.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (6 samples, 0.70%)</title><rect x="330.3" y="355.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="333.3" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples, 1.74%)</title><rect x="338.5" y="355.0" width="20.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="341.5" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.93%)</title><rect x="344.0" y="339.0" width="11.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="347.0" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.23%)</title><rect x="352.2" y="323.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="355.2" y="334.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.12%)</title><rect x="355.0" y="339.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="358.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.23%)</title><rect x="356.3" y="339.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="359.3" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.12%)</title><rect x="359.1" y="355.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.1" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.35%)</title><rect x="360.4" y="355.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="363.4" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.46%)</title><rect x="364.5" y="355.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="367.5" y="366.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.12%)</title><rect x="370.0" y="355.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="373.0" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="371.4" y="403.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="374.4" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (71 samples, 8.24%)</title><rect x="372.8" y="403.0" width="97.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="375.8" y="414.0">__lll_lock_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (56 samples, 6.50%)</title><rect x="393.3" y="387.0" width="76.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="396.3" y="398.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.12%)</title><rect x="393.3" y="371.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="396.3" y="382.0"></text>
</g>
<g>
<title>do_syscall_64 (54 samples, 6.26%)</title><rect x="394.7" y="371.0" width="73.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="397.7" y="382.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_futex (29 samples, 3.36%)</title><rect x="407.0" y="355.0" width="39.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="410.0" y="366.0">__x..</text>
</g>
<g>
<title>do_futex (27 samples, 3.13%)</title><rect x="408.4" y="339.0" width="36.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="411.4" y="350.0">do_..</text>
</g>
<g>
<title>futex_wait (23 samples, 2.67%)</title><rect x="412.5" y="323.0" width="31.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="415.5" y="334.0">fu..</text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 0.70%)</title><rect x="419.3" y="307.0" width="8.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="422.3" y="318.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.12%)</title><rect x="420.7" y="291.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="423.7" y="302.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.23%)</title><rect x="422.0" y="291.0" width="2.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="425.0" y="302.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.23%)</title><rect x="424.8" y="291.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="427.8" y="302.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.12%)</title><rect x="426.1" y="275.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="429.1" y="286.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.12%)</title><rect x="426.1" y="259.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="429.1" y="270.0"></text>
</g>
<g>
<title>futex_wait_setup (12 samples, 1.39%)</title><rect x="427.5" y="307.0" width="16.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="430.5" y="318.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.23%)</title><rect x="431.6" y="291.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="434.6" y="302.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.12%)</title><rect x="434.4" y="291.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="437.4" y="302.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.12%)</title><rect x="434.4" y="275.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="437.4" y="286.0"></text>
</g>
<g>
<title>get_futex_value_locked (6 samples, 0.70%)</title><rect x="435.7" y="291.0" width="8.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="438.7" y="302.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.12%)</title><rect x="443.9" y="323.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="446.9" y="334.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.12%)</title><rect x="445.3" y="339.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="448.3" y="350.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (9 samples, 1.04%)</title><rect x="446.7" y="355.0" width="12.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="449.7" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_exit (7 samples, 0.81%)</title><rect x="446.7" y="339.0" width="9.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="449.7" y="350.0"></text>
</g>
<g>
<title>dput (1 samples, 0.12%)</title><rect x="449.4" y="323.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="452.4" y="334.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.12%)</title><rect x="450.8" y="323.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="453.8" y="334.0"></text>
</g>
<g>
<title>mntput (2 samples, 0.23%)</title><rect x="452.2" y="323.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="455.2" y="334.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.12%)</title><rect x="454.9" y="323.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="457.9" y="334.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.23%)</title><rect x="456.3" y="339.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="459.3" y="350.0"></text>
</g>
<g>
<title>syscall_trace_enter (7 samples, 0.81%)</title><rect x="459.0" y="355.0" width="9.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="462.0" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_entry (4 samples, 0.46%)</title><rect x="463.1" y="339.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="466.1" y="350.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (3 samples, 0.35%)</title><rect x="464.5" y="323.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="467.5" y="334.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.12%)</title><rect x="468.6" y="371.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="471.6" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (134 samples, 15.55%)</title><rect x="470.0" y="403.0" width="183.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="473.0" y="414.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (129 samples, 14.97%)</title><rect x="476.8" y="387.0" width="176.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="479.8" y="398.0">entry_SYSCALL_64_after_..</text>
</g>
<g>
<title>do_syscall_64 (129 samples, 14.97%)</title><rect x="476.8" y="371.0" width="176.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="479.8" y="382.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (120 samples, 13.92%)</title><rect x="483.6" y="355.0" width="164.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="486.6" y="366.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (119 samples, 13.81%)</title><rect x="483.6" y="339.0" width="162.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="486.6" y="350.0">do_futex</text>
</g>
<g>
<title>futex_wake (119 samples, 13.81%)</title><rect x="483.6" y="323.0" width="162.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="486.6" y="334.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.35%)</title><rect x="491.9" y="307.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="494.9" y="318.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.35%)</title><rect x="496.0" y="307.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="499.0" y="318.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (3 samples, 0.35%)</title><rect x="496.0" y="291.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="499.0" y="302.0"></text>
</g>
<g>
<title>mark_wake_futex (9 samples, 1.04%)</title><rect x="500.1" y="307.0" width="12.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="503.1" y="318.0"></text>
</g>
<g>
<title>__unqueue_futex (4 samples, 0.46%)</title><rect x="506.9" y="291.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="509.9" y="302.0"></text>
</g>
<g>
<title>wake_up_q (98 samples, 11.37%)</title><rect x="512.4" y="307.0" width="134.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="515.4" y="318.0">wake_up_q</text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.12%)</title><rect x="515.1" y="291.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="518.1" y="302.0"></text>
</g>
<g>
<title>try_to_wake_up (95 samples, 11.02%)</title><rect x="516.5" y="291.0" width="130.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="519.5" y="302.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (94 samples, 10.90%)</title><rect x="517.9" y="275.0" width="128.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="520.9" y="286.0">__lock_text_start</text>
</g>
<g>
<title>futex_wake (1 samples, 0.12%)</title><rect x="646.5" y="339.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="649.5" y="350.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.12%)</title><rect x="647.9" y="355.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="650.9" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.12%)</title><rect x="647.9" y="339.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="650.9" y="350.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.12%)</title><rect x="647.9" y="323.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="650.9" y="334.0"></text>
</g>
<g>
<title>syscall_trace_enter (3 samples, 0.35%)</title><rect x="649.3" y="355.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="652.3" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_entry (2 samples, 0.23%)</title><rect x="649.3" y="339.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="652.3" y="350.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.12%)</title><rect x="650.6" y="323.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="653.6" y="334.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.12%)</title><rect x="652.0" y="339.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="655.0" y="350.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.12%)</title><rect x="653.4" y="403.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="656.4" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.81%)</title><rect x="654.8" y="403.0" width="9.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="657.8" y="414.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.12%)</title><rect x="656.1" y="387.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="659.1" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.23%)</title><rect x="657.5" y="387.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.5" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.35%)</title><rect x="660.2" y="387.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.2" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.16%)</title><rect x="664.3" y="403.0" width="13.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="667.3" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.46%)</title><rect x="678.0" y="403.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="681.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (4 samples, 0.46%)</title><rect x="683.5" y="403.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="686.5" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.12%)</title><rect x="684.9" y="387.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="687.9" y="398.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.12%)</title><rect x="686.2" y="387.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="689.2" y="398.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.12%)</title><rect x="687.6" y="387.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="690.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.12%)</title><rect x="689.0" y="403.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (21 samples, 2.44%)</title><rect x="690.3" y="467.0" width="28.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.3" y="478.0">ro..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.12%)</title><rect x="690.3" y="451.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (20 samples, 2.32%)</title><rect x="691.7" y="451.0" width="27.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.7" y="462.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.23%)</title><rect x="691.7" y="435.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="694.7" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.23%)</title><rect x="691.7" y="419.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="694.7" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.23%)</title><rect x="691.7" y="403.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="694.7" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.46%)</title><rect x="694.5" y="435.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.5" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (4 samples, 0.46%)</title><rect x="694.5" y="419.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="697.5" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.46%)</title><rect x="694.5" y="403.0" width="5.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="697.5" y="414.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.12%)</title><rect x="694.5" y="387.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.5" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.23%)</title><rect x="695.8" y="387.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.8" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.23%)</title><rect x="695.8" y="371.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="698.8" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.12%)</title><rect x="697.2" y="355.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="700.2" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.12%)</title><rect x="698.6" y="387.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="701.6" y="398.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.23%)</title><rect x="699.9" y="435.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="702.9" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.23%)</title><rect x="699.9" y="419.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="702.9" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.23%)</title><rect x="699.9" y="403.0" width="2.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="702.9" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.23%)</title><rect x="699.9" y="387.0" width="2.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="702.9" y="398.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.23%)</title><rect x="699.9" y="371.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="702.9" y="382.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.12%)</title><rect x="701.3" y="355.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="704.3" y="366.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.12%)</title><rect x="701.3" y="339.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="704.3" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.93%)</title><rect x="702.7" y="435.0" width="10.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="705.7" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.81%)</title><rect x="704.0" y="419.0" width="9.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="707.0" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.81%)</title><rect x="704.0" y="403.0" width="9.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="707.0" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.81%)</title><rect x="704.0" y="387.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="707.0" y="398.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.81%)</title><rect x="704.0" y="371.0" width="9.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="707.0" y="382.0"></text>
</g>
<g>
<title>futex_wake (7 samples, 0.81%)</title><rect x="704.0" y="355.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="707.0" y="366.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 0.81%)</title><rect x="704.0" y="339.0" width="9.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="707.0" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (5 samples, 0.58%)</title><rect x="706.8" y="323.0" width="6.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="709.8" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.58%)</title><rect x="706.8" y="307.0" width="6.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="709.8" y="318.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.23%)</title><rect x="713.6" y="435.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="716.6" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.12%)</title><rect x="713.6" y="419.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="716.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="715.0" y="419.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.0" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.23%)</title><rect x="716.4" y="435.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="719.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.12%)</title><rect x="719.1" y="515.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="722.1" y="526.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.12%)</title><rect x="720.5" y="579.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="723.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const [clone .plt] (1 samples, 0.12%)</title><rect x="721.8" y="595.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="724.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (67 samples, 7.77%)</title><rect x="723.2" y="595.0" width="91.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="726.2" y="606.0">rocksdb::Wr..</text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.12%)</title><rect x="809.4" y="579.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="812.4" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.23%)</title><rect x="810.8" y="579.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="813.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="813.5" y="579.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="816.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (72 samples, 8.35%)</title><rect x="814.9" y="595.0" width="98.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.9" y="606.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (39 samples, 4.52%)</title><rect x="814.9" y="579.0" width="53.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.9" y="590.0">rocks..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.23%)</title><rect x="864.2" y="563.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="867.2" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.23%)</title><rect x="864.2" y="547.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="867.2" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.23%)</title><rect x="864.2" y="531.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="867.2" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.12%)</title><rect x="864.2" y="515.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="867.2" y="526.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.12%)</title><rect x="864.2" y="499.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="867.2" y="510.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.12%)</title><rect x="864.2" y="483.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="867.2" y="494.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.12%)</title><rect x="865.6" y="515.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="868.6" y="526.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.12%)</title><rect x="865.6" y="499.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="868.6" y="510.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.12%)</title><rect x="866.9" y="563.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="869.9" y="574.0"></text>
</g>
<g>
<title>sched_yield (33 samples, 3.83%)</title><rect x="868.3" y="579.0" width="45.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="871.3" y="590.0">sche..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (31 samples, 3.60%)</title><rect x="871.0" y="563.0" width="42.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="874.0" y="574.0">entr..</text>
</g>
<g>
<title>__x64_sys_sched_yield (2 samples, 0.23%)</title><rect x="871.0" y="547.0" width="2.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="874.0" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (29 samples, 3.36%)</title><rect x="873.8" y="547.0" width="39.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="876.8" y="558.0">do_..</text>
</g>
<g>
<title>__x64_sys_sched_yield (22 samples, 2.55%)</title><rect x="882.0" y="531.0" width="30.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="885.0" y="542.0">__..</text>
</g>
<g>
<title>do_sched_yield (22 samples, 2.55%)</title><rect x="882.0" y="515.0" width="30.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="885.0" y="526.0">do..</text>
</g>
<g>
<title>schedule (22 samples, 2.55%)</title><rect x="882.0" y="499.0" width="30.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="885.0" y="510.0">sc..</text>
</g>
<g>
<title>__sched_text_start (22 samples, 2.55%)</title><rect x="882.0" y="483.0" width="30.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="885.0" y="494.0">__..</text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.12%)</title><rect x="912.1" y="531.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="915.1" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.12%)</title><rect x="912.1" y="515.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="915.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.12%)</title><rect x="913.5" y="595.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.12%)</title><rect x="914.8" y="595.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="917.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.12%)</title><rect x="916.2" y="595.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.23%)</title><rect x="917.6" y="595.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.6" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.12%)</title><rect x="919.0" y="579.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="922.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.12%)</title><rect x="920.3" y="595.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.12%)</title><rect x="920.3" y="579.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.12%)</title><rect x="921.7" y="595.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.7" y="606.0"></text>
</g>
<g>
<title>std::condition_variable::notify_one() (1 samples, 0.12%)</title><rect x="921.7" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.7" y="590.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.12%)</title><rect x="923.1" y="595.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="926.1" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.12%)</title><rect x="923.1" y="579.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="926.1" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.12%)</title><rect x="923.1" y="563.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="926.1" y="574.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.12%)</title><rect x="923.1" y="547.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="926.1" y="558.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.12%)</title><rect x="923.1" y="531.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="926.1" y="542.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.12%)</title><rect x="923.1" y="515.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="926.1" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.12%)</title><rect x="923.1" y="499.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="926.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.12%)</title><rect x="924.4" y="611.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.12%)</title><rect x="925.8" y="611.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="928.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.12%)</title><rect x="927.2" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.2" y="622.0"></text>
</g>
<g>
<title>std::condition_variable::~condition_variable() (1 samples, 0.12%)</title><rect x="928.5" y="611.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.5" y="622.0"></text>
</g>
<g>
<title>std::condition_variable::~condition_variable() [clone .plt] (1 samples, 0.12%)</title><rect x="929.9" y="611.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.12%)</title><rect x="931.3" y="627.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.12%)</title><rect x="932.6" y="627.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.35%)</title><rect x="934.0" y="627.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="937.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.12%)</title><rect x="934.0" y="611.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (1 samples, 0.12%)</title><rect x="935.4" y="611.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.4" y="622.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.12%)</title><rect x="936.8" y="611.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.12%)</title><rect x="938.1" y="627.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.1" y="638.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.12%)</title><rect x="939.5" y="627.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.12%)</title><rect x="940.9" y="643.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.12%)</title><rect x="942.2" y="675.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 4.64%)</title><rect x="943.6" y="707.0" width="54.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="946.6" y="718.0">[unkn..</text>
</g>
<g>
<title>__GI_write (20 samples, 2.32%)</title><rect x="943.6" y="691.0" width="27.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="946.6" y="702.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 2.20%)</title><rect x="945.0" y="675.0" width="26.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="948.0" y="686.0">e..</text>
</g>
<g>
<title>do_syscall_64 (19 samples, 2.20%)</title><rect x="945.0" y="659.0" width="26.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="948.0" y="670.0">d..</text>
</g>
<g>
<title>__x64_sys_write (17 samples, 1.97%)</title><rect x="947.7" y="643.0" width="23.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="950.7" y="654.0">_..</text>
</g>
<g>
<title>ksys_write (17 samples, 1.97%)</title><rect x="947.7" y="627.0" width="23.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="950.7" y="638.0">k..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.12%)</title><rect x="947.7" y="611.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="950.7" y="622.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.12%)</title><rect x="947.7" y="595.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="950.7" y="606.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.12%)</title><rect x="947.7" y="579.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="950.7" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.12%)</title><rect x="949.1" y="611.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="952.1" y="622.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.12%)</title><rect x="950.4" y="611.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="953.4" y="622.0"></text>
</g>
<g>
<title>vfs_write (14 samples, 1.62%)</title><rect x="951.8" y="611.0" width="19.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="954.8" y="622.0"></text>
</g>
<g>
<title>__vfs_write (13 samples, 1.51%)</title><rect x="951.8" y="595.0" width="17.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="954.8" y="606.0"></text>
</g>
<g>
<title>new_sync_write (13 samples, 1.51%)</title><rect x="951.8" y="579.0" width="17.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="954.8" y="590.0"></text>
</g>
<g>
<title>ext4_file_write_iter (13 samples, 1.51%)</title><rect x="951.8" y="563.0" width="17.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="954.8" y="574.0"></text>
</g>
<g>
<title>__generic_file_write_iter (12 samples, 1.39%)</title><rect x="951.8" y="547.0" width="16.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="954.8" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.12%)</title><rect x="951.8" y="531.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="954.8" y="542.0"></text>
</g>
<g>
<title>file_update_time (2 samples, 0.23%)</title><rect x="953.2" y="531.0" width="2.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="956.2" y="542.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.12%)</title><rect x="954.5" y="515.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="957.5" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.12%)</title><rect x="954.5" y="499.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="957.5" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.12%)</title><rect x="954.5" y="483.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="957.5" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.12%)</title><rect x="954.5" y="467.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="957.5" y="478.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.12%)</title><rect x="954.5" y="451.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="957.5" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.12%)</title><rect x="954.5" y="435.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="957.5" y="446.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.12%)</title><rect x="954.5" y="419.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="957.5" y="430.0"></text>
</g>
<g>
<title>generic_perform_write (9 samples, 1.04%)</title><rect x="955.9" y="531.0" width="12.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="958.9" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (4 samples, 0.46%)</title><rect x="955.9" y="515.0" width="5.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="958.9" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.23%)</title><rect x="955.9" y="499.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="958.9" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.23%)</title><rect x="955.9" y="483.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="958.9" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.12%)</title><rect x="957.3" y="467.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="960.3" y="478.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 0.23%)</title><rect x="958.7" y="499.0" width="2.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="961.7" y="510.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.12%)</title><rect x="958.7" y="483.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="961.7" y="494.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.12%)</title><rect x="958.7" y="467.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="961.7" y="478.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.12%)</title><rect x="960.0" y="483.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="963.0" y="494.0"></text>
</g>
<g>
<title>ext4_da_write_end (5 samples, 0.58%)</title><rect x="961.4" y="515.0" width="6.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="964.4" y="526.0"></text>
</g>
<g>
<title>generic_write_end (5 samples, 0.58%)</title><rect x="961.4" y="499.0" width="6.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.4" y="510.0"></text>
</g>
<g>
<title>__mark_inode_dirty (5 samples, 0.58%)</title><rect x="961.4" y="483.0" width="6.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="964.4" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (5 samples, 0.58%)</title><rect x="961.4" y="467.0" width="6.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.4" y="478.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.12%)</title><rect x="961.4" y="451.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="964.4" y="462.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.12%)</title><rect x="961.4" y="435.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="964.4" y="446.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (4 samples, 0.46%)</title><rect x="962.8" y="451.0" width="5.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="965.8" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.12%)</title><rect x="962.8" y="435.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="965.8" y="446.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.12%)</title><rect x="962.8" y="419.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="965.8" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.12%)</title><rect x="962.8" y="403.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="965.8" y="414.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.12%)</title><rect x="962.8" y="387.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="965.8" y="398.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.12%)</title><rect x="962.8" y="371.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="965.8" y="382.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.12%)</title><rect x="962.8" y="355.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="965.8" y="366.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (3 samples, 0.35%)</title><rect x="964.1" y="435.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="967.1" y="446.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (3 samples, 0.35%)</title><rect x="964.1" y="419.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="967.1" y="430.0"></text>
</g>
<g>
<title>__getblk_gfp (3 samples, 0.35%)</title><rect x="964.1" y="403.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="967.1" y="414.0"></text>
</g>
<g>
<title>__find_get_block (3 samples, 0.35%)</title><rect x="964.1" y="387.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="967.1" y="398.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.12%)</title><rect x="966.9" y="371.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="969.9" y="382.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.12%)</title><rect x="968.2" y="547.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="971.2" y="558.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.12%)</title><rect x="969.6" y="595.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="972.6" y="606.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.12%)</title><rect x="971.0" y="691.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="974.0" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="972.3" y="691.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="975.3" y="702.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.35%)</title><rect x="973.7" y="691.0" width="4.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="976.7" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="975.1" y="675.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="978.1" y="686.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.12%)</title><rect x="976.5" y="675.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="979.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="976.5" y="659.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="979.5" y="670.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (15 samples, 1.74%)</title><rect x="977.8" y="691.0" width="20.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="980.8" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.28%)</title><rect x="983.3" y="675.0" width="15.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="986.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.28%)</title><rect x="983.3" y="659.0" width="15.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="986.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 0.93%)</title><rect x="984.7" y="643.0" width="10.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="987.7" y="654.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.70%)</title><rect x="986.0" y="627.0" width="8.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="989.0" y="638.0"></text>
</g>
<g>
<title>futex_wait (6 samples, 0.70%)</title><rect x="986.0" y="611.0" width="8.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="989.0" y="622.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.46%)</title><rect x="987.4" y="595.0" width="5.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="990.4" y="606.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.23%)</title><rect x="990.1" y="579.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="993.1" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.23%)</title><rect x="990.1" y="563.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="993.1" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.23%)</title><rect x="990.1" y="547.0" width="2.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="993.1" y="558.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.12%)</title><rect x="992.9" y="595.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="995.9" y="606.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.12%)</title><rect x="994.2" y="627.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="997.2" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.12%)</title><rect x="995.6" y="643.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="998.6" y="654.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.12%)</title><rect x="997.0" y="643.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1000.0" y="654.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.23%)</title><rect x="998.4" y="707.0" width="2.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1001.4" y="718.0"></text>
</g>
<g>
<title>__malloc (3 samples, 0.35%)</title><rect x="1001.1" y="707.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1004.1" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 1.62%)</title><rect x="1005.2" y="707.0" width="19.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1008.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 1.62%)</title><rect x="1005.2" y="691.0" width="19.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1008.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 1.62%)</title><rect x="1005.2" y="675.0" width="19.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1008.2" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 1.51%)</title><rect x="1005.2" y="659.0" width="17.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1008.2" y="670.0"></text>
</g>
<g>
<title>do_futex (13 samples, 1.51%)</title><rect x="1005.2" y="643.0" width="17.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1008.2" y="654.0"></text>
</g>
<g>
<title>futex_wake (13 samples, 1.51%)</title><rect x="1005.2" y="627.0" width="17.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1008.2" y="638.0"></text>
</g>
<g>
<title>wake_up_q (13 samples, 1.51%)</title><rect x="1005.2" y="611.0" width="17.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1008.2" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (13 samples, 1.51%)</title><rect x="1005.2" y="595.0" width="17.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1008.2" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 1.51%)</title><rect x="1005.2" y="579.0" width="17.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1008.2" y="590.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.12%)</title><rect x="1023.0" y="659.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1026.0" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.12%)</title><rect x="1023.0" y="643.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1026.0" y="654.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.12%)</title><rect x="1024.4" y="707.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1027.4" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (19 samples, 2.20%)</title><rect x="1025.7" y="707.0" width="26.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1028.7" y="718.0">o..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (74 samples, 8.58%)</title><rect x="1051.7" y="707.0" width="101.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.7" y="718.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (74 samples, 8.58%)</title><rect x="1051.7" y="691.0" width="101.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.7" y="702.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.35%)</title><rect x="1053.1" y="675.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.35%)</title><rect x="1053.1" y="659.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.1" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (70 samples, 8.12%)</title><rect x="1057.2" y="675.0" width="95.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1060.2" y="686.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.35%)</title><rect x="1057.2" y="659.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1060.2" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (67 samples, 7.77%)</title><rect x="1061.3" y="659.0" width="91.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1064.3" y="670.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (63 samples, 7.31%)</title><rect x="1066.8" y="643.0" width="86.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1069.8" y="654.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (57 samples, 6.61%)</title><rect x="1073.6" y="627.0" width="78.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1076.6" y="638.0">Java_org_..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.12%)</title><rect x="1075.0" y="611.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.0" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.12%)</title><rect x="1076.4" y="611.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.23%)</title><rect x="1077.7" y="611.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.7" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1080.5" y="611.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.5" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.35%)</title><rect x="1081.9" y="611.0" width="4.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1084.9" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="1086.0" y="611.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1089.0" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.93%)</title><rect x="1087.3" y="611.0" width="11.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1090.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.12%)</title><rect x="1091.4" y="595.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.4" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.23%)</title><rect x="1092.8" y="595.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.8" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.23%)</title><rect x="1095.5" y="595.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.5" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (23 samples, 2.67%)</title><rect x="1098.3" y="611.0" width="31.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1101.3" y="622.0">jn..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1101.0" y="595.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.0" y="606.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.12%)</title><rect x="1102.4" y="595.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.4" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.35%)</title><rect x="1103.8" y="595.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.8" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.35%)</title><rect x="1107.9" y="595.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.9" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 1.51%)</title><rect x="1112.0" y="595.0" width="17.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 1.28%)</title><rect x="1113.3" y="579.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 1.16%)</title><rect x="1113.3" y="563.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.3" y="574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.46%)</title><rect x="1120.2" y="547.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.2" y="558.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="1125.7" y="547.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.7" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1127.0" y="563.0" width="1.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1130.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="1128.4" y="579.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 1.86%)</title><rect x="1129.8" y="611.0" width="21.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1132.8" y="622.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.12%)</title><rect x="1133.9" y="595.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.9" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.46%)</title><rect x="1135.2" y="595.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.35%)</title><rect x="1140.7" y="595.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.7" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.58%)</title><rect x="1144.8" y="595.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1147.8" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.12%)</title><rect x="1150.3" y="579.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.12%)</title><rect x="1151.7" y="627.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1154.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.35%)</title><rect x="1153.0" y="819.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1153.0" y="803.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1156.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="1153.0" y="787.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1156.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="1153.0" y="771.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.12%)</title><rect x="1153.0" y="755.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1156.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="1153.0" y="739.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1156.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.23%)</title><rect x="1154.4" y="803.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1157.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.23%)</title><rect x="1154.4" y="787.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.35%)</title><rect x="1157.1" y="819.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.35%)</title><rect x="1157.1" y="803.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.12%)</title><rect x="1158.5" y="787.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1161.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.12%)</title><rect x="1158.5" y="771.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1161.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.12%)</title><rect x="1158.5" y="755.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1161.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.12%)</title><rect x="1158.5" y="739.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1161.5" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="1159.9" y="787.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1162.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.23%)</title><rect x="1161.3" y="819.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="1162.6" y="803.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1165.6" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (14 samples, 1.62%)</title><rect x="1164.0" y="835.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (14 samples, 1.62%)</title><rect x="1164.0" y="819.0" width="19.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.23%)</title><rect x="1164.0" y="803.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="1164.0" y="787.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.12%)</title><rect x="1165.4" y="787.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="1165.4" y="771.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>__GI___recv (12 samples, 1.39%)</title><rect x="1166.7" y="803.0" width="16.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1169.7" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.28%)</title><rect x="1168.1" y="787.0" width="15.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1171.1" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.28%)</title><rect x="1168.1" y="771.0" width="15.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1171.1" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 1.04%)</title><rect x="1168.1" y="755.0" width="12.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1171.1" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (9 samples, 1.04%)</title><rect x="1168.1" y="739.0" width="12.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1171.1" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (9 samples, 1.04%)</title><rect x="1168.1" y="723.0" width="12.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1171.1" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (7 samples, 0.81%)</title><rect x="1168.1" y="707.0" width="9.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.1" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.12%)</title><rect x="1169.5" y="691.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (5 samples, 0.58%)</title><rect x="1170.8" y="691.0" width="6.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1173.8" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.12%)</title><rect x="1172.2" y="675.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.12%)</title><rect x="1172.2" y="659.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.12%)</title><rect x="1172.2" y="643.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.12%)</title><rect x="1172.2" y="627.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1175.2" y="638.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.35%)</title><rect x="1173.6" y="675.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1176.6" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (3 samples, 0.35%)</title><rect x="1173.6" y="659.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1176.6" y="670.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.12%)</title><rect x="1174.9" y="643.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.12%)</title><rect x="1176.3" y="643.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.12%)</title><rect x="1176.3" y="627.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.12%)</title><rect x="1176.3" y="611.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.23%)</title><rect x="1177.7" y="707.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.12%)</title><rect x="1179.0" y="691.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.12%)</title><rect x="1179.0" y="675.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.12%)</title><rect x="1179.0" y="659.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1182.0" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.12%)</title><rect x="1179.0" y="643.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1182.0" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.12%)</title><rect x="1179.0" y="627.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1182.0" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.12%)</title><rect x="1180.4" y="755.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.12%)</title><rect x="1180.4" y="739.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.12%)</title><rect x="1180.4" y="723.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.12%)</title><rect x="1181.8" y="755.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.12%)</title><rect x="1181.8" y="739.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.58%)</title><rect x="1183.2" y="883.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.58%)</title><rect x="1183.2" y="867.0" width="6.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.58%)</title><rect x="1183.2" y="851.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 0.58%)</title><rect x="1183.2" y="835.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.58%)</title><rect x="1183.2" y="819.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.58%)</title><rect x="1183.2" y="803.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="814.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.58%)</title><rect x="1183.2" y="787.0" width="6.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
</g>
</svg>
