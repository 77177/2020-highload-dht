<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (575 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2 samples, 0.35%)</title><rect x="10.0" y="883.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.35%)</title><rect x="10.0" y="867.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.35%)</title><rect x="10.0" y="851.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.35%)</title><rect x="10.0" y="835.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.35%)</title><rect x="10.0" y="819.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.35%)</title><rect x="10.0" y="803.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.35%)</title><rect x="10.0" y="787.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.35%)</title><rect x="10.0" y="771.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.35%)</title><rect x="10.0" y="755.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.35%)</title><rect x="10.0" y="739.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.35%)</title><rect x="10.0" y="723.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.35%)</title><rect x="10.0" y="707.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.35%)</title><rect x="10.0" y="691.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (2 samples, 0.35%)</title><rect x="10.0" y="675.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.35%)</title><rect x="10.0" y="659.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (2 samples, 0.35%)</title><rect x="10.0" y="643.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (2 samples, 0.35%)</title><rect x="10.0" y="627.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.35%)</title><rect x="10.0" y="611.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.35%)</title><rect x="10.0" y="595.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="10.0" y="579.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.17%)</title><rect x="10.0" y="563.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="10.0" y="547.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.17%)</title><rect x="10.0" y="531.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="12.1" y="579.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.1" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.17%)</title><rect x="12.1" y="563.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="15.1" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="12.1" y="547.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="15.1" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.17%)</title><rect x="12.1" y="531.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.1" y="542.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.52%)</title><rect x="14.1" y="883.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="17.1" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3 samples, 0.52%)</title><rect x="14.1" y="867.0" width="6.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="17.1" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3 samples, 0.52%)</title><rect x="14.1" y="851.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.52%)</title><rect x="14.1" y="835.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.52%)</title><rect x="14.1" y="819.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.52%)</title><rect x="14.1" y="803.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (3 samples, 0.52%)</title><rect x="14.1" y="787.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (3 samples, 0.52%)</title><rect x="14.1" y="771.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (3 samples, 0.52%)</title><rect x="14.1" y="755.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.1" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.52%)</title><rect x="14.1" y="739.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.52%)</title><rect x="14.1" y="723.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.52%)</title><rect x="14.1" y="707.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.52%)</title><rect x="14.1" y="691.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.52%)</title><rect x="14.1" y="675.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (3 samples, 0.52%)</title><rect x="14.1" y="659.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.1" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.52%)</title><rect x="14.1" y="643.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (3 samples, 0.52%)</title><rect x="14.1" y="627.0" width="6.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (3 samples, 0.52%)</title><rect x="14.1" y="611.0" width="6.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="14.1" y="595.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="14.1" y="579.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.1" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="14.1" y="563.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.17%)</title><rect x="14.1" y="547.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="17.1" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="14.1" y="531.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="17.1" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.17%)</title><rect x="14.1" y="515.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.17%)</title><rect x="14.1" y="499.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.1" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.35%)</title><rect x="16.2" y="563.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.2" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.35%)</title><rect x="16.2" y="547.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.2" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.35%)</title><rect x="16.2" y="531.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.2" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.35%)</title><rect x="16.2" y="515.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.2" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.17%)</title><rect x="16.2" y="499.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.2" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.17%)</title><rect x="16.2" y="483.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.17%)</title><rect x="18.2" y="499.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.2" y="510.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 1.74%)</title><rect x="20.3" y="883.0" width="20.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="23.3" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (10 samples, 1.74%)</title><rect x="20.3" y="867.0" width="20.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="23.3" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (10 samples, 1.74%)</title><rect x="20.3" y="851.0" width="20.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.74%)</title><rect x="20.3" y="835.0" width="20.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="23.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.74%)</title><rect x="20.3" y="819.0" width="20.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 1.74%)</title><rect x="20.3" y="803.0" width="20.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (10 samples, 1.74%)</title><rect x="20.3" y="787.0" width="20.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (10 samples, 1.74%)</title><rect x="20.3" y="771.0" width="20.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.52%)</title><rect x="20.3" y="755.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.52%)</title><rect x="20.3" y="739.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.52%)</title><rect x="20.3" y="723.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.52%)</title><rect x="20.3" y="707.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.52%)</title><rect x="20.3" y="691.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.52%)</title><rect x="20.3" y="675.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.3" y="686.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.52%)</title><rect x="20.3" y="659.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.3" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (3 samples, 0.52%)</title><rect x="20.3" y="643.0" width="6.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="23.3" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (3 samples, 0.52%)</title><rect x="20.3" y="627.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="20.3" y="611.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="20.3" y="595.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.3" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.52%)</title><rect x="20.3" y="579.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.3" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.52%)</title><rect x="20.3" y="563.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="23.3" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.52%)</title><rect x="20.3" y="547.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="23.3" y="558.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.17%)</title><rect x="20.3" y="531.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.3" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.35%)</title><rect x="22.3" y="531.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.3" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.17%)</title><rect x="24.4" y="515.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.4" y="526.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.17%)</title><rect x="24.4" y="499.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (7 samples, 1.22%)</title><rect x="26.4" y="755.0" width="14.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="29.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 1.22%)</title><rect x="26.4" y="739.0" width="14.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 1.22%)</title><rect x="26.4" y="723.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.22%)</title><rect x="26.4" y="707.0" width="14.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 1.22%)</title><rect x="26.4" y="691.0" width="14.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 1.22%)</title><rect x="26.4" y="675.0" width="14.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="29.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (7 samples, 1.22%)</title><rect x="26.4" y="659.0" width="14.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.4" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (7 samples, 1.22%)</title><rect x="26.4" y="643.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.4" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (7 samples, 1.22%)</title><rect x="26.4" y="627.0" width="14.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="29.4" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (7 samples, 1.22%)</title><rect x="26.4" y="611.0" width="14.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 1.22%)</title><rect x="26.4" y="595.0" width="14.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="29.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 1.22%)</title><rect x="26.4" y="579.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="29.4" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.52%)</title><rect x="26.4" y="563.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.4" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.52%)</title><rect x="26.4" y="547.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.4" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.52%)</title><rect x="26.4" y="531.0" width="6.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="29.4" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.52%)</title><rect x="26.4" y="515.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="29.4" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.17%)</title><rect x="28.5" y="499.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.5" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.17%)</title><rect x="30.5" y="499.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="33.5" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.70%)</title><rect x="32.6" y="563.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="35.6" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (4 samples, 0.70%)</title><rect x="32.6" y="547.0" width="8.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="35.6" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.70%)</title><rect x="32.6" y="531.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="35.6" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.70%)</title><rect x="32.6" y="515.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="35.6" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.17%)</title><rect x="38.7" y="499.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.7" y="510.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (557 samples, 96.87%)</title><rect x="40.8" y="883.0" width="1143.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.8" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.52%)</title><rect x="55.1" y="867.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.17%)</title><rect x="61.3" y="867.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.17%)</title><rect x="63.4" y="867.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (10 samples, 1.74%)</title><rect x="65.4" y="867.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (8 samples, 1.39%)</title><rect x="69.5" y="851.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.5" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.17%)</title><rect x="69.5" y="835.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="72.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 1.22%)</title><rect x="71.6" y="835.0" width="14.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="74.6" y="846.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 1.22%)</title><rect x="71.6" y="819.0" width="14.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="74.6" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.22%)</title><rect x="71.6" y="803.0" width="14.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="74.6" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.22%)</title><rect x="71.6" y="787.0" width="14.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="74.6" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.87%)</title><rect x="73.6" y="771.0" width="10.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="76.6" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (5 samples, 0.87%)</title><rect x="73.6" y="755.0" width="10.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="76.6" y="766.0"></text>
</g>
<g>
<title>ep_poll (4 samples, 0.70%)</title><rect x="73.6" y="739.0" width="8.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="76.6" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.35%)</title><rect x="73.6" y="723.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.6" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.17%)</title><rect x="73.6" y="707.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="76.6" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.17%)</title><rect x="73.6" y="691.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="76.6" y="702.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.17%)</title><rect x="75.7" y="707.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="78.7" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.35%)</title><rect x="77.7" y="723.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="80.7" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.35%)</title><rect x="77.7" y="707.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="80.7" y="718.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.35%)</title><rect x="77.7" y="691.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="80.7" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.17%)</title><rect x="79.8" y="675.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="82.8" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.17%)</title><rect x="79.8" y="659.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="82.8" y="670.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.17%)</title><rect x="81.8" y="739.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="84.8" y="750.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="83.9" y="771.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="86.9" y="782.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.17%)</title><rect x="83.9" y="755.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="86.9" y="766.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.17%)</title><rect x="83.9" y="739.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="86.9" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (535 samples, 93.04%)</title><rect x="85.9" y="867.0" width="1097.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (534 samples, 92.87%)</title><rect x="85.9" y="851.0" width="1095.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (521 samples, 90.61%)</title><rect x="85.9" y="835.0" width="1069.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.9" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (509 samples, 88.52%)</title><rect x="88.0" y="819.0" width="1044.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.0" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (508 samples, 88.35%)</title><rect x="90.0" y="803.0" width="1042.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.0" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (506 samples, 88.00%)</title><rect x="90.0" y="787.0" width="1038.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.0" y="798.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (70 samples, 12.17%)</title><rect x="90.0" y="771.0" width="143.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.0" y="782.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.17%)</title><rect x="90.0" y="755.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.17%)</title><rect x="90.0" y="739.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.17%)</title><rect x="90.0" y="723.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (69 samples, 12.00%)</title><rect x="92.1" y="755.0" width="141.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.1" y="766.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.17%)</title><rect x="92.1" y="739.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.35%)</title><rect x="94.1" y="739.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.35%)</title><rect x="94.1" y="723.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.35%)</title><rect x="94.1" y="707.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.35%)</title><rect x="94.1" y="691.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (2 samples, 0.35%)</title><rect x="94.1" y="675.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (2 samples, 0.35%)</title><rect x="94.1" y="659.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.1" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="96.2" y="643.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.2" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 11.48%)</title><rect x="98.2" y="739.0" width="135.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.2" y="750.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 11.48%)</title><rect x="98.2" y="723.0" width="135.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.2" y="734.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.17%)</title><rect x="100.3" y="707.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (64 samples, 11.13%)</title><rect x="102.3" y="707.0" width="131.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.3" y="718.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (64 samples, 11.13%)</title><rect x="102.3" y="691.0" width="131.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.3" y="702.0">one/nio/net/Nati..</text>
</g>
<g>
<title>__libc_send (62 samples, 10.78%)</title><rect x="106.5" y="675.0" width="127.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="109.5" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (62 samples, 10.78%)</title><rect x="106.5" y="659.0" width="127.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="109.5" y="670.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>do_syscall_64 (62 samples, 10.78%)</title><rect x="106.5" y="643.0" width="127.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="109.5" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (62 samples, 10.78%)</title><rect x="106.5" y="627.0" width="127.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="109.5" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (62 samples, 10.78%)</title><rect x="106.5" y="611.0" width="127.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="109.5" y="622.0">__sys_sendto</text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.17%)</title><rect x="106.5" y="595.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="109.5" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (60 samples, 10.43%)</title><rect x="108.5" y="595.0" width="123.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="111.5" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (59 samples, 10.26%)</title><rect x="108.5" y="579.0" width="121.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.5" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (59 samples, 10.26%)</title><rect x="108.5" y="563.0" width="121.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="111.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (59 samples, 10.26%)</title><rect x="108.5" y="547.0" width="121.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="111.5" y="558.0">tcp_sendmsg_loc..</text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.17%)</title><rect x="110.6" y="531.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="113.6" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.17%)</title><rect x="112.6" y="531.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="115.6" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (5 samples, 0.87%)</title><rect x="114.7" y="531.0" width="10.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="117.7" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.70%)</title><rect x="116.7" y="515.0" width="8.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="119.7" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.17%)</title><rect x="116.7" y="499.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="119.7" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.17%)</title><rect x="116.7" y="483.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="119.7" y="494.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.17%)</title><rect x="118.8" y="499.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="121.8" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.35%)</title><rect x="120.8" y="499.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="123.8" y="510.0"></text>
</g>
<g>
<title>tcp_push (49 samples, 8.52%)</title><rect x="124.9" y="531.0" width="100.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="127.9" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (49 samples, 8.52%)</title><rect x="124.9" y="515.0" width="100.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="127.9" y="526.0">__tcp_push_p..</text>
</g>
<g>
<title>tcp_write_xmit (49 samples, 8.52%)</title><rect x="124.9" y="499.0" width="100.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="127.9" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.17%)</title><rect x="124.9" y="483.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="127.9" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (44 samples, 7.65%)</title><rect x="127.0" y="483.0" width="90.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="130.0" y="494.0">__tcp_tran..</text>
</g>
<g>
<title>ip_queue_xmit (42 samples, 7.30%)</title><rect x="127.0" y="467.0" width="86.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="130.0" y="478.0">ip_queue_x..</text>
</g>
<g>
<title>__ip_queue_xmit (41 samples, 7.13%)</title><rect x="127.0" y="451.0" width="84.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="130.0" y="462.0">__ip_queue..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.17%)</title><rect x="127.0" y="435.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="130.0" y="446.0"></text>
</g>
<g>
<title>ip_local_out (38 samples, 6.61%)</title><rect x="129.0" y="435.0" width="78.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="132.0" y="446.0">ip_local_..</text>
</g>
<g>
<title>__ip_local_out (6 samples, 1.04%)</title><rect x="129.0" y="419.0" width="12.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="132.0" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 1.04%)</title><rect x="129.0" y="403.0" width="12.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="132.0" y="414.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (2 samples, 0.35%)</title><rect x="129.0" y="387.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="132.0" y="398.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.35%)</title><rect x="129.0" y="371.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="132.0" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (4 samples, 0.70%)</title><rect x="133.1" y="387.0" width="8.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="136.1" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (4 samples, 0.70%)</title><rect x="133.1" y="371.0" width="8.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="136.1" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.17%)</title><rect x="133.1" y="355.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="136.1" y="366.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.17%)</title><rect x="135.2" y="355.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="138.2" y="366.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.35%)</title><rect x="137.2" y="355.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="140.2" y="366.0"></text>
</g>
<g>
<title>ip_output (32 samples, 5.57%)</title><rect x="141.3" y="419.0" width="65.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="144.3" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (30 samples, 5.22%)</title><rect x="145.4" y="403.0" width="61.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="148.4" y="414.0">ip_fin..</text>
</g>
<g>
<title>__ip_finish_output (30 samples, 5.22%)</title><rect x="145.4" y="387.0" width="61.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="148.4" y="398.0">__ip_f..</text>
</g>
<g>
<title>ip_finish_output2 (30 samples, 5.22%)</title><rect x="145.4" y="371.0" width="61.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="148.4" y="382.0">ip_fin..</text>
</g>
<g>
<title>__local_bh_enable_ip (25 samples, 4.35%)</title><rect x="145.4" y="355.0" width="51.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="148.4" y="366.0">__loc..</text>
</g>
<g>
<title>do_softirq.part.20 (25 samples, 4.35%)</title><rect x="145.4" y="339.0" width="51.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.4" y="350.0">do_so..</text>
</g>
<g>
<title>do_softirq_own_stack (25 samples, 4.35%)</title><rect x="145.4" y="323.0" width="51.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="148.4" y="334.0">do_so..</text>
</g>
<g>
<title>__softirqentry_text_start (25 samples, 4.35%)</title><rect x="145.4" y="307.0" width="51.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="148.4" y="318.0">__sof..</text>
</g>
<g>
<title>net_rx_action (25 samples, 4.35%)</title><rect x="145.4" y="291.0" width="51.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="148.4" y="302.0">net_r..</text>
</g>
<g>
<title>process_backlog (25 samples, 4.35%)</title><rect x="145.4" y="275.0" width="51.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="148.4" y="286.0">proce..</text>
</g>
<g>
<title>__netif_receive_skb (24 samples, 4.17%)</title><rect x="145.4" y="259.0" width="49.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="148.4" y="270.0">__net..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (24 samples, 4.17%)</title><rect x="145.4" y="243.0" width="49.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="148.4" y="254.0">__net..</text>
</g>
<g>
<title>ip_rcv (24 samples, 4.17%)</title><rect x="145.4" y="227.0" width="49.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="148.4" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (22 samples, 3.83%)</title><rect x="147.5" y="211.0" width="45.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="150.5" y="222.0">ip_r..</text>
</g>
<g>
<title>ip_local_deliver (20 samples, 3.48%)</title><rect x="149.5" y="195.0" width="41.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="152.5" y="206.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (19 samples, 3.30%)</title><rect x="149.5" y="179.0" width="39.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="152.5" y="190.0">ip_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (19 samples, 3.30%)</title><rect x="149.5" y="163.0" width="39.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="152.5" y="174.0">ip_..</text>
</g>
<g>
<title>tcp_v4_rcv (19 samples, 3.30%)</title><rect x="149.5" y="147.0" width="39.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="152.5" y="158.0">tcp..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.35%)</title><rect x="149.5" y="131.0" width="4.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="152.5" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.35%)</title><rect x="153.7" y="131.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="156.7" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.35%)</title><rect x="153.7" y="115.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="156.7" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (15 samples, 2.61%)</title><rect x="157.8" y="131.0" width="30.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="160.8" y="142.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (14 samples, 2.43%)</title><rect x="159.8" y="115.0" width="28.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="162.8" y="126.0">tc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.17%)</title><rect x="161.9" y="99.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="164.9" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.17%)</title><rect x="161.9" y="83.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="164.9" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.17%)</title><rect x="161.9" y="67.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="164.9" y="78.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.17%)</title><rect x="161.9" y="51.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="164.9" y="62.0"></text>
</g>
<g>
<title>tcp_ack (4 samples, 0.70%)</title><rect x="163.9" y="99.0" width="8.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="166.9" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.52%)</title><rect x="166.0" y="83.0" width="6.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="169.0" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.52%)</title><rect x="166.0" y="67.0" width="6.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="169.0" y="78.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.35%)</title><rect x="166.0" y="51.0" width="4.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="169.0" y="62.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.35%)</title><rect x="166.0" y="35.0" width="4.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.0" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.17%)</title><rect x="170.1" y="51.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="173.1" y="62.0"></text>
</g>
<g>
<title>tcp_data_ready (8 samples, 1.39%)</title><rect x="172.1" y="99.0" width="16.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="175.1" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (8 samples, 1.39%)</title><rect x="172.1" y="83.0" width="16.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="175.1" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (8 samples, 1.39%)</title><rect x="172.1" y="67.0" width="16.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="175.1" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 1.22%)</title><rect x="174.2" y="51.0" width="14.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="177.2" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 1.22%)</title><rect x="174.2" y="35.0" width="14.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="177.2" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.17%)</title><rect x="188.5" y="179.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="191.5" y="190.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.17%)</title><rect x="188.5" y="163.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="191.5" y="174.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.17%)</title><rect x="188.5" y="147.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="191.5" y="158.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.17%)</title><rect x="190.6" y="195.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="193.6" y="206.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.17%)</title><rect x="192.6" y="211.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="195.6" y="222.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.17%)</title><rect x="194.7" y="259.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="197.7" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (5 samples, 0.87%)</title><rect x="196.7" y="355.0" width="10.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="199.7" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.70%)</title><rect x="196.7" y="339.0" width="8.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="199.7" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.52%)</title><rect x="198.8" y="323.0" width="6.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="201.8" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.52%)</title><rect x="198.8" y="307.0" width="6.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="201.8" y="318.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.17%)</title><rect x="198.8" y="291.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="201.8" y="302.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.35%)</title><rect x="200.9" y="291.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="203.9" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.35%)</title><rect x="200.9" y="275.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="203.9" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.35%)</title><rect x="200.9" y="259.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="203.9" y="270.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.17%)</title><rect x="205.0" y="339.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="208.0" y="350.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.17%)</title><rect x="207.0" y="435.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="210.0" y="446.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.17%)</title><rect x="209.1" y="435.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="212.1" y="446.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.17%)</title><rect x="211.1" y="451.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="214.1" y="462.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.35%)</title><rect x="213.2" y="467.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="216.2" y="478.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.35%)</title><rect x="213.2" y="451.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="216.2" y="462.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.35%)</title><rect x="213.2" y="435.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="216.2" y="446.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.17%)</title><rect x="217.3" y="483.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="220.3" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.35%)</title><rect x="219.3" y="483.0" width="4.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="222.3" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.17%)</title><rect x="221.4" y="467.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="224.4" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.17%)</title><rect x="221.4" y="451.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="224.4" y="462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.17%)</title><rect x="221.4" y="435.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="224.4" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.17%)</title><rect x="221.4" y="419.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="224.4" y="430.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.17%)</title><rect x="223.4" y="483.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="226.4" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.35%)</title><rect x="225.5" y="531.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="228.5" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.17%)</title><rect x="225.5" y="515.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="228.5" y="526.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.17%)</title><rect x="227.5" y="515.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="230.5" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.17%)</title><rect x="227.5" y="499.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="230.5" y="510.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.17%)</title><rect x="229.6" y="579.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="232.6" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.17%)</title><rect x="229.6" y="563.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="232.6" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.17%)</title><rect x="229.6" y="547.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="232.6" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.17%)</title><rect x="229.6" y="531.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="232.6" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.17%)</title><rect x="231.6" y="595.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="234.6" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.17%)</title><rect x="231.6" y="579.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="234.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.17%)</title><rect x="231.6" y="563.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.6" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.17%)</title><rect x="231.6" y="547.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (436 samples, 75.83%)</title><rect x="233.7" y="771.0" width="894.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.7" y="782.0">ru/mail/polis/service/stasyanoi/CustomServer.put</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (435 samples, 75.65%)</title><rect x="233.7" y="755.0" width="892.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.7" y="766.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (435 samples, 75.65%)</title><rect x="233.7" y="739.0" width="892.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.7" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.17%)</title><rect x="233.7" y="723.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.7" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="235.7" y="723.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="238.7" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (433 samples, 75.30%)</title><rect x="237.8" y="723.0" width="888.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.8" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (335 samples, 58.26%)</title><rect x="239.8" y="707.0" width="687.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="242.8" y="718.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.17%)</title><rect x="239.8" y="691.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="242.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.17%)</title><rect x="241.9" y="691.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="244.9" y="702.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (333 samples, 57.91%)</title><rect x="243.9" y="691.0" width="683.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="246.9" y="702.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyH..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.35%)</title><rect x="243.9" y="675.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="246.9" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.35%)</title><rect x="243.9" y="659.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (330 samples, 57.39%)</title><rect x="248.1" y="675.0" width="677.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="251.1" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (329 samples, 57.22%)</title><rect x="250.1" y="659.0" width="675.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="253.1" y="670.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slic..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (329 samples, 57.22%)</title><rect x="250.1" y="643.0" width="675.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="253.1" y="654.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (327 samples, 56.87%)</title><rect x="250.1" y="627.0" width="671.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="253.1" y="638.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>__pthread_cond_destroy (1 samples, 0.17%)</title><rect x="250.1" y="611.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="253.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (323 samples, 56.17%)</title><rect x="252.2" y="611.0" width="662.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="255.2" y="622.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::Writ..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.17%)</title><rect x="262.4" y="595.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="265.4" y="606.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.17%)</title><rect x="264.5" y="595.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="267.5" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="266.5" y="595.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="269.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.17%)</title><rect x="268.6" y="595.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="271.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 0.70%)</title><rect x="270.6" y="595.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="273.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (3 samples, 0.52%)</title><rect x="270.6" y="579.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="273.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.17%)</title><rect x="272.7" y="563.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="275.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.17%)</title><rect x="272.7" y="547.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="275.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.17%)</title><rect x="274.7" y="563.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="277.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.17%)</title><rect x="276.8" y="579.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="279.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.35%)</title><rect x="278.8" y="595.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.8" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.17%)</title><rect x="278.8" y="579.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="281.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="280.9" y="579.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="283.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.17%)</title><rect x="282.9" y="595.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="285.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.17%)</title><rect x="285.0" y="595.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (18 samples, 3.13%)</title><rect x="287.0" y="595.0" width="37.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="290.0" y="606.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (16 samples, 2.78%)</title><rect x="291.1" y="579.0" width="32.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.1" y="590.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (16 samples, 2.78%)</title><rect x="291.1" y="563.0" width="32.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.1" y="574.0">ro..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 2.61%)</title><rect x="291.1" y="547.0" width="30.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.1" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (15 samples, 2.61%)</title><rect x="291.1" y="531.0" width="30.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.1" y="542.0">ro..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (15 samples, 2.61%)</title><rect x="291.1" y="515.0" width="30.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.1" y="526.0">ro..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (15 samples, 2.61%)</title><rect x="291.1" y="499.0" width="30.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="294.1" y="510.0">bo..</text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (12 samples, 2.09%)</title><rect x="291.1" y="483.0" width="24.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="294.1" y="494.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (9 samples, 1.57%)</title><rect x="291.1" y="467.0" width="18.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="294.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 1.57%)</title><rect x="291.1" y="451.0" width="18.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (9 samples, 1.57%)</title><rect x="291.1" y="435.0" width="18.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="294.1" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.35%)</title><rect x="291.1" y="419.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.1" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.35%)</title><rect x="291.1" y="403.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="294.1" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="291.1" y="387.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="294.1" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.17%)</title><rect x="291.1" y="371.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.1" y="382.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.17%)</title><rect x="293.2" y="387.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.2" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.04%)</title><rect x="295.3" y="419.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.3" y="430.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 1.04%)</title><rect x="295.3" y="403.0" width="12.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="298.3" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.17%)</title><rect x="295.3" y="387.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="298.3" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 0.87%)</title><rect x="297.3" y="387.0" width="10.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="300.3" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.35%)</title><rect x="299.4" y="371.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="302.4" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.17%)</title><rect x="301.4" y="355.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.4" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.35%)</title><rect x="303.5" y="371.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="306.5" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.17%)</title><rect x="307.6" y="419.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="310.6" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.17%)</title><rect x="307.6" y="403.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="310.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="309.6" y="467.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="312.6" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="309.6" y="451.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="312.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.35%)</title><rect x="311.7" y="451.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="314.7" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="311.7" y="435.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="314.7" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.17%)</title><rect x="311.7" y="419.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="314.7" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="311.7" y="403.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="314.7" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.17%)</title><rect x="311.7" y="387.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="314.7" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="313.7" y="435.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="316.7" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.17%)</title><rect x="313.7" y="419.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="316.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.52%)</title><rect x="315.8" y="483.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="318.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.52%)</title><rect x="315.8" y="467.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.8" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="315.8" y="451.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.8" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.17%)</title><rect x="315.8" y="435.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="318.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.17%)</title><rect x="315.8" y="419.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.8" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.35%)</title><rect x="317.8" y="451.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="320.8" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.35%)</title><rect x="317.8" y="435.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.8" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.35%)</title><rect x="317.8" y="419.0" width="4.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="320.8" y="430.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.17%)</title><rect x="317.8" y="403.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="320.8" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.17%)</title><rect x="319.9" y="403.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="322.9" y="414.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.17%)</title><rect x="319.9" y="387.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="322.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.17%)</title><rect x="321.9" y="547.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="324.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (211 samples, 36.70%)</title><rect x="324.0" y="595.0" width="433.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.0" y="606.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThrea..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (210 samples, 36.52%)</title><rect x="326.0" y="579.0" width="431.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="329.0" y="590.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*)..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (210 samples, 36.52%)</title><rect x="326.0" y="563.0" width="431.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="329.0" y="574.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch co..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (208 samples, 36.17%)</title><rect x="330.1" y="547.0" width="426.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="333.1" y="558.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Sl..</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.35%)</title><rect x="330.1" y="531.0" width="4.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="333.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.35%)</title><rect x="334.2" y="531.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="337.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (204 samples, 35.48%)</title><rect x="338.3" y="531.0" width="418.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="341.3" y="542.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (1 samples, 0.17%)</title><rect x="338.3" y="515.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="341.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (202 samples, 35.13%)</title><rect x="340.4" y="515.0" width="414.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="343.4" y="526.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType,..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.17%)</title><rect x="340.4" y="499.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="343.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (201 samples, 34.96%)</title><rect x="342.5" y="499.0" width="412.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="345.5" y="510.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyCompara..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (201 samples, 34.96%)</title><rect x="342.5" y="483.0" width="412.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="345.5" y="494.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyCo..</text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (186 samples, 32.35%)</title><rect x="346.6" y="467.0" width="381.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="349.6" y="478.0">/tmp/librocksdbjni3634095232965951465.so</text>
</g>
<g>
<title>/tmp/librocksdbjni3634095232965951465.so (184 samples, 32.00%)</title><rect x="350.7" y="451.0" width="377.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="353.7" y="462.0">/tmp/librocksdbjni3634095232965951465.so</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.17%)</title><rect x="350.7" y="435.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="353.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (183 samples, 31.83%)</title><rect x="352.7" y="435.0" width="375.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="355.7" y="446.0">rocksdb::MemTable::KeyComparator::operator()(char c..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.17%)</title><rect x="354.8" y="419.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="357.8" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.17%)</title><rect x="356.8" y="419.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="359.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (180 samples, 31.30%)</title><rect x="358.9" y="419.0" width="369.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="361.9" y="430.0">rocksdb::BaseComparatorJniCallback::Compare(rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (10 samples, 1.74%)</title><rect x="365.0" y="403.0" width="20.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="368.0" y="414.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.17%)</title><rect x="365.0" y="387.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="368.0" y="398.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 1.57%)</title><rect x="367.1" y="387.0" width="18.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="370.1" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 1.39%)</title><rect x="369.1" y="371.0" width="16.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="372.1" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.35%)</title><rect x="377.3" y="355.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.3" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.17%)</title><rect x="379.4" y="339.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="382.4" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.17%)</title><rect x="379.4" y="323.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.4" y="334.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.17%)</title><rect x="381.4" y="355.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="384.4" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.17%)</title><rect x="383.5" y="355.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="386.5" y="366.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (38 samples, 6.61%)</title><rect x="385.5" y="403.0" width="78.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="388.5" y="414.0">JNIEnv_::..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.35%)</title><rect x="385.5" y="387.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="388.5" y="398.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (36 samples, 6.26%)</title><rect x="389.7" y="387.0" width="73.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="392.7" y="398.0">jni_Call..</text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.17%)</title><rect x="395.8" y="371.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="398.8" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.35%)</title><rect x="397.9" y="371.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="400.9" y="382.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.17%)</title><rect x="402.0" y="371.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="405.0" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.52%)</title><rect x="404.0" y="371.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="407.0" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.17%)</title><rect x="410.2" y="371.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.2" y="382.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (25 samples, 4.35%)</title><rect x="412.2" y="371.0" width="51.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="415.2" y="382.0">jni_i..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.17%)</title><rect x="420.4" y="355.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="423.4" y="366.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.35%)</title><rect x="422.5" y="355.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.5" y="366.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (6 samples, 1.04%)</title><rect x="426.6" y="355.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="429.6" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (10 samples, 1.74%)</title><rect x="438.9" y="355.0" width="20.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="441.9" y="366.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.17%)</title><rect x="443.0" y="339.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="446.0" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.17%)</title><rect x="445.1" y="339.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.1" y="350.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.52%)</title><rect x="447.1" y="339.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="450.1" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.17%)</title><rect x="451.2" y="323.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="454.2" y="334.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.52%)</title><rect x="453.3" y="339.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="456.3" y="350.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.35%)</title><rect x="459.4" y="355.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="462.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.17%)</title><rect x="463.5" y="403.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="466.5" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (33 samples, 5.74%)</title><rect x="465.6" y="403.0" width="67.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="468.6" y="414.0">__lll_l..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (26 samples, 4.52%)</title><rect x="479.9" y="387.0" width="53.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="482.9" y="398.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (26 samples, 4.52%)</title><rect x="479.9" y="371.0" width="53.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="482.9" y="382.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_futex (21 samples, 3.65%)</title><rect x="482.0" y="355.0" width="43.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="485.0" y="366.0">__x6..</text>
</g>
<g>
<title>do_futex (19 samples, 3.30%)</title><rect x="484.1" y="339.0" width="38.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="487.1" y="350.0">do_..</text>
</g>
<g>
<title>drop_futex_key_refs.isra.12 (1 samples, 0.17%)</title><rect x="484.1" y="323.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="487.1" y="334.0"></text>
</g>
<g>
<title>futex_wait (18 samples, 3.13%)</title><rect x="486.1" y="323.0" width="36.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="489.1" y="334.0">fut..</text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 1.04%)</title><rect x="500.5" y="307.0" width="12.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="503.5" y="318.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.70%)</title><rect x="504.6" y="291.0" width="8.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="507.6" y="302.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.70%)</title><rect x="504.6" y="275.0" width="8.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="507.6" y="286.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.70%)</title><rect x="504.6" y="259.0" width="8.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="507.6" y="270.0"></text>
</g>
<g>
<title>futex_wait_setup (4 samples, 0.70%)</title><rect x="512.8" y="307.0" width="8.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="515.8" y="318.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.17%)</title><rect x="516.9" y="291.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="519.9" y="302.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.17%)</title><rect x="516.9" y="275.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="519.9" y="286.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.17%)</title><rect x="518.9" y="291.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="521.9" y="302.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.17%)</title><rect x="521.0" y="307.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="524.0" y="318.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.17%)</title><rect x="523.0" y="339.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="526.0" y="350.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.35%)</title><rect x="525.1" y="355.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="528.1" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.35%)</title><rect x="525.1" y="339.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="528.1" y="350.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.17%)</title><rect x="525.1" y="323.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="528.1" y="334.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.17%)</title><rect x="527.1" y="323.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="530.1" y="334.0"></text>
</g>
<g>
<title>syscall_trace_enter (2 samples, 0.35%)</title><rect x="529.2" y="355.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="532.2" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.17%)</title><rect x="531.3" y="339.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="534.3" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (76 samples, 13.22%)</title><rect x="533.3" y="403.0" width="156.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="536.3" y="414.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (74 samples, 12.87%)</title><rect x="537.4" y="387.0" width="151.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="540.4" y="398.0">entry_SYSCALL_64_af..</text>
</g>
<g>
<title>do_syscall_64 (74 samples, 12.87%)</title><rect x="537.4" y="371.0" width="151.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="540.4" y="382.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (66 samples, 11.48%)</title><rect x="545.6" y="355.0" width="135.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="548.6" y="366.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (66 samples, 11.48%)</title><rect x="545.6" y="339.0" width="135.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="548.6" y="350.0">do_futex</text>
</g>
<g>
<title>futex_wake (62 samples, 10.78%)</title><rect x="547.7" y="323.0" width="127.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="550.7" y="334.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.17%)</title><rect x="560.0" y="307.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="563.0" y="318.0"></text>
</g>
<g>
<title>mark_wake_futex (4 samples, 0.70%)</title><rect x="562.0" y="307.0" width="8.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="565.0" y="318.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.35%)</title><rect x="566.1" y="291.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="569.1" y="302.0"></text>
</g>
<g>
<title>wake_up_q (51 samples, 8.87%)</title><rect x="570.2" y="307.0" width="104.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="573.2" y="318.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (50 samples, 8.70%)</title><rect x="572.3" y="291.0" width="102.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="575.3" y="302.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (50 samples, 8.70%)</title><rect x="572.3" y="275.0" width="102.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="575.3" y="286.0">__lock_text_..</text>
</g>
<g>
<title>get_futex_key (1 samples, 0.17%)</title><rect x="674.9" y="323.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="677.9" y="334.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.35%)</title><rect x="677.0" y="323.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="680.0" y="334.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (3 samples, 0.52%)</title><rect x="681.1" y="355.0" width="6.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="684.1" y="366.0"></text>
</g>
<g>
<title>__audit_syscall_exit (3 samples, 0.52%)</title><rect x="681.1" y="339.0" width="6.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="684.1" y="350.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.17%)</title><rect x="683.1" y="323.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="686.1" y="334.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.17%)</title><rect x="685.2" y="323.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="688.2" y="334.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.17%)</title><rect x="687.2" y="355.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="690.2" y="366.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.35%)</title><rect x="689.3" y="403.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="692.3" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.87%)</title><rect x="693.4" y="403.0" width="10.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="696.4" y="414.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.17%)</title><rect x="693.4" y="387.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="696.4" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.35%)</title><rect x="695.4" y="387.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.4" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.35%)</title><rect x="699.5" y="387.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="702.5" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.87%)</title><rect x="703.6" y="403.0" width="10.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="706.6" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.70%)</title><rect x="713.9" y="403.0" width="8.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="716.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.35%)</title><rect x="722.1" y="403.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="725.1" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.17%)</title><rect x="724.2" y="387.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="727.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.17%)</title><rect x="726.2" y="403.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (13 samples, 2.26%)</title><rect x="728.3" y="467.0" width="26.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="731.3" y="478.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (13 samples, 2.26%)</title><rect x="728.3" y="451.0" width="26.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="731.3" y="462.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.17%)</title><rect x="728.3" y="435.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.3" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.17%)</title><rect x="728.3" y="419.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="731.3" y="430.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.17%)</title><rect x="728.3" y="403.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.3" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.52%)</title><rect x="730.3" y="435.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="733.3" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.52%)</title><rect x="730.3" y="419.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="733.3" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.17%)</title><rect x="732.4" y="403.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="735.4" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.17%)</title><rect x="734.4" y="403.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="737.4" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.52%)</title><rect x="736.5" y="435.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="739.5" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.35%)</title><rect x="738.5" y="419.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="741.5" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.35%)</title><rect x="738.5" y="403.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="741.5" y="414.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.70%)</title><rect x="742.6" y="435.0" width="8.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="745.6" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.70%)</title><rect x="742.6" y="419.0" width="8.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="745.6" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.70%)</title><rect x="742.6" y="403.0" width="8.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="745.6" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.70%)</title><rect x="742.6" y="387.0" width="8.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="745.6" y="398.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.70%)</title><rect x="742.6" y="371.0" width="8.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="745.6" y="382.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.70%)</title><rect x="742.6" y="355.0" width="8.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="745.6" y="366.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.17%)</title><rect x="742.6" y="339.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="745.6" y="350.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.52%)</title><rect x="744.7" y="339.0" width="6.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="747.7" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.52%)</title><rect x="744.7" y="323.0" width="6.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="747.7" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.52%)</title><rect x="744.7" y="307.0" width="6.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="747.7" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="750.8" y="435.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="753.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.17%)</title><rect x="752.9" y="435.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="755.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.17%)</title><rect x="754.9" y="515.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="757.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (35 samples, 6.09%)</title><rect x="757.0" y="595.0" width="71.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="760.0" y="606.0">rocksdb:..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.35%)</title><rect x="824.7" y="579.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="827.7" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.35%)</title><rect x="824.7" y="563.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="827.7" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.35%)</title><rect x="824.7" y="547.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="827.7" y="558.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="826.8" y="531.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="829.8" y="542.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.17%)</title><rect x="826.8" y="515.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="829.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (35 samples, 6.09%)</title><rect x="828.8" y="595.0" width="71.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.8" y="606.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (23 samples, 4.00%)</title><rect x="828.8" y="579.0" width="47.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.8" y="590.0">rock..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.35%)</title><rect x="869.9" y="563.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="872.9" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.35%)</title><rect x="869.9" y="547.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="872.9" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.35%)</title><rect x="869.9" y="531.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="872.9" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.35%)</title><rect x="869.9" y="515.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="872.9" y="526.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.35%)</title><rect x="869.9" y="499.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="872.9" y="510.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.35%)</title><rect x="869.9" y="483.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="872.9" y="494.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.17%)</title><rect x="871.9" y="467.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="874.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.17%)</title><rect x="874.0" y="563.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.0" y="574.0"></text>
</g>
<g>
<title>sched_yield (12 samples, 2.09%)</title><rect x="876.0" y="579.0" width="24.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="879.0" y="590.0">s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.91%)</title><rect x="878.1" y="563.0" width="22.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="881.1" y="574.0">e..</text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.91%)</title><rect x="878.1" y="547.0" width="22.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="881.1" y="558.0">d..</text>
</g>
<g>
<title>__x64_sys_sched_yield (7 samples, 1.22%)</title><rect x="884.2" y="531.0" width="14.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="887.2" y="542.0"></text>
</g>
<g>
<title>do_sched_yield (7 samples, 1.22%)</title><rect x="884.2" y="515.0" width="14.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="887.2" y="526.0"></text>
</g>
<g>
<title>schedule (7 samples, 1.22%)</title><rect x="884.2" y="499.0" width="14.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="887.2" y="510.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 1.22%)</title><rect x="884.2" y="483.0" width="14.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="887.2" y="494.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="898.6" y="531.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="901.6" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.17%)</title><rect x="898.6" y="515.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="901.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.17%)</title><rect x="900.6" y="595.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.17%)</title><rect x="902.7" y="595.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.17%)</title><rect x="902.7" y="579.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.17%)</title><rect x="904.7" y="595.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="907.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.17%)</title><rect x="904.7" y="579.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.17%)</title><rect x="906.8" y="595.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.8" y="606.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.35%)</title><rect x="908.9" y="595.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="911.9" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.35%)</title><rect x="908.9" y="579.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="911.9" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.35%)</title><rect x="908.9" y="563.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="911.9" y="574.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.17%)</title><rect x="908.9" y="547.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="911.9" y="558.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.17%)</title><rect x="908.9" y="531.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="911.9" y="542.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.17%)</title><rect x="908.9" y="515.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="911.9" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.17%)</title><rect x="908.9" y="499.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="911.9" y="510.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="910.9" y="547.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="913.9" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.17%)</title><rect x="910.9" y="531.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="913.9" y="542.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;*) (1 samples, 0.17%)</title><rect x="913.0" y="595.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) [clone .plt] (1 samples, 0.17%)</title><rect x="915.0" y="611.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.17%)</title><rect x="917.1" y="611.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.17%)</title><rect x="919.1" y="611.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.17%)</title><rect x="921.2" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.2" y="638.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.17%)</title><rect x="921.2" y="611.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.2" y="622.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.17%)</title><rect x="923.2" y="627.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.17%)</title><rect x="925.3" y="675.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 4.00%)</title><rect x="927.3" y="707.0" width="47.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="930.3" y="718.0">[unk..</text>
</g>
<g>
<title>__GI_write (16 samples, 2.78%)</title><rect x="927.3" y="691.0" width="32.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="930.3" y="702.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (16 samples, 2.78%)</title><rect x="927.3" y="675.0" width="32.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="930.3" y="686.0">en..</text>
</g>
<g>
<title>do_syscall_64 (16 samples, 2.78%)</title><rect x="927.3" y="659.0" width="32.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="930.3" y="670.0">do..</text>
</g>
<g>
<title>__x64_sys_write (15 samples, 2.61%)</title><rect x="927.3" y="643.0" width="30.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="930.3" y="654.0">__..</text>
</g>
<g>
<title>ksys_write (15 samples, 2.61%)</title><rect x="927.3" y="627.0" width="30.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="930.3" y="638.0">ks..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.17%)</title><rect x="927.3" y="611.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="930.3" y="622.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.17%)</title><rect x="927.3" y="595.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="930.3" y="606.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.17%)</title><rect x="927.3" y="579.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="930.3" y="590.0"></text>
</g>
<g>
<title>vfs_write (14 samples, 2.43%)</title><rect x="929.4" y="611.0" width="28.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="932.4" y="622.0">vf..</text>
</g>
<g>
<title>__vfs_write (11 samples, 1.91%)</title><rect x="931.4" y="595.0" width="22.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="934.4" y="606.0">_..</text>
</g>
<g>
<title>new_sync_write (11 samples, 1.91%)</title><rect x="931.4" y="579.0" width="22.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="934.4" y="590.0">n..</text>
</g>
<g>
<title>ext4_file_write_iter (11 samples, 1.91%)</title><rect x="931.4" y="563.0" width="22.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="934.4" y="574.0">e..</text>
</g>
<g>
<title>__generic_file_write_iter (11 samples, 1.91%)</title><rect x="931.4" y="547.0" width="22.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="934.4" y="558.0">_..</text>
</g>
<g>
<title>file_update_time (2 samples, 0.35%)</title><rect x="931.4" y="531.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="934.4" y="542.0"></text>
</g>
<g>
<title>generic_update_time (2 samples, 0.35%)</title><rect x="931.4" y="515.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="934.4" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.35%)</title><rect x="931.4" y="499.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="934.4" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.35%)</title><rect x="931.4" y="483.0" width="4.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="934.4" y="494.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.17%)</title><rect x="931.4" y="467.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="934.4" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.17%)</title><rect x="933.5" y="467.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="936.5" y="478.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.17%)</title><rect x="933.5" y="451.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="936.5" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.17%)</title><rect x="933.5" y="435.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="936.5" y="446.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.17%)</title><rect x="933.5" y="419.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="936.5" y="430.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.17%)</title><rect x="933.5" y="403.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="936.5" y="414.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.17%)</title><rect x="933.5" y="387.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="936.5" y="398.0"></text>
</g>
<g>
<title>generic_perform_write (9 samples, 1.57%)</title><rect x="935.5" y="531.0" width="18.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="938.5" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.52%)</title><rect x="935.5" y="515.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="938.5" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.35%)</title><rect x="935.5" y="499.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="938.5" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.35%)</title><rect x="935.5" y="483.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="938.5" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.35%)</title><rect x="935.5" y="467.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="938.5" y="478.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.17%)</title><rect x="939.6" y="499.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="942.6" y="510.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.17%)</title><rect x="939.6" y="483.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="942.6" y="494.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.17%)</title><rect x="939.6" y="467.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="942.6" y="478.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.17%)</title><rect x="939.6" y="451.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="942.6" y="462.0"></text>
</g>
<g>
<title>ext4_da_write_end (6 samples, 1.04%)</title><rect x="941.7" y="515.0" width="12.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="944.7" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.35%)</title><rect x="941.7" y="499.0" width="4.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="944.7" y="510.0"></text>
</g>
<g>
<title>jbd2_journal_stop (2 samples, 0.35%)</title><rect x="941.7" y="483.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="944.7" y="494.0"></text>
</g>
<g>
<title>__wake_up (1 samples, 0.17%)</title><rect x="943.7" y="467.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="946.7" y="478.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.17%)</title><rect x="943.7" y="451.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="946.7" y="462.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.17%)</title><rect x="943.7" y="435.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="946.7" y="446.0"></text>
</g>
<g>
<title>generic_write_end (4 samples, 0.70%)</title><rect x="945.8" y="499.0" width="8.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="948.8" y="510.0"></text>
</g>
<g>
<title>__mark_inode_dirty (4 samples, 0.70%)</title><rect x="945.8" y="483.0" width="8.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="948.8" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (4 samples, 0.70%)</title><rect x="945.8" y="467.0" width="8.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="948.8" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (4 samples, 0.70%)</title><rect x="945.8" y="451.0" width="8.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="948.8" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (3 samples, 0.52%)</title><rect x="945.8" y="435.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="948.8" y="446.0"></text>
</g>
<g>
<title>ext4_do_update_inode (3 samples, 0.52%)</title><rect x="945.8" y="419.0" width="6.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="948.8" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (3 samples, 0.52%)</title><rect x="945.8" y="403.0" width="6.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="948.8" y="414.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (2 samples, 0.35%)</title><rect x="947.8" y="387.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="950.8" y="398.0"></text>
</g>
<g>
<title>crypto_shash_update (2 samples, 0.35%)</title><rect x="947.8" y="371.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="950.8" y="382.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (2 samples, 0.35%)</title><rect x="947.8" y="355.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="950.8" y="366.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.17%)</title><rect x="951.9" y="435.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="954.9" y="446.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.17%)</title><rect x="951.9" y="419.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="954.9" y="430.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.17%)</title><rect x="951.9" y="403.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="954.9" y="414.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.17%)</title><rect x="951.9" y="387.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="954.9" y="398.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.35%)</title><rect x="954.0" y="595.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="957.0" y="606.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.17%)</title><rect x="956.1" y="579.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="959.1" y="590.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.17%)</title><rect x="956.1" y="563.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="959.1" y="574.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.17%)</title><rect x="956.1" y="547.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="959.1" y="558.0"></text>
</g>
<g>
<title>aa_label_is_subset (1 samples, 0.17%)</title><rect x="956.1" y="531.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="959.1" y="542.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="958.1" y="643.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="961.1" y="654.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.17%)</title><rect x="958.1" y="627.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="961.1" y="638.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (5 samples, 0.87%)</title><rect x="960.2" y="691.0" width="10.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="963.2" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.87%)</title><rect x="960.2" y="675.0" width="10.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="963.2" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.87%)</title><rect x="960.2" y="659.0" width="10.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="963.2" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.52%)</title><rect x="960.2" y="643.0" width="6.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="963.2" y="654.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.52%)</title><rect x="960.2" y="627.0" width="6.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="963.2" y="638.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.35%)</title><rect x="962.2" y="611.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="965.2" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.35%)</title><rect x="962.2" y="595.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="965.2" y="606.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.35%)</title><rect x="962.2" y="579.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="965.2" y="590.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.17%)</title><rect x="964.3" y="563.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="967.3" y="574.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.35%)</title><rect x="966.3" y="643.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="969.3" y="654.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.35%)</title><rect x="966.3" y="627.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="969.3" y="638.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.17%)</title><rect x="970.4" y="691.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.4" y="702.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) [clone .plt] (1 samples, 0.17%)</title><rect x="972.5" y="691.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.5" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="974.5" y="707.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="977.5" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 1.57%)</title><rect x="976.6" y="707.0" width="18.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="979.6" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 1.57%)</title><rect x="976.6" y="691.0" width="18.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="979.6" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 1.57%)</title><rect x="976.6" y="675.0" width="18.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="979.6" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 1.39%)</title><rect x="978.6" y="659.0" width="16.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="981.6" y="670.0"></text>
</g>
<g>
<title>do_futex (8 samples, 1.39%)</title><rect x="978.6" y="643.0" width="16.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="981.6" y="654.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 1.39%)</title><rect x="978.6" y="627.0" width="16.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="981.6" y="638.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.17%)</title><rect x="978.6" y="611.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="981.6" y="622.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 1.22%)</title><rect x="980.7" y="611.0" width="14.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="983.7" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (6 samples, 1.04%)</title><rect x="982.7" y="595.0" width="12.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="985.7" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.87%)</title><rect x="984.8" y="579.0" width="10.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="987.8" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 0.52%)</title><rect x="995.0" y="707.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="998.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (61 samples, 10.61%)</title><rect x="1001.2" y="707.0" width="125.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.2" y="718.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (60 samples, 10.43%)</title><rect x="1003.3" y="691.0" width="123.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1006.3" y="702.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.35%)</title><rect x="1007.4" y="675.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1010.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.35%)</title><rect x="1007.4" y="659.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1010.4" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (56 samples, 9.74%)</title><rect x="1011.5" y="675.0" width="114.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.5" y="686.0">org/rocksdb/Ab..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.52%)</title><rect x="1011.5" y="659.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.5" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (53 samples, 9.22%)</title><rect x="1017.6" y="659.0" width="108.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.6" y="670.0">org/rocksdb/S..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (52 samples, 9.04%)</title><rect x="1019.7" y="643.0" width="106.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.7" y="654.0">org/rocksdb/S..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (48 samples, 8.35%)</title><rect x="1025.8" y="627.0" width="98.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1028.8" y="638.0">Java_org_roc..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.17%)</title><rect x="1027.9" y="611.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.9" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.52%)</title><rect x="1029.9" y="611.0" width="6.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1032.9" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.52%)</title><rect x="1036.1" y="611.0" width="6.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1039.1" y="622.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.35%)</title><rect x="1036.1" y="595.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.1" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.17%)</title><rect x="1040.2" y="595.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.2" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (37 samples, 6.43%)</title><rect x="1042.2" y="611.0" width="76.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1045.2" y="622.0">jni_NewB..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.17%)</title><rect x="1046.3" y="595.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.35%)</title><rect x="1048.4" y="595.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.4" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.35%)</title><rect x="1052.5" y="595.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.70%)</title><rect x="1056.6" y="595.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.6" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (26 samples, 4.52%)</title><rect x="1064.8" y="595.0" width="53.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.8" y="606.0">TypeA..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (23 samples, 4.00%)</title><rect x="1071.0" y="579.0" width="47.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.0" y="590.0">Coll..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.17%)</title><rect x="1071.0" y="563.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (19 samples, 3.30%)</title><rect x="1073.0" y="563.0" width="39.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.0" y="574.0">Mem..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.35%)</title><rect x="1085.3" y="547.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.3" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.70%)</title><rect x="1089.4" y="547.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.4" y="558.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.35%)</title><rect x="1093.5" y="531.0" width="4.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1096.5" y="542.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.35%)</title><rect x="1093.5" y="515.0" width="4.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1096.5" y="526.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.35%)</title><rect x="1093.5" y="499.0" width="4.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1096.5" y="510.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.35%)</title><rect x="1093.5" y="483.0" width="4.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1096.5" y="494.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.17%)</title><rect x="1095.6" y="467.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1098.6" y="478.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.17%)</title><rect x="1095.6" y="451.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1098.6" y="462.0"></text>
</g>
<g>
<title>kthread_blkcg (1 samples, 0.17%)</title><rect x="1095.6" y="435.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1098.6" y="446.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.35%)</title><rect x="1097.7" y="547.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.7" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (5 samples, 0.87%)</title><rect x="1101.8" y="547.0" width="10.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1104.8" y="558.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.35%)</title><rect x="1107.9" y="531.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1110.9" y="542.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.35%)</title><rect x="1107.9" y="515.0" width="4.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1110.9" y="526.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.35%)</title><rect x="1107.9" y="499.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1110.9" y="510.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.35%)</title><rect x="1107.9" y="483.0" width="4.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1110.9" y="494.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.17%)</title><rect x="1107.9" y="467.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1110.9" y="478.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.17%)</title><rect x="1110.0" y="467.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1113.0" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.52%)</title><rect x="1112.0" y="563.0" width="6.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1115.0" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.52%)</title><rect x="1118.2" y="611.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1121.2" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.17%)</title><rect x="1120.2" y="595.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.2" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.17%)</title><rect x="1122.3" y="595.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1125.3" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.17%)</title><rect x="1124.3" y="627.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1127.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.17%)</title><rect x="1126.4" y="755.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.17%)</title><rect x="1126.4" y="739.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1129.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.17%)</title><rect x="1126.4" y="723.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1129.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1126.4" y="707.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1129.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1126.4" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.4" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1126.4" y="675.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.17%)</title><rect x="1126.4" y="659.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.17%)</title><rect x="1126.4" y="643.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1129.4" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.17%)</title><rect x="1126.4" y="627.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1129.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.35%)</title><rect x="1128.4" y="787.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.35%)</title><rect x="1128.4" y="771.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1131.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.35%)</title><rect x="1128.4" y="755.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.35%)</title><rect x="1128.4" y="739.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.35%)</title><rect x="1128.4" y="723.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1131.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.70%)</title><rect x="1132.5" y="819.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1135.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.52%)</title><rect x="1132.5" y="803.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.52%)</title><rect x="1132.5" y="787.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1135.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.52%)</title><rect x="1132.5" y="771.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1135.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.52%)</title><rect x="1132.5" y="755.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1135.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.17%)</title><rect x="1138.7" y="803.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.52%)</title><rect x="1140.7" y="819.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1143.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.52%)</title><rect x="1140.7" y="803.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1143.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.35%)</title><rect x="1142.8" y="787.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1145.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.35%)</title><rect x="1142.8" y="771.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1145.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (2 samples, 0.35%)</title><rect x="1142.8" y="755.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1145.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (2 samples, 0.35%)</title><rect x="1142.8" y="739.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.35%)</title><rect x="1146.9" y="819.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1149.9" y="830.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.35%)</title><rect x="1151.0" y="819.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1154.0" y="830.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.35%)</title><rect x="1151.0" y="803.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1154.0" y="814.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.35%)</title><rect x="1151.0" y="787.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1154.0" y="798.0"></text>
</g>
<g>
<title>find_vma (1 samples, 0.17%)</title><rect x="1153.1" y="771.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>vmacache_find (1 samples, 0.17%)</title><rect x="1153.1" y="755.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 2.26%)</title><rect x="1155.1" y="835.0" width="26.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1158.1" y="846.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 2.09%)</title><rect x="1157.2" y="819.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1160.2" y="830.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.52%)</title><rect x="1159.2" y="803.0" width="6.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1162.2" y="814.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="1159.2" y="787.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1162.2" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.35%)</title><rect x="1161.3" y="787.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1164.3" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.17%)</title><rect x="1161.3" y="771.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.17%)</title><rect x="1163.3" y="771.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>__GI___recv (8 samples, 1.39%)</title><rect x="1165.4" y="803.0" width="16.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1168.4" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 1.39%)</title><rect x="1165.4" y="787.0" width="16.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 1.39%)</title><rect x="1165.4" y="771.0" width="16.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 1.04%)</title><rect x="1165.4" y="755.0" width="12.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 1.04%)</title><rect x="1165.4" y="739.0" width="12.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (4 samples, 0.70%)</title><rect x="1167.4" y="723.0" width="8.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.17%)</title><rect x="1167.4" y="707.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.17%)</title><rect x="1169.5" y="707.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.17%)</title><rect x="1169.5" y="691.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.17%)</title><rect x="1169.5" y="675.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1172.5" y="686.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.17%)</title><rect x="1169.5" y="659.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.17%)</title><rect x="1169.5" y="643.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1172.5" y="654.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.17%)</title><rect x="1169.5" y="627.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1172.5" y="638.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.35%)</title><rect x="1171.5" y="707.0" width="4.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1174.5" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.17%)</title><rect x="1173.6" y="691.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1176.6" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.17%)</title><rect x="1173.6" y="675.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1176.6" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.17%)</title><rect x="1173.6" y="659.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1176.6" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.17%)</title><rect x="1175.6" y="723.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.17%)</title><rect x="1175.6" y="707.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.17%)</title><rect x="1175.6" y="691.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.17%)</title><rect x="1175.6" y="675.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.17%)</title><rect x="1177.7" y="755.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.17%)</title><rect x="1177.7" y="739.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.17%)</title><rect x="1177.7" y="723.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.17%)</title><rect x="1179.7" y="755.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.17%)</title><rect x="1179.7" y="739.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.17%)</title><rect x="1181.8" y="851.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.17%)</title><rect x="1181.8" y="835.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.17%)</title><rect x="1181.8" y="819.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.52%)</title><rect x="1183.8" y="883.0" width="6.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.52%)</title><rect x="1183.8" y="867.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.52%)</title><rect x="1183.8" y="851.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.52%)</title><rect x="1183.8" y="835.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.52%)</title><rect x="1183.8" y="819.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.52%)</title><rect x="1183.8" y="803.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.52%)</title><rect x="1183.8" y="787.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
</g>
</svg>
