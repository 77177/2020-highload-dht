<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (182 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1 samples, 0.55%)</title><rect x="10.0" y="883.0" width="6.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.55%)</title><rect x="10.0" y="867.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.55%)</title><rect x="10.0" y="851.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.55%)</title><rect x="10.0" y="835.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.55%)</title><rect x="10.0" y="819.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (1 samples, 0.55%)</title><rect x="10.0" y="803.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.55%)</title><rect x="10.0" y="787.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7305573520772578035.so (1 samples, 0.55%)</title><rect x="10.0" y="771.0" width="6.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.55%)</title><rect x="10.0" y="755.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.55%)</title><rect x="10.0" y="739.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.55%)</title><rect x="10.0" y="723.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.55%)</title><rect x="10.0" y="707.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.55%)</title><rect x="10.0" y="691.0" width="6.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.55%)</title><rect x="10.0" y="675.0" width="6.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.55%)</title><rect x="10.0" y="659.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (178 samples, 97.80%)</title><rect x="16.5" y="883.0" width="1154.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.5" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (4 samples, 2.20%)</title><rect x="29.5" y="867.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.5" y="878.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (4 samples, 2.20%)</title><rect x="29.5" y="851.0" width="25.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.5" y="862.0">o..</text>
</g>
<g>
<title>[unknown] (3 samples, 1.65%)</title><rect x="35.9" y="835.0" width="19.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="38.9" y="846.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 1.65%)</title><rect x="35.9" y="819.0" width="19.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="38.9" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.65%)</title><rect x="35.9" y="803.0" width="19.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="38.9" y="814.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.55%)</title><rect x="35.9" y="787.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="38.9" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 1.10%)</title><rect x="42.4" y="787.0" width="13.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="45.4" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 1.10%)</title><rect x="42.4" y="771.0" width="13.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="45.4" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 1.10%)</title><rect x="42.4" y="755.0" width="13.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="45.4" y="766.0"></text>
</g>
<g>
<title>ep_poll (2 samples, 1.10%)</title><rect x="42.4" y="739.0" width="13.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="45.4" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 1.10%)</title><rect x="42.4" y="723.0" width="13.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="45.4" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 1.10%)</title><rect x="42.4" y="707.0" width="13.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="45.4" y="718.0"></text>
</g>
<g>
<title>schedule (2 samples, 1.10%)</title><rect x="42.4" y="691.0" width="13.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="45.4" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 1.10%)</title><rect x="42.4" y="675.0" width="13.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="45.4" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 1.10%)</title><rect x="42.4" y="659.0" width="13.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="45.4" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (172 samples, 94.51%)</title><rect x="55.4" y="867.0" width="1115.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.4" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (172 samples, 94.51%)</title><rect x="55.4" y="851.0" width="1115.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.4" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (165 samples, 90.66%)</title><rect x="55.4" y="835.0" width="1069.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.4" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (164 samples, 90.11%)</title><rect x="61.9" y="819.0" width="1063.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.9" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (164 samples, 90.11%)</title><rect x="61.9" y="803.0" width="1063.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.9" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (164 samples, 90.11%)</title><rect x="61.9" y="787.0" width="1063.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.9" y="798.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (26 samples, 14.29%)</title><rect x="61.9" y="771.0" width="168.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.9" y="782.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.55%)</title><rect x="61.9" y="755.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.55%)</title><rect x="61.9" y="739.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.55%)</title><rect x="61.9" y="723.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.9" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.55%)</title><rect x="61.9" y="707.0" width="6.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="64.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (25 samples, 13.74%)</title><rect x="68.4" y="755.0" width="162.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.4" y="766.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/net/Session.write (25 samples, 13.74%)</title><rect x="68.4" y="739.0" width="162.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.4" y="750.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (25 samples, 13.74%)</title><rect x="68.4" y="723.0" width="162.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.4" y="734.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (25 samples, 13.74%)</title><rect x="68.4" y="707.0" width="162.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.4" y="718.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (25 samples, 13.74%)</title><rect x="68.4" y="691.0" width="162.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.4" y="702.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>__libc_send (25 samples, 13.74%)</title><rect x="68.4" y="675.0" width="162.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="71.4" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 13.74%)</title><rect x="68.4" y="659.0" width="162.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="71.4" y="670.0">entry_SYSCALL_64_afte..</text>
</g>
<g>
<title>do_syscall_64 (25 samples, 13.74%)</title><rect x="68.4" y="643.0" width="162.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="71.4" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (25 samples, 13.74%)</title><rect x="68.4" y="627.0" width="162.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="71.4" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (25 samples, 13.74%)</title><rect x="68.4" y="611.0" width="162.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="71.4" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (25 samples, 13.74%)</title><rect x="68.4" y="595.0" width="162.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="71.4" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (23 samples, 12.64%)</title><rect x="68.4" y="579.0" width="149.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="71.4" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (23 samples, 12.64%)</title><rect x="68.4" y="563.0" width="149.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="71.4" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (23 samples, 12.64%)</title><rect x="68.4" y="547.0" width="149.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="71.4" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>tcp_push (23 samples, 12.64%)</title><rect x="68.4" y="531.0" width="149.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="71.4" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (22 samples, 12.09%)</title><rect x="68.4" y="515.0" width="142.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="71.4" y="526.0">__tcp_push_pending..</text>
</g>
<g>
<title>tcp_write_xmit (22 samples, 12.09%)</title><rect x="68.4" y="499.0" width="142.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="71.4" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 10.99%)</title><rect x="68.4" y="483.0" width="129.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="71.4" y="494.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (19 samples, 10.44%)</title><rect x="74.8" y="467.0" width="123.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="77.8" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (19 samples, 10.44%)</title><rect x="74.8" y="451.0" width="123.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="77.8" y="462.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (19 samples, 10.44%)</title><rect x="74.8" y="435.0" width="123.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="77.8" y="446.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 2.20%)</title><rect x="74.8" y="419.0" width="26.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="77.8" y="430.0">_..</text>
</g>
<g>
<title>nf_hook_slow (3 samples, 1.65%)</title><rect x="81.3" y="403.0" width="19.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="84.3" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (2 samples, 1.10%)</title><rect x="87.8" y="387.0" width="13.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="90.8" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 1.10%)</title><rect x="87.8" y="371.0" width="13.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="90.8" y="382.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (1 samples, 0.55%)</title><rect x="87.8" y="355.0" width="6.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="90.8" y="366.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.55%)</title><rect x="94.3" y="355.0" width="6.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="97.3" y="366.0"></text>
</g>
<g>
<title>ip_output (15 samples, 8.24%)</title><rect x="100.8" y="419.0" width="97.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="103.8" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (14 samples, 7.69%)</title><rect x="107.3" y="403.0" width="90.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="110.3" y="414.0">ip_finish_..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.55%)</title><rect x="107.3" y="387.0" width="6.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="110.3" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (13 samples, 7.14%)</title><rect x="113.7" y="387.0" width="84.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="116.7" y="398.0">__ip_finis..</text>
</g>
<g>
<title>ip_finish_output2 (12 samples, 6.59%)</title><rect x="113.7" y="371.0" width="77.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="116.7" y="382.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (10 samples, 5.49%)</title><rect x="113.7" y="355.0" width="64.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="116.7" y="366.0">__local..</text>
</g>
<g>
<title>do_softirq.part.20 (10 samples, 5.49%)</title><rect x="113.7" y="339.0" width="64.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="116.7" y="350.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (10 samples, 5.49%)</title><rect x="113.7" y="323.0" width="64.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="116.7" y="334.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 5.49%)</title><rect x="113.7" y="307.0" width="64.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="116.7" y="318.0">__softi..</text>
</g>
<g>
<title>net_rx_action (10 samples, 5.49%)</title><rect x="113.7" y="291.0" width="64.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="116.7" y="302.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (9 samples, 4.95%)</title><rect x="120.2" y="275.0" width="58.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="123.2" y="286.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (9 samples, 4.95%)</title><rect x="120.2" y="259.0" width="58.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="123.2" y="270.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (9 samples, 4.95%)</title><rect x="120.2" y="243.0" width="58.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="123.2" y="254.0">__neti..</text>
</g>
<g>
<title>ip_rcv (9 samples, 4.95%)</title><rect x="120.2" y="227.0" width="58.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="123.2" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (8 samples, 4.40%)</title><rect x="120.2" y="211.0" width="51.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="123.2" y="222.0">ip_rc..</text>
</g>
<g>
<title>ip_local_deliver (8 samples, 4.40%)</title><rect x="120.2" y="195.0" width="51.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="123.2" y="206.0">ip_lo..</text>
</g>
<g>
<title>ip_local_deliver_finish (7 samples, 3.85%)</title><rect x="120.2" y="179.0" width="45.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="123.2" y="190.0">ip_l..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (6 samples, 3.30%)</title><rect x="120.2" y="163.0" width="38.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="123.2" y="174.0">ip_..</text>
</g>
<g>
<title>tcp_v4_rcv (6 samples, 3.30%)</title><rect x="120.2" y="147.0" width="38.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="123.2" y="158.0">tcp..</text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.55%)</title><rect x="120.2" y="131.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="123.2" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (5 samples, 2.75%)</title><rect x="126.7" y="131.0" width="32.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="129.7" y="142.0">tc..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.55%)</title><rect x="126.7" y="115.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="129.7" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (4 samples, 2.20%)</title><rect x="133.2" y="115.0" width="25.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="136.2" y="126.0">t..</text>
</g>
<g>
<title>tcp_ack (2 samples, 1.10%)</title><rect x="133.2" y="99.0" width="13.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="136.2" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.55%)</title><rect x="139.7" y="83.0" width="6.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="142.7" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (2 samples, 1.10%)</title><rect x="146.2" y="99.0" width="12.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="149.2" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (2 samples, 1.10%)</title><rect x="146.2" y="83.0" width="12.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="149.2" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 1.10%)</title><rect x="146.2" y="67.0" width="12.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="149.2" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 1.10%)</title><rect x="146.2" y="51.0" width="12.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="149.2" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 1.10%)</title><rect x="146.2" y="35.0" width="12.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="149.2" y="46.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.55%)</title><rect x="159.1" y="163.0" width="6.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="162.1" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.55%)</title><rect x="165.6" y="179.0" width="6.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="168.6" y="190.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.55%)</title><rect x="165.6" y="163.0" width="6.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="168.6" y="174.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.55%)</title><rect x="165.6" y="147.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="168.6" y="158.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.55%)</title><rect x="172.1" y="211.0" width="6.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="175.1" y="222.0"></text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 1.10%)</title><rect x="178.6" y="355.0" width="12.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="181.6" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 1.10%)</title><rect x="178.6" y="339.0" width="12.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="181.6" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 1.10%)</title><rect x="178.6" y="323.0" width="12.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="181.6" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.55%)</title><rect x="185.1" y="307.0" width="6.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.1" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.55%)</title><rect x="185.1" y="291.0" width="6.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="188.1" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.55%)</title><rect x="185.1" y="275.0" width="6.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="188.1" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.55%)</title><rect x="185.1" y="259.0" width="6.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="188.1" y="270.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.55%)</title><rect x="191.5" y="371.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="194.5" y="382.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.55%)</title><rect x="198.0" y="483.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="201.0" y="494.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.55%)</title><rect x="204.5" y="483.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="207.5" y="494.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.55%)</title><rect x="211.0" y="515.0" width="6.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="214.0" y="526.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 1.10%)</title><rect x="217.5" y="579.0" width="12.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="220.5" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.55%)</title><rect x="224.0" y="563.0" width="6.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="227.0" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.55%)</title><rect x="224.0" y="547.0" width="6.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="227.0" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.55%)</title><rect x="224.0" y="531.0" width="6.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="227.0" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.55%)</title><rect x="224.0" y="515.0" width="6.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="227.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.55%)</title><rect x="230.4" y="771.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.55%)</title><rect x="230.4" y="755.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (137 samples, 75.27%)</title><rect x="236.9" y="771.0" width="888.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.9" y="782.0">ru/mail/polis/service/stasyanoi/CustomServer.get</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (136 samples, 74.73%)</title><rect x="236.9" y="755.0" width="881.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.9" y="766.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (136 samples, 74.73%)</title><rect x="236.9" y="739.0" width="881.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.9" y="750.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (136 samples, 74.73%)</title><rect x="236.9" y="723.0" width="881.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.9" y="734.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.55%)</title><rect x="236.9" y="707.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.9" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (107 samples, 58.79%)</title><rect x="243.4" y="707.0" width="693.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.4" y="718.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>free@plt (1 samples, 0.55%)</title><rect x="243.4" y="691.0" width="6.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="246.4" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.55%)</title><rect x="249.9" y="691.0" width="6.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="252.9" y="702.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (105 samples, 57.69%)</title><rect x="256.4" y="691.0" width="680.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="259.4" y="702.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHa..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (105 samples, 57.69%)</title><rect x="256.4" y="675.0" width="680.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="259.4" y="686.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*)</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (105 samples, 57.69%)</title><rect x="256.4" y="659.0" width="680.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.4" y="670.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice cons..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (104 samples, 57.14%)</title><rect x="256.4" y="643.0" width="674.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.4" y="654.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (103 samples, 56.59%)</title><rect x="256.4" y="627.0" width="667.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="259.4" y="638.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl:..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 1.10%)</title><rect x="262.9" y="611.0" width="12.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="265.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (100 samples, 54.95%)</title><rect x="275.8" y="611.0" width="648.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="278.8" y="622.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni7305573520772578035.so (99 samples, 54.40%)</title><rect x="282.3" y="595.0" width="641.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="285.3" y="606.0">/tmp/librocksdbjni7305573520772578035.so</text>
</g>
<g>
<title>/tmp/librocksdbjni7305573520772578035.so (6 samples, 3.30%)</title><rect x="282.3" y="579.0" width="38.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="285.3" y="590.0">/tm..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 2.75%)</title><rect x="288.8" y="563.0" width="32.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="291.8" y="574.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 1.10%)</title><rect x="288.8" y="547.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="291.8" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 1.10%)</title><rect x="288.8" y="531.0" width="13.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="291.8" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 1.10%)</title><rect x="288.8" y="515.0" width="13.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="291.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.55%)</title><rect x="295.3" y="499.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="298.3" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.55%)</title><rect x="295.3" y="483.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="298.3" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.55%)</title><rect x="295.3" y="467.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="298.3" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 1.10%)</title><rect x="301.8" y="547.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="304.8" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 1.10%)</title><rect x="301.8" y="531.0" width="12.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="304.8" y="542.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.55%)</title><rect x="301.8" y="515.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="304.8" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.55%)</title><rect x="308.2" y="515.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="311.2" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.55%)</title><rect x="314.7" y="547.0" width="6.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="317.7" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.55%)</title><rect x="314.7" y="531.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="317.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (92 samples, 50.55%)</title><rect x="321.2" y="579.0" width="596.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.2" y="590.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrE..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (87 samples, 47.80%)</title><rect x="353.6" y="563.0" width="564.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="356.6" y="574.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 1.10%)</title><rect x="360.1" y="547.0" width="13.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="363.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (82 samples, 45.05%)</title><rect x="373.1" y="547.0" width="531.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="376.1" y="558.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (10 samples, 5.49%)</title><rect x="379.6" y="531.0" width="64.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="382.6" y="542.0">JNIEnv_..</text>
</g>
<g>
<title>jni_CallIntMethodV (10 samples, 5.49%)</title><rect x="379.6" y="515.0" width="64.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="382.6" y="526.0">jni_Cal..</text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 4.40%)</title><rect x="392.5" y="499.0" width="51.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="395.5" y="510.0">jni_i..</text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 3.30%)</title><rect x="392.5" y="483.0" width="38.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="395.5" y="494.0">Jav..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.55%)</title><rect x="399.0" y="467.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="402.0" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.55%)</title><rect x="405.5" y="467.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="408.5" y="478.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.55%)</title><rect x="412.0" y="467.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="415.0" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.55%)</title><rect x="418.5" y="467.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.5" y="478.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.55%)</title><rect x="424.9" y="467.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="427.9" y="478.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.55%)</title><rect x="431.4" y="483.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="434.4" y="494.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.55%)</title><rect x="437.9" y="483.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="440.9" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (19 samples, 10.44%)</title><rect x="444.4" y="531.0" width="123.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="447.4" y="542.0">JNIEnv_::CallVo..</text>
</g>
<g>
<title>jni_CallVoidMethodV (19 samples, 10.44%)</title><rect x="444.4" y="515.0" width="123.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="447.4" y="526.0">jni_CallVoidMet..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.55%)</title><rect x="444.4" y="499.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="447.4" y="510.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 1.10%)</title><rect x="450.9" y="499.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="453.9" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.55%)</title><rect x="463.8" y="499.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="466.8" y="510.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (15 samples, 8.24%)</title><rect x="470.3" y="499.0" width="97.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="473.3" y="510.0">jni_invoke_..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.55%)</title><rect x="476.8" y="483.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.8" y="494.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.55%)</title><rect x="483.3" y="483.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="486.3" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 1.10%)</title><rect x="489.8" y="483.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="492.8" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 4.40%)</title><rect x="502.7" y="483.0" width="51.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.7" y="494.0">JavaC..</text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.55%)</title><rect x="522.2" y="467.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="525.2" y="478.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.55%)</title><rect x="528.7" y="467.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="531.7" y="478.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 1.65%)</title><rect x="535.2" y="467.0" width="19.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.2" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 1.10%)</title><rect x="541.6" y="451.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="544.6" y="462.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 1.10%)</title><rect x="554.6" y="483.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="557.6" y="494.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 7.14%)</title><rect x="567.6" y="531.0" width="84.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="570.6" y="542.0">__lll_lock..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 5.49%)</title><rect x="587.0" y="515.0" width="64.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="590.0" y="526.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (10 samples, 5.49%)</title><rect x="587.0" y="499.0" width="64.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="590.0" y="510.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 4.40%)</title><rect x="593.5" y="483.0" width="51.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="596.5" y="494.0">__x64..</text>
</g>
<g>
<title>do_futex (8 samples, 4.40%)</title><rect x="593.5" y="467.0" width="51.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="596.5" y="478.0">do_fu..</text>
</g>
<g>
<title>futex_wait (7 samples, 3.85%)</title><rect x="600.0" y="451.0" width="45.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="603.0" y="462.0">fute..</text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 2.20%)</title><rect x="606.5" y="435.0" width="25.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="609.5" y="446.0">f..</text>
</g>
<g>
<title>schedule (3 samples, 1.65%)</title><rect x="613.0" y="419.0" width="19.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="616.0" y="430.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 1.65%)</title><rect x="613.0" y="403.0" width="19.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="616.0" y="414.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 1.10%)</title><rect x="632.4" y="435.0" width="13.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="635.4" y="446.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.55%)</title><rect x="645.4" y="483.0" width="6.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="648.4" y="494.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.55%)</title><rect x="645.4" y="467.0" width="6.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="648.4" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 17.58%)</title><rect x="651.9" y="531.0" width="207.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="654.9" y="542.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (31 samples, 17.03%)</title><rect x="658.4" y="515.0" width="200.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="661.4" y="526.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>do_syscall_64 (31 samples, 17.03%)</title><rect x="658.4" y="499.0" width="200.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="661.4" y="510.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (30 samples, 16.48%)</title><rect x="658.4" y="483.0" width="194.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="661.4" y="494.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (29 samples, 15.93%)</title><rect x="658.4" y="467.0" width="188.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="661.4" y="478.0">do_futex</text>
</g>
<g>
<title>futex_wake (28 samples, 15.38%)</title><rect x="658.4" y="451.0" width="181.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="661.4" y="462.0">futex_wake</text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.55%)</title><rect x="664.8" y="435.0" width="6.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="667.8" y="446.0"></text>
</g>
<g>
<title>wake_up_q (26 samples, 14.29%)</title><rect x="671.3" y="435.0" width="168.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="674.3" y="446.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (26 samples, 14.29%)</title><rect x="671.3" y="419.0" width="168.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="674.3" y="430.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (25 samples, 13.74%)</title><rect x="677.8" y="403.0" width="162.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="680.8" y="414.0">__lock_text_start</text>
</g>
<g>
<title>get_futex_key (1 samples, 0.55%)</title><rect x="839.9" y="451.0" width="6.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="842.9" y="462.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.55%)</title><rect x="846.4" y="467.0" width="6.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="849.4" y="478.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.55%)</title><rect x="852.9" y="483.0" width="6.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="855.9" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 1.65%)</title><rect x="859.3" y="531.0" width="19.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="862.3" y="542.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.55%)</title><rect x="859.3" y="515.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.3" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.55%)</title><rect x="865.8" y="515.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.8" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.55%)</title><rect x="872.3" y="515.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.3" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.55%)</title><rect x="878.8" y="531.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="881.8" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.55%)</title><rect x="885.3" y="531.0" width="6.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="888.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 1.10%)</title><rect x="891.8" y="531.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="894.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const [clone .plt] (1 samples, 0.55%)</title><rect x="904.7" y="547.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.55%)</title><rect x="911.2" y="547.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.55%)</title><rect x="917.7" y="579.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.55%)</title><rect x="924.2" y="627.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (1 samples, 0.55%)</title><rect x="930.7" y="643.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.7" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 1.65%)</title><rect x="937.1" y="707.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.1" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.55%)</title><rect x="956.6" y="707.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (24 samples, 13.19%)</title><rect x="963.1" y="707.0" width="155.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="966.1" y="718.0">ru/mail/polis/dao/st..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (24 samples, 13.19%)</title><rect x="963.1" y="691.0" width="155.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="966.1" y="702.0">ru/mail/polis/dao/st..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (24 samples, 13.19%)</title><rect x="963.1" y="675.0" width="155.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="966.1" y="686.0">org/rocksdb/Abstract..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 1.10%)</title><rect x="963.1" y="659.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="966.1" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (22 samples, 12.09%)</title><rect x="976.0" y="659.0" width="142.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="979.0" y="670.0">org/rocksdb/Slice...</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (21 samples, 11.54%)</title><rect x="982.5" y="643.0" width="136.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.5" y="654.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (18 samples, 9.89%)</title><rect x="1002.0" y="627.0" width="116.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1005.0" y="638.0">Java_org_rocks..</text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 2.20%)</title><rect x="1008.5" y="611.0" width="25.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1011.5" y="622.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 1.65%)</title><rect x="1008.5" y="595.0" width="19.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.55%)</title><rect x="1027.9" y="595.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.9" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (8 samples, 4.40%)</title><rect x="1034.4" y="611.0" width="51.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1037.4" y="622.0">jni_N..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.55%)</title><rect x="1034.4" y="595.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.4" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 3.85%)</title><rect x="1040.9" y="595.0" width="45.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.9" y="606.0">Type..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 2.75%)</title><rect x="1053.8" y="579.0" width="32.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.8" y="590.0">Co..</text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 2.75%)</title><rect x="1053.8" y="563.0" width="32.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="574.0">Me..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.55%)</title><rect x="1053.8" y="547.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.8" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 1.10%)</title><rect x="1060.3" y="547.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.3" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (2 samples, 1.10%)</title><rect x="1073.3" y="547.0" width="13.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1076.3" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 2.75%)</title><rect x="1086.3" y="611.0" width="32.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1089.3" y="622.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.55%)</title><rect x="1092.7" y="595.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.7" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 1.10%)</title><rect x="1099.2" y="595.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.55%)</title><rect x="1112.2" y="595.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.55%)</title><rect x="1118.7" y="755.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.55%)</title><rect x="1118.7" y="739.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.55%)</title><rect x="1118.7" y="723.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="1118.7" y="707.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="1118.7" y="691.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.55%)</title><rect x="1118.7" y="675.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.55%)</title><rect x="1118.7" y="659.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.55%)</title><rect x="1118.7" y="643.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1121.7" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.55%)</title><rect x="1118.7" y="627.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1121.7" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.55%)</title><rect x="1118.7" y="611.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1121.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 3.85%)</title><rect x="1125.2" y="835.0" width="45.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.2" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 3.85%)</title><rect x="1125.2" y="819.0" width="45.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.2" y="830.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.55%)</title><rect x="1125.2" y="803.0" width="6.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1128.2" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.55%)</title><rect x="1125.2" y="787.0" width="6.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1128.2" y="798.0"></text>
</g>
<g>
<title>__GI___recv (6 samples, 3.30%)</title><rect x="1131.6" y="803.0" width="38.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1134.6" y="814.0">__G..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 3.30%)</title><rect x="1131.6" y="787.0" width="38.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1134.6" y="798.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 3.30%)</title><rect x="1131.6" y="771.0" width="38.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1134.6" y="782.0">do_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (5 samples, 2.75%)</title><rect x="1131.6" y="755.0" width="32.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1134.6" y="766.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 2.20%)</title><rect x="1138.1" y="739.0" width="26.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1141.1" y="750.0">_..</text>
</g>
<g>
<title>sock_recvmsg (4 samples, 2.20%)</title><rect x="1138.1" y="723.0" width="26.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1141.1" y="734.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 1.10%)</title><rect x="1138.1" y="707.0" width="13.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1141.1" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 1.10%)</title><rect x="1138.1" y="691.0" width="13.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1141.1" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 1.10%)</title><rect x="1138.1" y="675.0" width="13.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1141.1" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 1.10%)</title><rect x="1138.1" y="659.0" width="13.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1141.1" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.55%)</title><rect x="1144.6" y="643.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1147.6" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.55%)</title><rect x="1144.6" y="627.0" width="6.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1147.6" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (1 samples, 0.55%)</title><rect x="1144.6" y="611.0" width="6.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1147.6" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 1.10%)</title><rect x="1151.1" y="707.0" width="13.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1154.1" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.55%)</title><rect x="1157.6" y="691.0" width="6.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1160.6" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.55%)</title><rect x="1157.6" y="675.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1160.6" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.55%)</title><rect x="1157.6" y="659.0" width="6.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1160.6" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.55%)</title><rect x="1157.6" y="643.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1160.6" y="654.0"></text>
</g>
<g>
<title>aa_label_next_confined (1 samples, 0.55%)</title><rect x="1157.6" y="627.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1160.6" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.55%)</title><rect x="1164.1" y="755.0" width="6.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1167.1" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.55%)</title><rect x="1164.1" y="739.0" width="6.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1167.1" y="750.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.55%)</title><rect x="1164.1" y="723.0" width="6.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1167.1" y="734.0"></text>
</g>
<g>
<title>start_thread (3 samples, 1.65%)</title><rect x="1170.5" y="883.0" width="19.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 1.65%)</title><rect x="1170.5" y="867.0" width="19.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 1.65%)</title><rect x="1170.5" y="851.0" width="19.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 1.65%)</title><rect x="1170.5" y="835.0" width="19.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 1.65%)</title><rect x="1170.5" y="819.0" width="19.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 1.65%)</title><rect x="1170.5" y="803.0" width="19.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="814.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.65%)</title><rect x="1170.5" y="787.0" width="19.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="798.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 1.65%)</title><rect x="1170.5" y="771.0" width="19.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.5" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 1.10%)</title><rect x="1170.5" y="755.0" width="13.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="766.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.55%)</title><rect x="1170.5" y="739.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.55%)</title><rect x="1170.5" y="723.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.55%)</title><rect x="1177.0" y="739.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.55%)</title><rect x="1177.0" y="723.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.55%)</title><rect x="1177.0" y="707.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.55%)</title><rect x="1183.5" y="755.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.55%)</title><rect x="1183.5" y="739.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.55%)</title><rect x="1183.5" y="723.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.55%)</title><rect x="1183.5" y="707.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.55%)</title><rect x="1183.5" y="691.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.55%)</title><rect x="1183.5" y="675.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.5" y="686.0"></text>
</g>
</g>
</svg>
