<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (167 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 1.20%)</title><rect x="10.0" y="1043.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 1.20%)</title><rect x="10.0" y="1027.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 1.20%)</title><rect x="10.0" y="1011.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.60%)</title><rect x="10.0" y="995.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.60%)</title><rect x="10.0" y="979.0" width="7.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.60%)</title><rect x="17.1" y="995.0" width="7.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="20.1" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 1.20%)</title><rect x="24.1" y="1043.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.1" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 1.20%)</title><rect x="24.1" y="1027.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.1" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 1.20%)</title><rect x="24.1" y="1011.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.1" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 1.20%)</title><rect x="24.1" y="995.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.60%)</title><rect x="31.2" y="979.0" width="7.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="34.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 1.80%)</title><rect x="38.3" y="1043.0" width="21.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="41.3" y="1054.0">[..</text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (3 samples, 1.80%)</title><rect x="38.3" y="1027.0" width="21.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="41.3" y="1038.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 1.20%)</title><rect x="45.3" y="1011.0" width="14.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="48.3" y="1022.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 1.20%)</title><rect x="45.3" y="995.0" width="14.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="48.3" y="1006.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.60%)</title><rect x="45.3" y="979.0" width="7.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="48.3" y="990.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.60%)</title><rect x="45.3" y="963.0" width="7.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="48.3" y="974.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.60%)</title><rect x="45.3" y="947.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.3" y="958.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.60%)</title><rect x="45.3" y="931.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="48.3" y="942.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.60%)</title><rect x="45.3" y="915.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="48.3" y="926.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.60%)</title><rect x="45.3" y="899.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.3" y="910.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.60%)</title><rect x="45.3" y="883.0" width="7.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="48.3" y="894.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.60%)</title><rect x="52.4" y="979.0" width="7.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="55.4" y="990.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.60%)</title><rect x="52.4" y="963.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="55.4" y="974.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 2.99%)</title><rect x="59.5" y="1043.0" width="35.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="62.5" y="1054.0">[un..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.99%)</title><rect x="59.5" y="1027.0" width="35.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="62.5" y="1038.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 2.40%)</title><rect x="66.5" y="1011.0" width="28.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="69.5" y="1022.0">en..</text>
</g>
<g>
<title>do_syscall_64 (4 samples, 2.40%)</title><rect x="66.5" y="995.0" width="28.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="69.5" y="1006.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 2.40%)</title><rect x="66.5" y="979.0" width="28.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="69.5" y="990.0">__..</text>
</g>
<g>
<title>do_futex (4 samples, 2.40%)</title><rect x="66.5" y="963.0" width="28.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="69.5" y="974.0">do..</text>
</g>
<g>
<title>futex_wake (4 samples, 2.40%)</title><rect x="66.5" y="947.0" width="28.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="69.5" y="958.0">fu..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.60%)</title><rect x="66.5" y="931.0" width="7.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="69.5" y="942.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 1.80%)</title><rect x="73.6" y="931.0" width="21.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="76.6" y="942.0">w..</text>
</g>
<g>
<title>try_to_wake_up (3 samples, 1.80%)</title><rect x="73.6" y="915.0" width="21.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="76.6" y="926.0">t..</text>
</g>
<g>
<title>__lock_text_start (3 samples, 1.80%)</title><rect x="73.6" y="899.0" width="21.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="76.6" y="910.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 2.99%)</title><rect x="94.8" y="1043.0" width="35.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="97.8" y="1054.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 2.40%)</title><rect x="101.9" y="1027.0" width="28.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="104.9" y="1038.0">en..</text>
</g>
<g>
<title>do_syscall_64 (4 samples, 2.40%)</title><rect x="101.9" y="1011.0" width="28.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="104.9" y="1022.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 1.20%)</title><rect x="108.9" y="995.0" width="14.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="111.9" y="1006.0"></text>
</g>
<g>
<title>do_futex (2 samples, 1.20%)</title><rect x="108.9" y="979.0" width="14.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="111.9" y="990.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.60%)</title><rect x="116.0" y="963.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="119.0" y="974.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.60%)</title><rect x="116.0" y="947.0" width="7.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="119.0" y="958.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.60%)</title><rect x="116.0" y="931.0" width="7.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="119.0" y="942.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.60%)</title><rect x="116.0" y="915.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="119.0" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.60%)</title><rect x="116.0" y="899.0" width="7.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="119.0" y="910.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.60%)</title><rect x="123.1" y="995.0" width="7.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="126.1" y="1006.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.60%)</title><rect x="130.1" y="1043.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="133.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (118 samples, 70.66%)</title><rect x="137.2" y="1043.0" width="833.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.2" y="1054.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.60%)</title><rect x="137.2" y="1027.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.60%)</title><rect x="144.3" y="1027.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1 samples, 0.60%)</title><rect x="151.3" y="1027.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.60%)</title><rect x="151.3" y="1011.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="154.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.60%)</title><rect x="151.3" y="995.0" width="7.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="154.3" y="1006.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.60%)</title><rect x="151.3" y="979.0" width="7.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="154.3" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.60%)</title><rect x="151.3" y="963.0" width="7.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.3" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.60%)</title><rect x="151.3" y="947.0" width="7.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="154.3" y="958.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.60%)</title><rect x="151.3" y="931.0" width="7.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="154.3" y="942.0"></text>
</g>
<g>
<title>do_epoll_wait (1 samples, 0.60%)</title><rect x="151.3" y="915.0" width="7.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="154.3" y="926.0"></text>
</g>
<g>
<title>ep_poll (1 samples, 0.60%)</title><rect x="151.3" y="899.0" width="7.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="154.3" y="910.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.60%)</title><rect x="151.3" y="883.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.3" y="894.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.60%)</title><rect x="151.3" y="867.0" width="7.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="154.3" y="878.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.60%)</title><rect x="151.3" y="851.0" width="7.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="154.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (115 samples, 68.86%)</title><rect x="158.4" y="1027.0" width="812.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.4" y="1038.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (115 samples, 68.86%)</title><rect x="158.4" y="1011.0" width="812.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.4" y="1022.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (111 samples, 66.47%)</title><rect x="158.4" y="995.0" width="784.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.4" y="1006.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (110 samples, 65.87%)</title><rect x="158.4" y="979.0" width="777.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.4" y="990.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (110 samples, 65.87%)</title><rect x="158.4" y="963.0" width="777.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.4" y="974.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (110 samples, 65.87%)</title><rect x="158.4" y="947.0" width="777.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.4" y="958.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (24 samples, 14.37%)</title><rect x="158.4" y="931.0" width="169.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.4" y="942.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (24 samples, 14.37%)</title><rect x="158.4" y="915.0" width="169.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.4" y="926.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 14.37%)</title><rect x="158.4" y="899.0" width="169.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.4" y="910.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 14.37%)</title><rect x="158.4" y="883.0" width="169.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.4" y="894.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (24 samples, 14.37%)</title><rect x="158.4" y="867.0" width="169.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.4" y="878.0">one/nio/net/Session$Ar..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (24 samples, 14.37%)</title><rect x="158.4" y="851.0" width="169.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.4" y="862.0">one/nio/net/NativeSock..</text>
</g>
<g>
<title>__libc_send (23 samples, 13.77%)</title><rect x="165.4" y="835.0" width="162.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="168.4" y="846.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 13.77%)</title><rect x="165.4" y="819.0" width="162.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="168.4" y="830.0">entry_SYSCALL_64_afte..</text>
</g>
<g>
<title>do_syscall_64 (23 samples, 13.77%)</title><rect x="165.4" y="803.0" width="162.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="168.4" y="814.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (23 samples, 13.77%)</title><rect x="165.4" y="787.0" width="162.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="168.4" y="798.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (23 samples, 13.77%)</title><rect x="165.4" y="771.0" width="162.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="168.4" y="782.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (23 samples, 13.77%)</title><rect x="165.4" y="755.0" width="162.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="168.4" y="766.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (23 samples, 13.77%)</title><rect x="165.4" y="739.0" width="162.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="168.4" y="750.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (23 samples, 13.77%)</title><rect x="165.4" y="723.0" width="162.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="168.4" y="734.0">tcp_sendmsg</text>
</g>
<g>
<title>release_sock (1 samples, 0.60%)</title><rect x="165.4" y="707.0" width="7.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="168.4" y="718.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.60%)</title><rect x="165.4" y="691.0" width="7.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="168.4" y="702.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.60%)</title><rect x="165.4" y="675.0" width="7.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="168.4" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.60%)</title><rect x="165.4" y="659.0" width="7.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="168.4" y="670.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (22 samples, 13.17%)</title><rect x="172.5" y="707.0" width="155.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="175.5" y="718.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>skb_entail (2 samples, 1.20%)</title><rect x="172.5" y="691.0" width="14.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="175.5" y="702.0"></text>
</g>
<g>
<title>tcp_push (20 samples, 11.98%)</title><rect x="186.6" y="691.0" width="141.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="189.6" y="702.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (20 samples, 11.98%)</title><rect x="186.6" y="675.0" width="141.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="189.6" y="686.0">__tcp_push_pending..</text>
</g>
<g>
<title>tcp_write_xmit (20 samples, 11.98%)</title><rect x="186.6" y="659.0" width="141.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="189.6" y="670.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (18 samples, 10.78%)</title><rect x="193.7" y="643.0" width="127.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="196.7" y="654.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (17 samples, 10.18%)</title><rect x="200.8" y="627.0" width="120.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="203.8" y="638.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (17 samples, 10.18%)</title><rect x="200.8" y="611.0" width="120.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="203.8" y="622.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (17 samples, 10.18%)</title><rect x="200.8" y="595.0" width="120.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="203.8" y="606.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (5 samples, 2.99%)</title><rect x="200.8" y="579.0" width="35.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="203.8" y="590.0">__i..</text>
</g>
<g>
<title>nf_hook_slow (5 samples, 2.99%)</title><rect x="200.8" y="563.0" width="35.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="203.8" y="574.0">nf_..</text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.60%)</title><rect x="200.8" y="547.0" width="7.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="203.8" y="558.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.60%)</title><rect x="200.8" y="531.0" width="7.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="203.8" y="542.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (4 samples, 2.40%)</title><rect x="207.8" y="547.0" width="28.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="210.8" y="558.0">ip..</text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (4 samples, 2.40%)</title><rect x="207.8" y="531.0" width="28.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="210.8" y="542.0">nf..</text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.60%)</title><rect x="207.8" y="515.0" width="7.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="210.8" y="526.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (2 samples, 1.20%)</title><rect x="214.9" y="515.0" width="14.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="217.9" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.60%)</title><rect x="222.0" y="499.0" width="7.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="225.0" y="510.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (1 samples, 0.60%)</title><rect x="229.0" y="515.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="232.0" y="526.0"></text>
</g>
<g>
<title>ip_output (12 samples, 7.19%)</title><rect x="236.1" y="579.0" width="84.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="239.1" y="590.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (12 samples, 7.19%)</title><rect x="236.1" y="563.0" width="84.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="239.1" y="574.0">ip_finish_..</text>
</g>
<g>
<title>__ip_finish_output (11 samples, 6.59%)</title><rect x="243.2" y="547.0" width="77.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="246.2" y="558.0">__ip_fini..</text>
</g>
<g>
<title>ip_finish_output2 (11 samples, 6.59%)</title><rect x="243.2" y="531.0" width="77.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="246.2" y="542.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (9 samples, 5.39%)</title><rect x="243.2" y="515.0" width="63.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="246.2" y="526.0">__local..</text>
</g>
<g>
<title>do_softirq.part.20 (9 samples, 5.39%)</title><rect x="243.2" y="499.0" width="63.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="246.2" y="510.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (9 samples, 5.39%)</title><rect x="243.2" y="483.0" width="63.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="246.2" y="494.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 5.39%)</title><rect x="243.2" y="467.0" width="63.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="246.2" y="478.0">__softi..</text>
</g>
<g>
<title>net_rx_action (9 samples, 5.39%)</title><rect x="243.2" y="451.0" width="63.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="246.2" y="462.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (9 samples, 5.39%)</title><rect x="243.2" y="435.0" width="63.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.2" y="446.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (9 samples, 5.39%)</title><rect x="243.2" y="419.0" width="63.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="246.2" y="430.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (9 samples, 5.39%)</title><rect x="243.2" y="403.0" width="63.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="246.2" y="414.0">__netif..</text>
</g>
<g>
<title>ip_rcv (9 samples, 5.39%)</title><rect x="243.2" y="387.0" width="63.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="246.2" y="398.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (9 samples, 5.39%)</title><rect x="243.2" y="371.0" width="63.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="246.2" y="382.0">ip_rcv_..</text>
</g>
<g>
<title>ip_local_deliver (9 samples, 5.39%)</title><rect x="243.2" y="355.0" width="63.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="246.2" y="366.0">ip_loca..</text>
</g>
<g>
<title>ip_local_deliver_finish (9 samples, 5.39%)</title><rect x="243.2" y="339.0" width="63.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="246.2" y="350.0">ip_loca..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (9 samples, 5.39%)</title><rect x="243.2" y="323.0" width="63.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="246.2" y="334.0">ip_prot..</text>
</g>
<g>
<title>tcp_v4_rcv (9 samples, 5.39%)</title><rect x="243.2" y="307.0" width="63.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="246.2" y="318.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_v4_do_rcv (9 samples, 5.39%)</title><rect x="243.2" y="291.0" width="63.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="246.2" y="302.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_rcv_established (9 samples, 5.39%)</title><rect x="243.2" y="275.0" width="63.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="246.2" y="286.0">tcp_rcv..</text>
</g>
<g>
<title>tcp_ack (3 samples, 1.80%)</title><rect x="243.2" y="259.0" width="21.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="246.2" y="270.0">t..</text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 1.80%)</title><rect x="243.2" y="243.0" width="21.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="246.2" y="254.0">t..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.60%)</title><rect x="250.2" y="227.0" width="7.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="253.2" y="238.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.60%)</title><rect x="250.2" y="211.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="253.2" y="222.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.60%)</title><rect x="250.2" y="195.0" width="7.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="253.2" y="206.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.60%)</title><rect x="257.3" y="227.0" width="7.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="260.3" y="238.0"></text>
</g>
<g>
<title>tcp_data_ready (6 samples, 3.59%)</title><rect x="264.4" y="259.0" width="42.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="267.4" y="270.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (6 samples, 3.59%)</title><rect x="264.4" y="243.0" width="42.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="267.4" y="254.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (6 samples, 3.59%)</title><rect x="264.4" y="227.0" width="42.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="267.4" y="238.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 3.59%)</title><rect x="264.4" y="211.0" width="42.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="267.4" y="222.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (6 samples, 3.59%)</title><rect x="264.4" y="195.0" width="42.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="267.4" y="206.0">__lo..</text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.60%)</title><rect x="306.8" y="515.0" width="7.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="309.8" y="526.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.60%)</title><rect x="306.8" y="499.0" width="7.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="309.8" y="510.0"></text>
</g>
<g>
<title>do_softirq.part.20 (1 samples, 0.60%)</title><rect x="313.8" y="515.0" width="7.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="316.8" y="526.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.60%)</title><rect x="320.9" y="643.0" width="7.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="323.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.60%)</title><rect x="328.0" y="931.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.60%)</title><rect x="328.0" y="915.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.60%)</title><rect x="328.0" y="899.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.60%)</title><rect x="328.0" y="883.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.0" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="328.0" y="867.0" width="7.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="331.0" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (85 samples, 50.90%)</title><rect x="335.0" y="931.0" width="600.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.0" y="942.0">ru/mail/polis/service/stasyanoi/CustomServer.get</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (84 samples, 50.30%)</title><rect x="342.1" y="915.0" width="593.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="345.1" y="926.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.60%)</title><rect x="356.2" y="899.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="359.2" y="910.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.60%)</title><rect x="356.2" y="883.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.60%)</title><rect x="363.3" y="899.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="366.3" y="910.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.60%)</title><rect x="363.3" y="883.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.3" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (72 samples, 43.11%)</title><rect x="370.4" y="899.0" width="508.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.4" y="910.0">ru/mail/polis/dao/stasyanoi/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (72 samples, 43.11%)</title><rect x="370.4" y="883.0" width="508.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.4" y="894.0">ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (6 samples, 3.59%)</title><rect x="370.4" y="867.0" width="42.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.4" y="878.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (3 samples, 1.80%)</title><rect x="370.4" y="851.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.4" y="862.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (2 samples, 1.20%)</title><rect x="370.4" y="835.0" width="14.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="373.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (2 samples, 1.20%)</title><rect x="370.4" y="819.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (2 samples, 1.20%)</title><rect x="370.4" y="803.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.60%)</title><rect x="370.4" y="787.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="373.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.60%)</title><rect x="370.4" y="771.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::ReadRangeDelAggregator::AddTombstones(std::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, rocksdb::InternalKey const*, rocksdb::InternalKey const*) (1 samples, 0.60%)</title><rect x="377.4" y="787.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="380.4" y="798.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.60%)</title><rect x="384.5" y="835.0" width="7.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="387.5" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (3 samples, 1.80%)</title><rect x="391.6" y="851.0" width="21.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.6" y="862.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (2 samples, 1.20%)</title><rect x="391.6" y="835.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (2 samples, 1.20%)</title><rect x="391.6" y="819.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.6" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (2 samples, 1.20%)</title><rect x="391.6" y="803.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.6" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (2 samples, 1.20%)</title><rect x="391.6" y="787.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 1.20%)</title><rect x="391.6" y="771.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="394.6" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::register_finalizer(JavaThread*, oopDesc*) (2 samples, 1.20%)</title><rect x="391.6" y="755.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (2 samples, 1.20%)</title><rect x="391.6" y="739.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.6" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 1.20%)</title><rect x="391.6" y="723.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="394.6" y="734.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.60%)</title><rect x="391.6" y="707.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="394.6" y="718.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.60%)</title><rect x="398.6" y="707.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="401.6" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (1 samples, 0.60%)</title><rect x="405.7" y="835.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (63 samples, 37.72%)</title><rect x="412.8" y="867.0" width="445.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.8" y="878.0">ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (63 samples, 37.72%)</title><rect x="412.8" y="851.0" width="445.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.8" y="862.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (62 samples, 37.13%)</title><rect x="419.8" y="835.0" width="438.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.8" y="846.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 1.80%)</title><rect x="419.8" y="819.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.8" y="830.0">I..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (37 samples, 22.16%)</title><rect x="441.0" y="819.0" width="261.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="444.0" y="830.0">Java_org_rocksdb_RocksIterator_seek0</text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.60%)</title><rect x="441.0" y="803.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="444.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (36 samples, 21.56%)</title><rect x="448.1" y="803.0" width="254.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="451.1" y="814.0">rocksdb::DBIter::Seek(rocksdb::Sli..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (36 samples, 21.56%)</title><rect x="448.1" y="787.0" width="254.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="451.1" y="798.0">rocksdb::MemTableIterator::Seek(ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni10495743274875908292.so (33 samples, 19.76%)</title><rect x="469.3" y="771.0" width="233.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="472.3" y="782.0">/tmp/librocksdbjni1049574327487..</text>
</g>
<g>
<title>rocksdb::EncodeKey(std::string*, rocksdb::Slice const&amp;) (1 samples, 0.60%)</title><rect x="469.3" y="755.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="472.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (32 samples, 19.16%)</title><rect x="476.3" y="755.0" width="226.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="479.3" y="766.0">rocksdb::InlineSkipList&lt;rocksd..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (32 samples, 19.16%)</title><rect x="476.3" y="739.0" width="226.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="479.3" y="750.0">rocksdb::MemTable::KeyComparat..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (31 samples, 18.56%)</title><rect x="483.4" y="723.0" width="219.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="486.4" y="734.0">rocksdb::BaseComparatorJniCal..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 4.19%)</title><rect x="490.5" y="707.0" width="49.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.5" y="718.0">JNIEn..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.60%)</title><rect x="490.5" y="691.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="493.5" y="702.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 3.59%)</title><rect x="497.5" y="691.0" width="42.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="500.5" y="702.0">jni_..</text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.60%)</title><rect x="504.6" y="675.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="507.6" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.60%)</title><rect x="511.7" y="675.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="514.7" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 1.80%)</title><rect x="518.7" y="675.0" width="21.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="521.7" y="686.0">j..</text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 1.20%)</title><rect x="518.7" y="659.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="521.7" y="670.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.60%)</title><rect x="518.7" y="643.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.7" y="654.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.60%)</title><rect x="525.8" y="643.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.8" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.60%)</title><rect x="532.9" y="659.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="535.9" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (14 samples, 8.38%)</title><rect x="539.9" y="707.0" width="99.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="542.9" y="718.0">JNIEnv_::Cal..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.60%)</title><rect x="554.1" y="691.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="557.1" y="702.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (11 samples, 6.59%)</title><rect x="561.1" y="691.0" width="77.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="564.1" y="702.0">jni_CallV..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.60%)</title><rect x="561.1" y="675.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="564.1" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.60%)</title><rect x="568.2" y="675.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="571.2" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 5.39%)</title><rect x="575.3" y="675.0" width="63.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="578.3" y="686.0">jni_inv..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.60%)</title><rect x="596.5" y="659.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="599.5" y="670.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 1.20%)</title><rect x="603.5" y="659.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="606.5" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 1.80%)</title><rect x="617.7" y="659.0" width="21.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="620.7" y="670.0">J..</text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.60%)</title><rect x="624.7" y="643.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="627.7" y="654.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.60%)</title><rect x="631.8" y="643.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.8" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 2.99%)</title><rect x="638.9" y="707.0" width="35.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="641.9" y="718.0">jni..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 1.80%)</title><rect x="645.9" y="691.0" width="21.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="648.9" y="702.0">T..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.60%)</title><rect x="667.1" y="691.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="670.1" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 1.20%)</title><rect x="674.2" y="707.0" width="14.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="677.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 1.20%)</title><rect x="688.3" y="707.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="691.3" y="718.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 1.20%)</title><rect x="688.3" y="691.0" width="14.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="691.3" y="702.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.60%)</title><rect x="695.4" y="675.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.60%)</title><rect x="702.5" y="819.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="705.5" y="830.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.60%)</title><rect x="702.5" y="803.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="705.5" y="814.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.60%)</title><rect x="709.5" y="819.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="712.5" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.60%)</title><rect x="716.6" y="819.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) [clone .plt] (2 samples, 1.20%)</title><rect x="723.7" y="819.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.7" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (17 samples, 10.18%)</title><rect x="737.8" y="819.0" width="120.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.8" y="830.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (16 samples, 9.58%)</title><rect x="744.9" y="803.0" width="113.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.9" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (16 samples, 9.58%)</title><rect x="744.9" y="787.0" width="113.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="747.9" y="798.0">org/rocksdb/Ab..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.60%)</title><rect x="744.9" y="771.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.9" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (15 samples, 8.98%)</title><rect x="751.9" y="771.0" width="106.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="754.9" y="782.0">org/rocksdb/S..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (15 samples, 8.98%)</title><rect x="751.9" y="755.0" width="106.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.9" y="766.0">org/rocksdb/S..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (13 samples, 7.78%)</title><rect x="766.0" y="739.0" width="91.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="769.0" y="750.0">Java_org_ro..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 1.80%)</title><rect x="766.0" y="723.0" width="21.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="769.0" y="734.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 1.20%)</title><rect x="773.1" y="707.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.1" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 2.99%)</title><rect x="787.2" y="723.0" width="35.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="790.2" y="734.0">jni..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.60%)</title><rect x="787.2" y="707.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.2" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 2.40%)</title><rect x="794.3" y="707.0" width="28.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.3" y="718.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 2.40%)</title><rect x="794.3" y="691.0" width="28.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="797.3" y="702.0">Co..</text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 2.40%)</title><rect x="794.3" y="675.0" width="28.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="797.3" y="686.0">Me..</text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (2 samples, 1.20%)</title><rect x="808.4" y="659.0" width="14.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="811.4" y="670.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.60%)</title><rect x="815.5" y="643.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="818.5" y="654.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.60%)</title><rect x="815.5" y="627.0" width="7.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="818.5" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.60%)</title><rect x="815.5" y="611.0" width="7.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="818.5" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.60%)</title><rect x="815.5" y="595.0" width="7.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="818.5" y="606.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.60%)</title><rect x="815.5" y="579.0" width="7.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="818.5" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 2.99%)</title><rect x="822.6" y="723.0" width="35.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="825.6" y="734.0">jni..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 1.80%)</title><rect x="836.7" y="707.0" width="21.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.7" y="718.0">T..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (3 samples, 1.80%)</title><rect x="857.9" y="867.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="860.9" y="878.0">r..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (3 samples, 1.80%)</title><rect x="857.9" y="851.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.9" y="862.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (3 samples, 1.80%)</title><rect x="857.9" y="835.0" width="21.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.9" y="846.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (3 samples, 1.80%)</title><rect x="857.9" y="819.0" width="21.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.9" y="830.0">o..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (3 samples, 1.80%)</title><rect x="857.9" y="803.0" width="21.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="860.9" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (3 samples, 1.80%)</title><rect x="857.9" y="787.0" width="21.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.9" y="798.0">r..</text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 1.80%)</title><rect x="857.9" y="771.0" width="21.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.9" y="782.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (3 samples, 1.80%)</title><rect x="857.9" y="755.0" width="21.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="860.9" y="766.0">r..</text>
</g>
<g>
<title>__libc_free (2 samples, 1.20%)</title><rect x="857.9" y="739.0" width="14.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="860.9" y="750.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.60%)</title><rect x="872.0" y="739.0" width="7.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="875.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.hasNext (1 samples, 0.60%)</title><rect x="879.1" y="899.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="882.1" y="910.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.isValid (1 samples, 0.60%)</title><rect x="879.1" y="883.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.1" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.isValid0 (1 samples, 0.60%)</title><rect x="879.1" y="867.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 4.19%)</title><rect x="886.2" y="899.0" width="49.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="889.2" y="910.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 4.19%)</title><rect x="886.2" y="883.0" width="49.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="889.2" y="894.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (3 samples, 1.80%)</title><rect x="886.2" y="867.0" width="21.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="889.2" y="878.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (3 samples, 1.80%)</title><rect x="886.2" y="851.0" width="21.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="889.2" y="862.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.60%)</title><rect x="886.2" y="835.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (2 samples, 1.20%)</title><rect x="893.2" y="835.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.2" y="846.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10495743274875908292.so (1 samples, 0.60%)</title><rect x="893.2" y="819.0" width="7.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="896.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.60%)</title><rect x="900.3" y="819.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.60%)</title><rect x="900.3" y="803.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.3" y="814.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.60%)</title><rect x="900.3" y="787.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.3" y="798.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.60%)</title><rect x="900.3" y="771.0" width="7.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="903.3" y="782.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.60%)</title><rect x="900.3" y="755.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="903.3" y="766.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.60%)</title><rect x="900.3" y="739.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (4 samples, 2.40%)</title><rect x="907.4" y="867.0" width="28.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.4" y="878.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 2.40%)</title><rect x="907.4" y="851.0" width="28.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="910.4" y="862.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 1.80%)</title><rect x="914.4" y="835.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.4" y="846.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 1.80%)</title><rect x="914.4" y="819.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.4" y="830.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 1.80%)</title><rect x="914.4" y="803.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="917.4" y="814.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 1.80%)</title><rect x="914.4" y="787.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.4" y="798.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.60%)</title><rect x="914.4" y="771.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="917.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 1.20%)</title><rect x="921.5" y="771.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="924.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 1.20%)</title><rect x="921.5" y="755.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.5" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 1.20%)</title><rect x="921.5" y="739.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.5" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 1.20%)</title><rect x="921.5" y="723.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="924.5" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (2 samples, 1.20%)</title><rect x="921.5" y="707.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.60%)</title><rect x="935.6" y="979.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.6" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="935.6" y="963.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.6" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="935.6" y="947.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="938.6" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 2.40%)</title><rect x="942.7" y="995.0" width="28.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="945.7" y="1006.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (4 samples, 2.40%)</title><rect x="942.7" y="979.0" width="28.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.7" y="990.0">on..</text>
</g>
<g>
<title>__GI___recv (3 samples, 1.80%)</title><rect x="942.7" y="963.0" width="21.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="945.7" y="974.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.80%)</title><rect x="942.7" y="947.0" width="21.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="945.7" y="958.0">e..</text>
</g>
<g>
<title>do_syscall_64 (3 samples, 1.80%)</title><rect x="942.7" y="931.0" width="21.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="945.7" y="942.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 1.80%)</title><rect x="942.7" y="915.0" width="21.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="945.7" y="926.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 1.80%)</title><rect x="942.7" y="899.0" width="21.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="945.7" y="910.0">_..</text>
</g>
<g>
<title>sock_recvmsg (2 samples, 1.20%)</title><rect x="942.7" y="883.0" width="14.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="945.7" y="894.0"></text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 1.20%)</title><rect x="942.7" y="867.0" width="14.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="945.7" y="878.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 1.20%)</title><rect x="942.7" y="851.0" width="14.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="945.7" y="862.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.60%)</title><rect x="942.7" y="835.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="945.7" y="846.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.60%)</title><rect x="942.7" y="819.0" width="7.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="945.7" y="830.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.60%)</title><rect x="942.7" y="803.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="945.7" y="814.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.60%)</title><rect x="942.7" y="787.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="945.7" y="798.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.60%)</title><rect x="949.8" y="835.0" width="7.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="952.8" y="846.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.60%)</title><rect x="956.8" y="883.0" width="7.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="959.8" y="894.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.60%)</title><rect x="956.8" y="867.0" width="7.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="959.8" y="878.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.60%)</title><rect x="963.9" y="963.0" width="7.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="966.9" y="974.0"></text>
</g>
<g>
<title>start_thread (31 samples, 18.56%)</title><rect x="971.0" y="1043.0" width="219.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="974.0" y="1054.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (31 samples, 18.56%)</title><rect x="971.0" y="1027.0" width="219.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="974.0" y="1038.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (31 samples, 18.56%)</title><rect x="971.0" y="1011.0" width="219.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.0" y="1022.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::run() (31 samples, 18.56%)</title><rect x="971.0" y="995.0" width="219.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.0" y="1006.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 18.56%)</title><rect x="971.0" y="979.0" width="219.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="974.0" y="990.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 18.56%)</title><rect x="971.0" y="963.0" width="219.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="974.0" y="974.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (29 samples, 17.37%)</title><rect x="971.0" y="947.0" width="204.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.0" y="958.0">C2Compiler::compile_method(..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (29 samples, 17.37%)</title><rect x="971.0" y="931.0" width="204.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.0" y="942.0">Compile::Compile(ciEnv*, C2..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.60%)</title><rect x="971.0" y="915.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.0" y="926.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.60%)</title><rect x="971.0" y="899.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="974.0" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="971.0" y="883.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="971.0" y="867.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="971.0" y="851.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.0" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="971.0" y="835.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.0" y="846.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.60%)</title><rect x="971.0" y="819.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.0" y="830.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 10.18%)</title><rect x="978.0" y="915.0" width="120.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="981.0" y="926.0">Compile::Code_G..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.20%)</title><rect x="978.0" y="899.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.0" y="910.0"></text>
</g>
<g>
<title>CountedLoopNode::Opcode() const (1 samples, 0.60%)</title><rect x="978.0" y="883.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.0" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.60%)</title><rect x="985.1" y="883.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.1" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.60%)</title><rect x="985.1" y="867.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.1" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.60%)</title><rect x="985.1" y="851.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.1" y="862.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.60%)</title><rect x="985.1" y="835.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.20%)</title><rect x="992.2" y="899.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.2" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.20%)</title><rect x="992.2" y="883.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.60%)</title><rect x="992.2" y="867.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.2" y="878.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.60%)</title><rect x="992.2" y="851.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.2" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.60%)</title><rect x="999.2" y="867.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.2" y="878.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.60%)</title><rect x="999.2" y="851.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 7.78%)</title><rect x="1006.3" y="899.0" width="91.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="910.0">PhaseChaiti..</text>
</g>
<g>
<title>MachSpillCopyNode::oper_input_base() const (1 samples, 0.60%)</title><rect x="1006.3" y="883.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.60%)</title><rect x="1013.4" y="883.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.20%)</title><rect x="1020.4" y="883.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 1.20%)</title><rect x="1020.4" y="867.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.4" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="1020.4" y="851.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.4" y="862.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.60%)</title><rect x="1027.5" y="851.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.60%)</title><rect x="1034.6" y="883.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.60%)</title><rect x="1034.6" y="867.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.20%)</title><rect x="1041.6" y="883.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.6" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.60%)</title><rect x="1041.6" y="867.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1044.6" y="878.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.60%)</title><rect x="1048.7" y="867.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (2 samples, 1.20%)</title><rect x="1055.7" y="883.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.7" y="894.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.60%)</title><rect x="1062.8" y="867.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.8" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.60%)</title><rect x="1069.9" y="883.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.9" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.60%)</title><rect x="1069.9" y="867.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.60%)</title><rect x="1069.9" y="851.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.9" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.60%)</title><rect x="1076.9" y="883.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.9" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.60%)</title><rect x="1084.0" y="883.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.0" y="894.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.60%)</title><rect x="1084.0" y="867.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.0" y="878.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.60%)</title><rect x="1091.1" y="883.0" width="7.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1094.1" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 4.79%)</title><rect x="1098.1" y="915.0" width="56.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.1" y="926.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (5 samples, 2.99%)</title><rect x="1098.1" y="899.0" width="35.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.1" y="910.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 2.99%)</title><rect x="1098.1" y="883.0" width="35.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.1" y="894.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.20%)</title><rect x="1098.1" y="867.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.60%)</title><rect x="1112.3" y="867.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.60%)</title><rect x="1119.3" y="867.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.60%)</title><rect x="1126.4" y="867.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1126.4" y="851.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.4" y="862.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.60%)</title><rect x="1126.4" y="835.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="846.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.258] (1 samples, 0.60%)</title><rect x="1133.5" y="899.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.20%)</title><rect x="1140.5" y="899.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.20%)</title><rect x="1140.5" y="883.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.5" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1140.5" y="867.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="878.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.60%)</title><rect x="1140.5" y="851.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.5" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.147] (1 samples, 0.60%)</title><rect x="1140.5" y="835.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.5" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.60%)</title><rect x="1140.5" y="819.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.5" y="830.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.60%)</title><rect x="1147.6" y="867.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1154.7" y="915.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1154.7" y="899.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1154.7" y="883.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1154.7" y="867.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1154.7" y="851.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1154.7" y="835.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1154.7" y="819.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1154.7" y="803.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1154.7" y="787.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1154.7" y="771.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1154.7" y="755.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1154.7" y="739.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.7" y="723.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.7" y="707.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.7" y="691.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.7" y="675.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.7" y="659.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1154.7" y="643.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.7" y="627.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.7" y="611.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.7" y="595.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.7" y="579.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.7" y="563.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1154.7" y="547.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.7" y="531.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.7" y="515.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.7" y="499.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.7" y="483.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.7" y="467.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1154.7" y="451.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.7" y="435.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.7" y="419.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.7" y="403.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.7" y="387.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.7" y="371.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1154.7" y="355.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1154.7" y="339.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1154.7" y="323.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1154.7" y="307.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1154.7" y="291.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1154.7" y="275.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1154.7" y="259.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1154.7" y="243.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1154.7" y="227.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="1154.7" y="211.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="1154.7" y="195.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="1154.7" y="179.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1154.7" y="163.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1154.7" y="147.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="1154.7" y="131.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.60%)</title><rect x="1154.7" y="115.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.60%)</title><rect x="1154.7" y="99.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.7" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1154.7" y="83.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.7" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1154.7" y="67.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1154.7" y="51.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.60%)</title><rect x="1154.7" y="35.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1161.7" y="723.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1161.7" y="707.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1161.7" y="691.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1161.7" y="675.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1161.7" y="659.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1161.7" y="643.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1161.7" y="627.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1161.7" y="611.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1161.7" y="595.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1161.7" y="579.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1161.7" y="563.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.7" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.60%)</title><rect x="1168.8" y="915.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.8" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.60%)</title><rect x="1168.8" y="899.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.8" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.20%)</title><rect x="1175.9" y="947.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 1.20%)</title><rect x="1175.9" y="931.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.20%)</title><rect x="1175.9" y="915.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.20%)</title><rect x="1175.9" y="899.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.60%)</title><rect x="1175.9" y="883.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.60%)</title><rect x="1175.9" y="867.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.60%)</title><rect x="1175.9" y="851.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>non-virtual thunk to UseCountComputer::block_do(BlockBegin*) (1 samples, 0.60%)</title><rect x="1175.9" y="835.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>Op2::input_values_do(ValueVisitor*) (1 samples, 0.60%)</title><rect x="1175.9" y="819.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>Phi::input_values_do(ValueVisitor*) (1 samples, 0.60%)</title><rect x="1175.9" y="803.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.60%)</title><rect x="1182.9" y="883.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.60%)</title><rect x="1182.9" y="867.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.60%)</title><rect x="1182.9" y="851.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.60%)</title><rect x="1182.9" y="835.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.60%)</title><rect x="1182.9" y="819.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.60%)</title><rect x="1182.9" y="803.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.60%)</title><rect x="1182.9" y="787.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.60%)</title><rect x="1182.9" y="771.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
</g>
</svg>
