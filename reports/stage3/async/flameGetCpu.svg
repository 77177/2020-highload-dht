<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (545 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (4 samples, 0.73%)</title><rect x="10.0" y="1011.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.55%)</title><rect x="12.2" y="995.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.2" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 0.37%)</title><rect x="12.2" y="979.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.2" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.18%)</title><rect x="12.2" y="963.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.2" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.18%)</title><rect x="14.3" y="963.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.3" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.18%)</title><rect x="14.3" y="947.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="17.3" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.18%)</title><rect x="16.5" y="979.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.5" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.37%)</title><rect x="18.7" y="1011.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.7" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.37%)</title><rect x="18.7" y="995.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.7" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 0.37%)</title><rect x="18.7" y="979.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.7" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.37%)</title><rect x="18.7" y="963.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.7" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.18%)</title><rect x="18.7" y="947.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="21.7" y="958.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="18.7" y="931.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="21.7" y="942.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="18.7" y="915.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="21.7" y="926.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="18.7" y="899.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="21.7" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.18%)</title><rect x="20.8" y="947.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="23.8" y="958.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.18%)</title><rect x="23.0" y="1011.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="26.0" y="1022.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.18%)</title><rect x="25.2" y="1011.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="28.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.18%)</title><rect x="25.2" y="995.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.18%)</title><rect x="25.2" y="979.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="28.2" y="990.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.18%)</title><rect x="25.2" y="963.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.2" y="974.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.18%)</title><rect x="25.2" y="947.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="28.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.73%)</title><rect x="27.3" y="1011.0" width="8.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="30.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.18%)</title><rect x="27.3" y="995.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="30.3" y="1006.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.18%)</title><rect x="29.5" y="995.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="32.5" y="1006.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.18%)</title><rect x="31.7" y="995.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="34.7" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.18%)</title><rect x="33.8" y="995.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="36.8" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="33.8" y="979.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="36.8" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="33.8" y="963.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="36.8" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="33.8" y="947.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="36.8" y="958.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.18%)</title><rect x="33.8" y="931.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.8" y="942.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.18%)</title><rect x="33.8" y="915.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="36.8" y="926.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.18%)</title><rect x="33.8" y="899.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="36.8" y="910.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.18%)</title><rect x="33.8" y="883.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="36.8" y="894.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.18%)</title><rect x="33.8" y="867.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="36.8" y="878.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.18%)</title><rect x="33.8" y="851.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="36.8" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 1.28%)</title><rect x="36.0" y="1011.0" width="15.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="39.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 1.28%)</title><rect x="36.0" y="995.0" width="15.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="39.0" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.28%)</title><rect x="36.0" y="979.0" width="15.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="39.0" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.28%)</title><rect x="36.0" y="963.0" width="15.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="39.0" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 1.10%)</title><rect x="36.0" y="947.0" width="13.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="39.0" y="958.0"></text>
</g>
<g>
<title>do_futex (6 samples, 1.10%)</title><rect x="36.0" y="931.0" width="13.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="39.0" y="942.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 1.10%)</title><rect x="36.0" y="915.0" width="13.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="39.0" y="926.0"></text>
</g>
<g>
<title>wake_up_q (5 samples, 0.92%)</title><rect x="38.1" y="899.0" width="10.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="41.1" y="910.0"></text>
</g>
<g>
<title>try_to_wake_up (5 samples, 0.92%)</title><rect x="38.1" y="883.0" width="10.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="41.1" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.92%)</title><rect x="38.1" y="867.0" width="10.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="41.1" y="878.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.18%)</title><rect x="49.0" y="947.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="52.0" y="958.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.18%)</title><rect x="49.0" y="931.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="52.0" y="942.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.18%)</title><rect x="49.0" y="915.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="52.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (107 samples, 19.63%)</title><rect x="51.1" y="1011.0" width="231.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.1" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (107 samples, 19.63%)</title><rect x="51.1" y="995.0" width="231.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.1" y="1006.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (107 samples, 19.63%)</title><rect x="51.1" y="979.0" width="231.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.1" y="990.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.18%)</title><rect x="62.0" y="963.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (84 samples, 15.41%)</title><rect x="64.1" y="963.0" width="181.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.1" y="974.0">java/util/concurrent/Fu..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (1 samples, 0.18%)</title><rect x="64.1" y="947.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.18%)</title><rect x="64.1" y="931.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.1" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.18%)</title><rect x="64.1" y="915.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.1" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$66/47798198.call (83 samples, 15.23%)</title><rect x="66.3" y="947.0" width="179.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.3" y="958.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0 (83 samples, 15.23%)</title><rect x="66.3" y="931.0" width="179.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.3" y="942.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (83 samples, 15.23%)</title><rect x="66.3" y="915.0" width="179.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.3" y="926.0">ru/mail/polis/dao/stasy..</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.37%)</title><rect x="68.5" y="899.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="71.5" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="70.6" y="883.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="73.6" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.18%)</title><rect x="70.6" y="867.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="73.6" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.18%)</title><rect x="70.6" y="851.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="73.6" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.18%)</title><rect x="72.8" y="899.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="75.8" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="72.8" y="883.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.8" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.18%)</title><rect x="72.8" y="867.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.8" y="878.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.18%)</title><rect x="72.8" y="851.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="75.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (3 samples, 0.55%)</title><rect x="75.0" y="899.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.0" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.55%)</title><rect x="75.0" y="883.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.0" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.18%)</title><rect x="77.1" y="867.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="80.1" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.18%)</title><rect x="77.1" y="851.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.1" y="862.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.18%)</title><rect x="77.1" y="835.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="80.1" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.18%)</title><rect x="79.3" y="867.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.3" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="79.3" y="851.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="79.3" y="835.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (69 samples, 12.66%)</title><rect x="81.4" y="899.0" width="149.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.4" y="910.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (69 samples, 12.66%)</title><rect x="81.4" y="883.0" width="149.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.4" y="894.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (8 samples, 1.47%)</title><rect x="81.4" y="867.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.4" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (7 samples, 1.28%)</title><rect x="81.4" y="851.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.4" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (5 samples, 0.92%)</title><rect x="81.4" y="835.0" width="10.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="84.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (5 samples, 0.92%)</title><rect x="81.4" y="819.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="84.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (5 samples, 0.92%)</title><rect x="81.4" y="803.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="84.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::SetIterUnderDBIter(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.18%)</title><rect x="81.4" y="787.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="84.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (2 samples, 0.37%)</title><rect x="83.6" y="787.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="86.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::AddIterator(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.18%)</title><rect x="83.6" y="771.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="86.6" y="782.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (1 samples, 0.18%)</title><rect x="85.8" y="771.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="88.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (2 samples, 0.37%)</title><rect x="87.9" y="787.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="90.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::ForwardRangeDelIterator::ForwardRangeDelIterator(rocksdb::InternalKeyComparator const*) (1 samples, 0.18%)</title><rect x="87.9" y="771.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="90.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::ReverseRangeDelIterator::ReverseRangeDelIterator(rocksdb::InternalKeyComparator const*) [clone .plt] (1 samples, 0.18%)</title><rect x="90.1" y="771.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="93.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="92.3" y="835.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="95.3" y="846.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.18%)</title><rect x="92.3" y="819.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="95.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.18%)</title><rect x="94.4" y="835.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.4" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="851.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.6" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="835.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="819.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.6" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="803.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="787.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.18%)</title><rect x="96.6" y="771.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.18%)</title><rect x="96.6" y="755.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="99.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.18%)</title><rect x="96.6" y="739.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="99.6" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.18%)</title><rect x="96.6" y="723.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="99.6" y="734.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.18%)</title><rect x="96.6" y="707.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="99.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (54 samples, 9.91%)</title><rect x="98.8" y="867.0" width="116.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.8" y="878.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (54 samples, 9.91%)</title><rect x="98.8" y="851.0" width="116.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.8" y="862.0">org/rocksdb/Ab..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (54 samples, 9.91%)</title><rect x="98.8" y="835.0" width="116.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.8" y="846.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (31 samples, 5.69%)</title><rect x="98.8" y="819.0" width="67.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="101.8" y="830.0">Java_or..</text>
</g>
<g>
<title>jni_GetByteArrayElements (1 samples, 0.18%)</title><rect x="98.8" y="803.0" width="2.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="101.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (29 samples, 5.32%)</title><rect x="100.9" y="803.0" width="62.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="103.9" y="814.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (29 samples, 5.32%)</title><rect x="100.9" y="787.0" width="62.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="103.9" y="798.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (28 samples, 5.14%)</title><rect x="100.9" y="771.0" width="60.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="103.9" y="782.0">/tmp/l..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (28 samples, 5.14%)</title><rect x="100.9" y="755.0" width="60.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.9" y="766.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (27 samples, 4.95%)</title><rect x="103.1" y="739.0" width="58.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.1" y="750.0">rocksd..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (27 samples, 4.95%)</title><rect x="103.1" y="723.0" width="58.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="106.1" y="734.0">rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (9 samples, 1.65%)</title><rect x="105.3" y="707.0" width="19.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="108.3" y="718.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 1.65%)</title><rect x="105.3" y="691.0" width="19.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="108.3" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="107.4" y="675.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.4" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="109.6" y="675.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="112.6" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 1.10%)</title><rect x="111.8" y="675.0" width="13.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="114.8" y="686.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.18%)</title><rect x="111.8" y="659.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.8" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.73%)</title><rect x="113.9" y="659.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="116.9" y="670.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.18%)</title><rect x="113.9" y="643.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="116.9" y="654.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.55%)</title><rect x="116.1" y="643.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="119.1" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.18%)</title><rect x="122.6" y="659.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="125.6" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (11 samples, 2.02%)</title><rect x="124.8" y="707.0" width="23.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="127.8" y="718.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (11 samples, 2.02%)</title><rect x="124.8" y="691.0" width="23.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="127.8" y="702.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.18%)</title><rect x="124.8" y="675.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="127.8" y="686.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.18%)</title><rect x="126.9" y="675.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="129.9" y="686.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="129.1" y="675.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="132.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="131.2" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="134.2" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (7 samples, 1.28%)</title><rect x="133.4" y="675.0" width="15.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="136.4" y="686.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.18%)</title><rect x="133.4" y="659.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="136.4" y="670.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="135.6" y="659.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="138.6" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.55%)</title><rect x="137.7" y="659.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="140.7" y="670.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.18%)</title><rect x="139.9" y="643.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="142.9" y="654.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.18%)</title><rect x="142.1" y="643.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="145.1" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.18%)</title><rect x="144.2" y="659.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="147.2" y="670.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.18%)</title><rect x="146.4" y="659.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="149.4" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.73%)</title><rect x="148.6" y="707.0" width="8.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="151.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.73%)</title><rect x="148.6" y="691.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="151.6" y="702.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.18%)</title><rect x="157.2" y="707.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="160.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.18%)</title><rect x="159.4" y="707.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="162.4" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="159.4" y="691.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="162.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.18%)</title><rect x="161.6" y="771.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="164.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (1 samples, 0.18%)</title><rect x="163.7" y="803.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.7" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 0.55%)</title><rect x="165.9" y="819.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (20 samples, 3.67%)</title><rect x="172.4" y="819.0" width="43.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="175.4" y="830.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (20 samples, 3.67%)</title><rect x="172.4" y="803.0" width="43.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.4" y="814.0">ru/m..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.18%)</title><rect x="174.6" y="787.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.6" y="798.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.18%)</title><rect x="174.6" y="771.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.6" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (18 samples, 3.30%)</title><rect x="176.7" y="787.0" width="39.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.7" y="798.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.37%)</title><rect x="176.7" y="771.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.7" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (16 samples, 2.94%)</title><rect x="181.0" y="771.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.0" y="782.0">or..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (16 samples, 2.94%)</title><rect x="181.0" y="755.0" width="34.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.0" y="766.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (13 samples, 2.39%)</title><rect x="185.4" y="739.0" width="28.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="188.4" y="750.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.18%)</title><rect x="185.4" y="723.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="188.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="187.5" y="723.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="190.5" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.73%)</title><rect x="189.7" y="723.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="192.7" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.55%)</title><rect x="189.7" y="707.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="192.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="196.2" y="707.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.2" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (7 samples, 1.28%)</title><rect x="198.4" y="723.0" width="15.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="201.4" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.18%)</title><rect x="200.5" y="707.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="203.5" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.92%)</title><rect x="202.7" y="707.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="205.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.73%)</title><rect x="202.7" y="691.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="205.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.18%)</title><rect x="202.7" y="675.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="205.7" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.37%)</title><rect x="204.9" y="675.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="207.9" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.18%)</title><rect x="207.0" y="659.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="210.0" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="209.2" y="675.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="212.2" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.18%)</title><rect x="211.4" y="691.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="214.4" y="702.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.18%)</title><rect x="213.5" y="739.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="216.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (7 samples, 1.28%)</title><rect x="215.7" y="867.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.7" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (7 samples, 1.28%)</title><rect x="215.7" y="851.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (7 samples, 1.28%)</title><rect x="215.7" y="835.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.7" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (7 samples, 1.28%)</title><rect x="215.7" y="819.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (6 samples, 1.10%)</title><rect x="217.9" y="803.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="220.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (4 samples, 0.73%)</title><rect x="220.0" y="787.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="223.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 0.55%)</title><rect x="220.0" y="771.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="223.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.18%)</title><rect x="224.3" y="755.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="227.3" y="766.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;unsigned long&gt;*) [clone .plt] (1 samples, 0.18%)</title><rect x="226.5" y="771.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="229.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (1 samples, 0.18%)</title><rect x="228.7" y="787.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="231.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 1.28%)</title><rect x="230.8" y="899.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.8" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 1.28%)</title><rect x="230.8" y="883.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.8" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (6 samples, 1.10%)</title><rect x="230.8" y="867.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.8" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (6 samples, 1.10%)</title><rect x="230.8" y="851.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (6 samples, 1.10%)</title><rect x="230.8" y="835.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="233.8" y="846.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (1 samples, 0.18%)</title><rect x="233.0" y="819.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="236.0" y="830.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.18%)</title><rect x="235.2" y="819.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="238.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (3 samples, 0.55%)</title><rect x="237.3" y="819.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="240.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.55%)</title><rect x="237.3" y="803.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="240.3" y="814.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.37%)</title><rect x="237.3" y="787.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="240.3" y="798.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.37%)</title><rect x="237.3" y="771.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="240.3" y="782.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.18%)</title><rect x="237.3" y="755.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="240.3" y="766.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.18%)</title><rect x="239.5" y="755.0" width="2.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="242.5" y="766.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="239.5" y="739.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="242.5" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="241.7" y="787.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="244.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.18%)</title><rect x="243.8" y="867.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.8" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="243.8" y="851.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.8" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="243.8" y="835.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.8" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="243.8" y="819.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="243.8" y="803.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.8" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="243.8" y="787.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.18%)</title><rect x="243.8" y="771.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 2.94%)</title><rect x="246.0" y="963.0" width="34.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 2.75%)</title><rect x="246.0" y="947.0" width="32.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.0" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 2.20%)</title><rect x="246.0" y="931.0" width="26.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="942.0">j..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.18%)</title><rect x="246.0" y="915.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 2.02%)</title><rect x="248.2" y="915.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.2" y="926.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 2.02%)</title><rect x="248.2" y="899.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.2" y="910.0">j..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.18%)</title><rect x="248.2" y="883.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="251.2" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.55%)</title><rect x="250.3" y="883.0" width="6.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="253.3" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.18%)</title><rect x="250.3" y="867.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="253.3" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.18%)</title><rect x="252.5" y="867.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="255.5" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.18%)</title><rect x="254.7" y="867.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="257.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 1.28%)</title><rect x="256.8" y="883.0" width="15.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="259.8" y="894.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (7 samples, 1.28%)</title><rect x="256.8" y="867.0" width="15.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="259.8" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.10%)</title><rect x="259.0" y="851.0" width="13.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="262.0" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 1.10%)</title><rect x="259.0" y="835.0" width="13.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="262.0" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.73%)</title><rect x="261.2" y="819.0" width="8.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="264.2" y="830.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.73%)</title><rect x="261.2" y="803.0" width="8.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="264.2" y="814.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.73%)</title><rect x="261.2" y="787.0" width="8.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="264.2" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.37%)</title><rect x="263.3" y="771.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="266.3" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.18%)</title><rect x="265.5" y="755.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="268.5" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.18%)</title><rect x="265.5" y="739.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="268.5" y="750.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.18%)</title><rect x="267.7" y="771.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="270.7" y="782.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.18%)</title><rect x="269.8" y="819.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="272.8" y="830.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.18%)</title><rect x="269.8" y="803.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="272.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.18%)</title><rect x="272.0" y="931.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.18%)</title><rect x="272.0" y="915.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.18%)</title><rect x="272.0" y="899.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.18%)</title><rect x="272.0" y="883.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.37%)</title><rect x="274.1" y="931.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.37%)</title><rect x="274.1" y="915.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.37%)</title><rect x="274.1" y="899.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.37%)</title><rect x="274.1" y="883.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.1" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.37%)</title><rect x="274.1" y="867.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.1" y="878.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.18%)</title><rect x="274.1" y="851.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="277.1" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.18%)</title><rect x="274.1" y="835.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="277.1" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.18%)</title><rect x="276.3" y="851.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="279.3" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="276.3" y="835.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="279.3" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="276.3" y="819.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="279.3" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="276.3" y="803.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="279.3" y="814.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.18%)</title><rect x="276.3" y="787.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="279.3" y="798.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.18%)</title><rect x="276.3" y="771.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="279.3" y="782.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.18%)</title><rect x="276.3" y="755.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="279.3" y="766.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.18%)</title><rect x="276.3" y="739.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="279.3" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.18%)</title><rect x="276.3" y="723.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="279.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.18%)</title><rect x="278.5" y="947.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.18%)</title><rect x="280.6" y="963.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer$FinalizerThread.run (1 samples, 0.18%)</title><rect x="282.8" y="1011.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.18%)</title><rect x="282.8" y="995.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.18%)</title><rect x="285.0" y="1011.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (369 samples, 67.71%)</title><rect x="287.1" y="1011.0" width="799.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.1" y="1022.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (11 samples, 2.02%)</title><rect x="295.8" y="995.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.8" y="1006.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 2.02%)</title><rect x="295.8" y="979.0" width="23.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.8" y="990.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.18%)</title><rect x="298.0" y="963.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="301.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 1.47%)</title><rect x="300.1" y="963.0" width="17.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="303.1" y="974.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 1.47%)</title><rect x="300.1" y="947.0" width="17.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="303.1" y="958.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.28%)</title><rect x="302.3" y="931.0" width="15.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="305.3" y="942.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.28%)</title><rect x="302.3" y="915.0" width="15.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="305.3" y="926.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (6 samples, 1.10%)</title><rect x="302.3" y="899.0" width="13.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="305.3" y="910.0"></text>
</g>
<g>
<title>do_epoll_wait (6 samples, 1.10%)</title><rect x="302.3" y="883.0" width="13.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="305.3" y="894.0"></text>
</g>
<g>
<title>ep_poll (6 samples, 1.10%)</title><rect x="302.3" y="867.0" width="13.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="305.3" y="878.0"></text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.18%)</title><rect x="306.6" y="851.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="309.6" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 0.55%)</title><rect x="308.8" y="851.0" width="6.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="311.8" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.55%)</title><rect x="308.8" y="835.0" width="6.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="311.8" y="846.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.18%)</title><rect x="313.1" y="819.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="316.1" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.18%)</title><rect x="313.1" y="803.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="316.1" y="814.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.18%)</title><rect x="313.1" y="787.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="316.1" y="798.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.18%)</title><rect x="315.3" y="899.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="318.3" y="910.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.18%)</title><rect x="317.4" y="963.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="320.4" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (354 samples, 64.95%)</title><rect x="319.6" y="995.0" width="766.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.6" y="1006.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (354 samples, 64.95%)</title><rect x="319.6" y="979.0" width="766.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.6" y="990.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (351 samples, 64.40%)</title><rect x="321.8" y="963.0" width="759.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.8" y="974.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (349 samples, 64.04%)</title><rect x="321.8" y="947.0" width="755.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.8" y="958.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (349 samples, 64.04%)</title><rect x="321.8" y="931.0" width="755.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="942.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (348 samples, 63.85%)</title><rect x="321.8" y="915.0" width="753.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.8" y="926.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (28 samples, 5.14%)</title><rect x="321.8" y="899.0" width="60.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.8" y="910.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.18%)</title><rect x="321.8" y="883.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.18%)</title><rect x="321.8" y="867.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.8" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.18%)</title><rect x="321.8" y="851.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (26 samples, 4.77%)</title><rect x="323.9" y="883.0" width="56.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.9" y="894.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 4.77%)</title><rect x="323.9" y="867.0" width="56.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.9" y="878.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 4.77%)</title><rect x="323.9" y="851.0" width="56.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.9" y="862.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 4.77%)</title><rect x="323.9" y="835.0" width="56.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.9" y="846.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (26 samples, 4.77%)</title><rect x="323.9" y="819.0" width="56.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.9" y="830.0">one/ni..</text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.18%)</title><rect x="323.9" y="803.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="326.9" y="814.0"></text>
</g>
<g>
<title>__libc_send (24 samples, 4.40%)</title><rect x="326.1" y="803.0" width="52.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="329.1" y="814.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 4.22%)</title><rect x="328.3" y="787.0" width="49.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="331.3" y="798.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (23 samples, 4.22%)</title><rect x="328.3" y="771.0" width="49.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="331.3" y="782.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_sendto (23 samples, 4.22%)</title><rect x="328.3" y="755.0" width="49.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="331.3" y="766.0">__x64..</text>
</g>
<g>
<title>__sys_sendto (23 samples, 4.22%)</title><rect x="328.3" y="739.0" width="49.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="331.3" y="750.0">__sys..</text>
</g>
<g>
<title>sock_sendmsg (23 samples, 4.22%)</title><rect x="328.3" y="723.0" width="49.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.3" y="734.0">sock_..</text>
</g>
<g>
<title>inet6_sendmsg (23 samples, 4.22%)</title><rect x="328.3" y="707.0" width="49.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="331.3" y="718.0">inet6..</text>
</g>
<g>
<title>tcp_sendmsg (23 samples, 4.22%)</title><rect x="328.3" y="691.0" width="49.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="331.3" y="702.0">tcp_s..</text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.18%)</title><rect x="328.3" y="675.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.3" y="686.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (21 samples, 3.85%)</title><rect x="330.4" y="675.0" width="45.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="333.4" y="686.0">tcp_..</text>
</g>
<g>
<title>tcp_push (20 samples, 3.67%)</title><rect x="332.6" y="659.0" width="43.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.6" y="670.0">tcp_..</text>
</g>
<g>
<title>__tcp_push_pending_frames (20 samples, 3.67%)</title><rect x="332.6" y="643.0" width="43.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="335.6" y="654.0">__tc..</text>
</g>
<g>
<title>tcp_write_xmit (20 samples, 3.67%)</title><rect x="332.6" y="627.0" width="43.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="335.6" y="638.0">tcp_..</text>
</g>
<g>
<title>__tcp_transmit_skb (18 samples, 3.30%)</title><rect x="332.6" y="611.0" width="39.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="335.6" y="622.0">__t..</text>
</g>
<g>
<title>ip_queue_xmit (17 samples, 3.12%)</title><rect x="332.6" y="595.0" width="36.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="335.6" y="606.0">ip_..</text>
</g>
<g>
<title>__ip_queue_xmit (17 samples, 3.12%)</title><rect x="332.6" y="579.0" width="36.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="335.6" y="590.0">__i..</text>
</g>
<g>
<title>ip_local_out (17 samples, 3.12%)</title><rect x="332.6" y="563.0" width="36.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="335.6" y="574.0">ip_..</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.73%)</title><rect x="332.6" y="547.0" width="8.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.6" y="558.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 0.73%)</title><rect x="332.6" y="531.0" width="8.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.6" y="542.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (4 samples, 0.73%)</title><rect x="332.6" y="515.0" width="8.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.6" y="526.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (4 samples, 0.73%)</title><rect x="332.6" y="499.0" width="8.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="335.6" y="510.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.18%)</title><rect x="332.6" y="483.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.6" y="494.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (3 samples, 0.55%)</title><rect x="334.8" y="483.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="337.8" y="494.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (1 samples, 0.18%)</title><rect x="339.1" y="467.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="342.1" y="478.0"></text>
</g>
<g>
<title>ip_output (13 samples, 2.39%)</title><rect x="341.3" y="547.0" width="28.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="344.3" y="558.0">ip..</text>
</g>
<g>
<title>ip_finish_output (13 samples, 2.39%)</title><rect x="341.3" y="531.0" width="28.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="344.3" y="542.0">ip..</text>
</g>
<g>
<title>__ip_finish_output (12 samples, 2.20%)</title><rect x="343.4" y="515.0" width="26.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="346.4" y="526.0">_..</text>
</g>
<g>
<title>ip_finish_output2 (12 samples, 2.20%)</title><rect x="343.4" y="499.0" width="26.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="346.4" y="510.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (12 samples, 2.20%)</title><rect x="343.4" y="483.0" width="26.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="346.4" y="494.0">_..</text>
</g>
<g>
<title>do_softirq.part.20 (12 samples, 2.20%)</title><rect x="343.4" y="467.0" width="26.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="346.4" y="478.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (12 samples, 2.20%)</title><rect x="343.4" y="451.0" width="26.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="346.4" y="462.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 2.20%)</title><rect x="343.4" y="435.0" width="26.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="346.4" y="446.0">_..</text>
</g>
<g>
<title>net_rx_action (12 samples, 2.20%)</title><rect x="343.4" y="419.0" width="26.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="346.4" y="430.0">n..</text>
</g>
<g>
<title>process_backlog (12 samples, 2.20%)</title><rect x="343.4" y="403.0" width="26.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="346.4" y="414.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (12 samples, 2.20%)</title><rect x="343.4" y="387.0" width="26.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="346.4" y="398.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (12 samples, 2.20%)</title><rect x="343.4" y="371.0" width="26.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="346.4" y="382.0">_..</text>
</g>
<g>
<title>ip_rcv (12 samples, 2.20%)</title><rect x="343.4" y="355.0" width="26.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="346.4" y="366.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (11 samples, 2.02%)</title><rect x="343.4" y="339.0" width="23.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="346.4" y="350.0">i..</text>
</g>
<g>
<title>ip_local_deliver (11 samples, 2.02%)</title><rect x="343.4" y="323.0" width="23.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="346.4" y="334.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (11 samples, 2.02%)</title><rect x="343.4" y="307.0" width="23.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="346.4" y="318.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (11 samples, 2.02%)</title><rect x="343.4" y="291.0" width="23.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="346.4" y="302.0">i..</text>
</g>
<g>
<title>sock_put (1 samples, 0.18%)</title><rect x="343.4" y="275.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="346.4" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 1.83%)</title><rect x="345.6" y="275.0" width="21.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="348.6" y="286.0">t..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.18%)</title><rect x="345.6" y="259.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="348.6" y="270.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.18%)</title><rect x="345.6" y="243.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="348.6" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (9 samples, 1.65%)</title><rect x="347.8" y="259.0" width="19.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="350.8" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (9 samples, 1.65%)</title><rect x="347.8" y="243.0" width="19.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="350.8" y="254.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.18%)</title><rect x="347.8" y="227.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="350.8" y="238.0"></text>
</g>
<g>
<title>tcp_send_ack (1 samples, 0.18%)</title><rect x="347.8" y="211.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="350.8" y="222.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.46 (1 samples, 0.18%)</title><rect x="347.8" y="195.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="350.8" y="206.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.18%)</title><rect x="347.8" y="179.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="350.8" y="190.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.18%)</title><rect x="347.8" y="163.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="350.8" y="174.0"></text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.18%)</title><rect x="347.8" y="147.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="350.8" y="158.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.55%)</title><rect x="349.9" y="227.0" width="6.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="352.9" y="238.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.18%)</title><rect x="354.3" y="211.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="357.3" y="222.0"></text>
</g>
<g>
<title>tcp_data_ready (5 samples, 0.92%)</title><rect x="356.4" y="227.0" width="10.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="359.4" y="238.0"></text>
</g>
<g>
<title>sock_def_readable (5 samples, 0.92%)</title><rect x="356.4" y="211.0" width="10.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="359.4" y="222.0"></text>
</g>
<g>
<title>__wake_up_sync_key (5 samples, 0.92%)</title><rect x="356.4" y="195.0" width="10.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="359.4" y="206.0"></text>
</g>
<g>
<title>__wake_up_common_lock (5 samples, 0.92%)</title><rect x="356.4" y="179.0" width="10.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="359.4" y="190.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.92%)</title><rect x="356.4" y="163.0" width="10.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="359.4" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.18%)</title><rect x="367.2" y="339.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="370.2" y="350.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.18%)</title><rect x="369.4" y="595.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="372.4" y="606.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.18%)</title><rect x="369.4" y="579.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="372.4" y="590.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.18%)</title><rect x="371.6" y="611.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="374.6" y="622.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.18%)</title><rect x="371.6" y="595.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="374.6" y="606.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.18%)</title><rect x="373.7" y="611.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="376.7" y="622.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.18%)</title><rect x="375.9" y="675.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="378.9" y="686.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.18%)</title><rect x="378.1" y="803.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="381.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.18%)</title><rect x="380.2" y="883.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="380.2" y="867.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.2" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.18%)</title><rect x="382.4" y="899.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.18%)</title><rect x="382.4" y="883.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.18%)</title><rect x="382.4" y="867.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.18%)</title><rect x="382.4" y="851.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.4" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.18%)</title><rect x="382.4" y="835.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="385.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (319 samples, 58.53%)</title><rect x="384.6" y="899.0" width="690.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.6" y="910.0">ru/mail/polis/service/stasyanoi/CustomServer.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.18%)</title><rect x="910.7" y="883.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.7" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.18%)</title><rect x="910.7" y="867.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="913.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$66/47798198.get$Lambda (1 samples, 0.18%)</title><rect x="910.7" y="851.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="913.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (5 samples, 0.92%)</title><rect x="912.9" y="883.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="915.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.92%)</title><rect x="912.9" y="867.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.73%)</title><rect x="915.0" y="851.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.73%)</title><rect x="915.0" y="835.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="918.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.73%)</title><rect x="915.0" y="819.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="918.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.73%)</title><rect x="915.0" y="803.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.73%)</title><rect x="915.0" y="787.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="918.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.73%)</title><rect x="915.0" y="771.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.73%)</title><rect x="915.0" y="755.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="918.0" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.55%)</title><rect x="915.0" y="739.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="918.0" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.55%)</title><rect x="915.0" y="723.0" width="6.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="918.0" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.55%)</title><rect x="915.0" y="707.0" width="6.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="918.0" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.55%)</title><rect x="915.0" y="691.0" width="6.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="918.0" y="702.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.55%)</title><rect x="915.0" y="675.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="918.0" y="686.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.55%)</title><rect x="915.0" y="659.0" width="6.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="918.0" y="670.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.55%)</title><rect x="915.0" y="643.0" width="6.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="918.0" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.55%)</title><rect x="915.0" y="627.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="918.0" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.55%)</title><rect x="915.0" y="611.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="918.0" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="921.5" y="739.0" width="2.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="924.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.isDone (2 samples, 0.37%)</title><rect x="923.7" y="883.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.7" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (66 samples, 12.11%)</title><rect x="928.0" y="883.0" width="142.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.0" y="894.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="928.0" y="867.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.0" y="878.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.18%)</title><rect x="930.2" y="867.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (1 samples, 0.18%)</title><rect x="932.3" y="867.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="935.3" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (60 samples, 11.01%)</title><rect x="934.5" y="867.0" width="129.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="937.5" y="878.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (60 samples, 11.01%)</title><rect x="934.5" y="851.0" width="129.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="937.5" y="862.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (8 samples, 1.47%)</title><rect x="936.7" y="835.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="939.7" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (8 samples, 1.47%)</title><rect x="936.7" y="819.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.7" y="830.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (6 samples, 1.10%)</title><rect x="936.7" y="803.0" width="13.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="939.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (6 samples, 1.10%)</title><rect x="936.7" y="787.0" width="13.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (6 samples, 1.10%)</title><rect x="936.7" y="771.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::SetIterUnderDBIter(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.18%)</title><rect x="936.7" y="755.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.18%)</title><rect x="938.8" y="755.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (3 samples, 0.55%)</title><rect x="941.0" y="755.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="944.0" y="766.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (2 samples, 0.37%)</title><rect x="941.0" y="739.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="944.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::AddIterator(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.18%)</title><rect x="945.3" y="739.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::Finish() (1 samples, 0.18%)</title><rect x="947.5" y="755.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.5" y="766.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.18%)</title><rect x="949.7" y="803.0" width="2.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="952.7" y="814.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) (1 samples, 0.18%)</title><rect x="951.8" y="803.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (46 samples, 8.44%)</title><rect x="954.0" y="835.0" width="99.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.0" y="846.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (46 samples, 8.44%)</title><rect x="954.0" y="819.0" width="99.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="957.0" y="830.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (46 samples, 8.44%)</title><rect x="954.0" y="803.0" width="99.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="957.0" y="814.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (31 samples, 5.69%)</title><rect x="954.0" y="787.0" width="67.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="957.0" y="798.0">Java_or..</text>
</g>
<g>
<title>free@plt (1 samples, 0.18%)</title><rect x="954.0" y="771.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="957.0" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayElements (2 samples, 0.37%)</title><rect x="956.2" y="771.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="959.2" y="782.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.18%)</title><rect x="956.2" y="755.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="959.2" y="766.0"></text>
</g>
<g>
<title>malloc@plt (1 samples, 0.18%)</title><rect x="958.3" y="755.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="961.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (28 samples, 5.14%)</title><rect x="960.5" y="771.0" width="60.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.5" y="782.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (28 samples, 5.14%)</title><rect x="960.5" y="755.0" width="60.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.5" y="766.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (28 samples, 5.14%)</title><rect x="960.5" y="739.0" width="60.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="963.5" y="750.0">/tmp/l..</text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.18%)</title><rect x="960.5" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (27 samples, 4.95%)</title><rect x="962.7" y="723.0" width="58.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.7" y="734.0">rocksd..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.18%)</title><rect x="962.7" y="707.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 4.77%)</title><rect x="964.8" y="707.0" width="56.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.8" y="718.0">rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.18%)</title><rect x="964.8" y="691.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (24 samples, 4.40%)</title><rect x="967.0" y="691.0" width="52.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="702.0">rocks..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.73%)</title><rect x="969.2" y="675.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.2" y="686.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.73%)</title><rect x="969.2" y="659.0" width="8.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="972.2" y="670.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.18%)</title><rect x="969.2" y="643.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.2" y="654.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.55%)</title><rect x="971.3" y="643.0" width="6.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="974.3" y="654.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.55%)</title><rect x="971.3" y="627.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="974.3" y="638.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.18%)</title><rect x="971.3" y="611.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.3" y="622.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.37%)</title><rect x="973.5" y="611.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.5" y="622.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (15 samples, 2.75%)</title><rect x="977.8" y="675.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.8" y="686.0">JN..</text>
</g>
<g>
<title>jni_CallVoidMethodV (15 samples, 2.75%)</title><rect x="977.8" y="659.0" width="32.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="980.8" y="670.0">jn..</text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.37%)</title><rect x="982.1" y="643.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="986.5" y="643.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.5" y="654.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (10 samples, 1.83%)</title><rect x="988.6" y="643.0" width="21.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="991.6" y="654.0">j..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.18%)</title><rect x="997.3" y="627.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.3" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.73%)</title><rect x="999.5" y="627.0" width="8.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.5" y="638.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.55%)</title><rect x="1001.6" y="611.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.6" y="622.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.37%)</title><rect x="1003.8" y="595.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.8" y="606.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.18%)</title><rect x="1008.1" y="627.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.1" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.55%)</title><rect x="1010.3" y="675.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1013.3" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.55%)</title><rect x="1010.3" y="659.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.3" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.18%)</title><rect x="1016.8" y="675.0" width="2.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1019.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.18%)</title><rect x="1019.0" y="691.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.0" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.18%)</title><rect x="1021.1" y="787.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1024.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (14 samples, 2.57%)</title><rect x="1023.3" y="787.0" width="30.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.3" y="798.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (14 samples, 2.57%)</title><rect x="1023.3" y="771.0" width="30.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.3" y="782.0">ru..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (14 samples, 2.57%)</title><rect x="1023.3" y="755.0" width="30.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.3" y="766.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.18%)</title><rect x="1023.3" y="739.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.3" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (13 samples, 2.39%)</title><rect x="1025.4" y="739.0" width="28.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1028.4" y="750.0">or..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (13 samples, 2.39%)</title><rect x="1025.4" y="723.0" width="28.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.4" y="734.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (13 samples, 2.39%)</title><rect x="1025.4" y="707.0" width="28.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1028.4" y="718.0">Ja..</text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.73%)</title><rect x="1025.4" y="691.0" width="8.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1028.4" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.18%)</title><rect x="1027.6" y="675.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.6" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="1029.8" y="675.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="1031.9" y="675.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.9" y="686.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.92%)</title><rect x="1034.1" y="691.0" width="10.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1037.1" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.18%)</title><rect x="1034.1" y="675.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="1036.3" y="675.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.3" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.55%)</title><rect x="1038.4" y="675.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.55%)</title><rect x="1038.4" y="659.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.4" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.55%)</title><rect x="1038.4" y="643.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1041.4" y="654.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.18%)</title><rect x="1042.8" y="627.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.8" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.55%)</title><rect x="1044.9" y="691.0" width="6.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1047.9" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="1044.9" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="1047.1" y="675.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.1" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.18%)</title><rect x="1049.3" y="675.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1052.3" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.18%)</title><rect x="1051.4" y="691.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (5 samples, 0.92%)</title><rect x="1053.6" y="835.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (5 samples, 0.92%)</title><rect x="1053.6" y="819.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1056.6" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (5 samples, 0.92%)</title><rect x="1053.6" y="803.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.6" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (5 samples, 0.92%)</title><rect x="1053.6" y="787.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1056.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (5 samples, 0.92%)</title><rect x="1053.6" y="771.0" width="10.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::Arena::~Arena() (1 samples, 0.18%)</title><rect x="1055.8" y="755.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (3 samples, 0.55%)</title><rect x="1057.9" y="755.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 0.55%)</title><rect x="1057.9" y="739.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.9" y="750.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (1 samples, 0.18%)</title><rect x="1060.1" y="723.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1063.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.18%)</title><rect x="1062.3" y="723.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.3" y="734.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni4896020811232354253.so (1 samples, 0.18%)</title><rect x="1062.3" y="707.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1065.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.hasNext (1 samples, 0.18%)</title><rect x="1064.4" y="867.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.4" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.isValid (1 samples, 0.18%)</title><rect x="1064.4" y="851.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.4" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.isValid0 (1 samples, 0.18%)</title><rect x="1064.4" y="835.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1067.4" y="846.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_isValid0 (1 samples, 0.18%)</title><rect x="1064.4" y="819.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1067.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.37%)</title><rect x="1066.6" y="867.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1069.6" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.37%)</title><rect x="1066.6" y="851.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1069.6" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (1 samples, 0.18%)</title><rect x="1066.6" y="835.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (1 samples, 0.18%)</title><rect x="1066.6" y="819.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (1 samples, 0.18%)</title><rect x="1066.6" y="803.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.18%)</title><rect x="1066.6" y="787.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.18%)</title><rect x="1066.6" y="771.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.6" y="782.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.18%)</title><rect x="1066.6" y="755.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.6" y="766.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.18%)</title><rect x="1066.6" y="739.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1069.6" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="1066.6" y="723.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.18%)</title><rect x="1068.8" y="835.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="1068.8" y="819.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1071.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="1068.8" y="803.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.18%)</title><rect x="1068.8" y="787.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1071.8" y="798.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.18%)</title><rect x="1068.8" y="771.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1071.8" y="782.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.18%)</title><rect x="1068.8" y="755.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1071.8" y="766.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.18%)</title><rect x="1068.8" y="739.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1071.8" y="750.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.18%)</title><rect x="1068.8" y="723.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1071.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (2 samples, 0.37%)</title><rect x="1070.9" y="883.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.37%)</title><rect x="1070.9" y="867.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.37%)</title><rect x="1070.9" y="851.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1073.9" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.37%)</title><rect x="1070.9" y="835.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1073.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.37%)</title><rect x="1070.9" y="819.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.9" y="830.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (1 samples, 0.18%)</title><rect x="1075.2" y="915.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.2" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.18%)</title><rect x="1075.2" y="899.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.18%)</title><rect x="1075.2" y="883.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="1075.2" y="867.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.18%)</title><rect x="1075.2" y="851.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.2" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="1075.2" y="835.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1078.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.37%)</title><rect x="1077.4" y="947.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.4" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.37%)</title><rect x="1077.4" y="931.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1080.4" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.37%)</title><rect x="1077.4" y="915.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1080.4" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.37%)</title><rect x="1081.7" y="963.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1084.7" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.37%)</title><rect x="1081.7" y="947.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1084.7" y="958.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.18%)</title><rect x="1081.7" y="931.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1084.7" y="942.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.18%)</title><rect x="1081.7" y="915.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1084.7" y="926.0"></text>
</g>
<g>
<title>__GI___recv (1 samples, 0.18%)</title><rect x="1083.9" y="931.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1086.9" y="942.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="1083.9" y="915.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1086.9" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="1083.9" y="899.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1086.9" y="910.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (1 samples, 0.18%)</title><rect x="1083.9" y="883.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1086.9" y="894.0"></text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.18%)</title><rect x="1083.9" y="867.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1086.9" y="878.0"></text>
</g>
<g>
<title>sock_recvmsg (1 samples, 0.18%)</title><rect x="1083.9" y="851.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1086.9" y="862.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.18%)</title><rect x="1083.9" y="835.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1086.9" y="846.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.18%)</title><rect x="1083.9" y="819.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1086.9" y="830.0"></text>
</g>
<g>
<title>start_thread (48 samples, 8.81%)</title><rect x="1086.1" y="1011.0" width="103.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1089.1" y="1022.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 8.81%)</title><rect x="1086.1" y="995.0" width="103.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1089.1" y="1006.0">thread_nativ..</text>
</g>
<g>
<title>Thread::call_run() (48 samples, 8.81%)</title><rect x="1086.1" y="979.0" width="103.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.1" y="990.0">Thread::call..</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 1.28%)</title><rect x="1086.1" y="963.0" width="15.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.1" y="974.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (7 samples, 1.28%)</title><rect x="1086.1" y="947.0" width="15.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.1" y="958.0"></text>
</g>
<g>
<title>RefProcPhase3Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (7 samples, 1.28%)</title><rect x="1086.1" y="931.0" width="15.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.1" y="942.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&amp;, OopClosure*, VoidClosure*) (7 samples, 1.28%)</title><rect x="1086.1" y="915.0" width="15.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.1" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 1.28%)</title><rect x="1086.1" y="899.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.1" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.37%)</title><rect x="1088.2" y="883.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.2" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.37%)</title><rect x="1088.2" y="867.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.2" y="878.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.18%)</title><rect x="1088.2" y="851.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1091.2" y="862.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.18%)</title><rect x="1088.2" y="835.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1091.2" y="846.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.18%)</title><rect x="1088.2" y="819.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1091.2" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.18%)</title><rect x="1090.4" y="851.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.4" y="862.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.73%)</title><rect x="1092.6" y="883.0" width="8.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1095.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (41 samples, 7.52%)</title><rect x="1101.2" y="963.0" width="88.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.2" y="974.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 7.52%)</title><rect x="1101.2" y="947.0" width="88.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="958.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 7.34%)</title><rect x="1101.2" y="931.0" width="86.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.2" y="942.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (38 samples, 6.97%)</title><rect x="1101.2" y="915.0" width="82.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.2" y="926.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (38 samples, 6.97%)</title><rect x="1101.2" y="899.0" width="82.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.2" y="910.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 4.22%)</title><rect x="1101.2" y="883.0" width="49.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.2" y="894.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.37%)</title><rect x="1101.2" y="867.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.2" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.37%)</title><rect x="1101.2" y="851.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.2" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.18%)</title><rect x="1105.6" y="867.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.6" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.55%)</title><rect x="1107.7" y="867.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.7" y="878.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.37%)</title><rect x="1107.7" y="851.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.7" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.18%)</title><rect x="1112.1" y="851.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.1" y="862.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.18%)</title><rect x="1112.1" y="835.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.37%)</title><rect x="1114.2" y="867.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.37%)</title><rect x="1114.2" y="851.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.18%)</title><rect x="1114.2" y="835.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.18%)</title><rect x="1114.2" y="819.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.18%)</title><rect x="1116.4" y="835.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.18%)</title><rect x="1116.4" y="819.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 2.75%)</title><rect x="1118.6" y="867.0" width="32.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.6" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.37%)</title><rect x="1118.6" y="851.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.6" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1118.6" y="835.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.6" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.18%)</title><rect x="1120.7" y="835.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.7" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1120.7" y="819.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.37%)</title><rect x="1122.9" y="851.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.37%)</title><rect x="1122.9" y="835.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1125.0" y="819.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.18%)</title><rect x="1127.2" y="851.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="862.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.18%)</title><rect x="1127.2" y="835.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.73%)</title><rect x="1129.4" y="851.0" width="8.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.37%)</title><rect x="1131.5" y="835.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.5" y="846.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.18%)</title><rect x="1135.9" y="835.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1138.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.18%)</title><rect x="1138.0" y="851.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1138.0" y="835.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.0" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.37%)</title><rect x="1140.2" y="851.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.2" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.18%)</title><rect x="1142.4" y="835.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.4" y="846.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::ideal_Opcode() const (1 samples, 0.18%)</title><rect x="1144.5" y="851.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.5" y="862.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.18%)</title><rect x="1146.7" y="851.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1149.7" y="862.0"></text>
</g>
<g>
<title>storeBNode::out_RegMask() const (1 samples, 0.18%)</title><rect x="1148.9" y="851.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.9" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 2.57%)</title><rect x="1151.0" y="883.0" width="30.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="894.0">Co..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (7 samples, 1.28%)</title><rect x="1151.0" y="867.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 1.28%)</title><rect x="1151.0" y="851.0" width="15.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.92%)</title><rect x="1151.0" y="835.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.55%)</title><rect x="1153.2" y="819.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.37%)</title><rect x="1155.4" y="803.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.4" y="814.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (2 samples, 0.37%)</title><rect x="1155.4" y="787.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.4" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.18%)</title><rect x="1155.4" y="771.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.4" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.18%)</title><rect x="1155.4" y="755.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.4" y="766.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.18%)</title><rect x="1157.5" y="771.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.18%)</title><rect x="1159.7" y="819.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.18%)</title><rect x="1161.9" y="835.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.9" y="846.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.18%)</title><rect x="1161.9" y="819.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.18%)</title><rect x="1164.0" y="835.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1164.0" y="819.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.258] (2 samples, 0.37%)</title><rect x="1166.2" y="867.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.18%)</title><rect x="1170.5" y="867.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.18%)</title><rect x="1170.5" y="851.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.18%)</title><rect x="1170.5" y="835.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.5" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.18%)</title><rect x="1172.7" y="867.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.18%)</title><rect x="1174.8" y="867.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.18%)</title><rect x="1174.8" y="851.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.18%)</title><rect x="1174.8" y="835.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.37%)</title><rect x="1177.0" y="867.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="878.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.18%)</title><rect x="1177.0" y="851.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1179.2" y="851.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.18%)</title><rect x="1179.2" y="835.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="883.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="867.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="851.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="835.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="819.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="803.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="787.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="771.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="755.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="739.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="723.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="707.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="691.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="675.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="659.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="643.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="627.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="611.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="595.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="579.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="563.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="547.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="531.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="515.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="499.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="483.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="467.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="451.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="435.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="419.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.3" y="403.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.3" y="387.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.3" y="371.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.3" y="355.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.3" y="339.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.3" y="323.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.18%)</title><rect x="1181.3" y="307.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.18%)</title><rect x="1181.3" y="291.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.18%)</title><rect x="1181.3" y="275.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.18%)</title><rect x="1181.3" y="259.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.18%)</title><rect x="1181.3" y="243.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="1181.3" y="227.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="1181.3" y="211.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.18%)</title><rect x="1181.3" y="195.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.18%)</title><rect x="1181.3" y="179.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.18%)</title><rect x="1181.3" y="163.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1181.3" y="147.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1181.3" y="131.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.18%)</title><rect x="1181.3" y="115.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.18%)</title><rect x="1181.3" y="99.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.18%)</title><rect x="1181.3" y="83.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.18%)</title><rect x="1181.3" y="67.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.18%)</title><rect x="1181.3" y="51.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (1 samples, 0.18%)</title><rect x="1181.3" y="35.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.37%)</title><rect x="1183.5" y="915.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.37%)</title><rect x="1183.5" y="899.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.37%)</title><rect x="1183.5" y="883.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.5" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.37%)</title><rect x="1183.5" y="867.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.37%)</title><rect x="1183.5" y="851.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.37%)</title><rect x="1183.5" y="835.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.37%)</title><rect x="1183.5" y="819.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.37%)</title><rect x="1183.5" y="803.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1183.5" y="787.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1183.5" y="771.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1183.5" y="755.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1183.5" y="739.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1183.5" y="723.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1183.5" y="707.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1183.5" y="691.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1183.5" y="675.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1183.5" y="659.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1183.5" y="643.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1183.5" y="627.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1183.5" y="611.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="622.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.18%)</title><rect x="1183.5" y="595.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="606.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.18%)</title><rect x="1183.5" y="579.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="590.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.18%)</title><rect x="1183.5" y="563.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="574.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.18%)</title><rect x="1183.5" y="547.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>ValueMap::kill_all() (1 samples, 0.18%)</title><rect x="1185.7" y="787.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.18%)</title><rect x="1187.8" y="931.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
</g>
</svg>
