<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (974 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (930 samples, 95.48%)</title><rect x="10.0" y="883.0" width="1126.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (930 samples, 95.48%)</title><rect x="10.0" y="867.0" width="1126.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (930 samples, 95.48%)</title><rect x="10.0" y="851.0" width="1126.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.10%)</title><rect x="13.6" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.10%)</title><rect x="13.6" y="819.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="830.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.10%)</title><rect x="13.6" y="803.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.6" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.10%)</title><rect x="13.6" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.10%)</title><rect x="14.8" y="835.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 0.82%)</title><rect x="16.1" y="835.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 0.62%)</title><rect x="18.5" y="819.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.21%)</title><rect x="18.5" y="803.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.10%)</title><rect x="18.5" y="787.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="18.5" y="771.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.10%)</title><rect x="19.7" y="787.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="19.7" y="771.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.10%)</title><rect x="19.7" y="755.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="22.7" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="19.7" y="739.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="22.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.41%)</title><rect x="20.9" y="803.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.41%)</title><rect x="20.9" y="787.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.41%)</title><rect x="20.9" y="771.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.41%)</title><rect x="20.9" y="755.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.21%)</title><rect x="23.3" y="739.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.21%)</title><rect x="23.3" y="723.0" width="2.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="26.3" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.21%)</title><rect x="23.3" y="707.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.21%)</title><rect x="23.3" y="691.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="26.3" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.21%)</title><rect x="23.3" y="675.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="26.3" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.21%)</title><rect x="23.3" y="659.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="26.3" y="670.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.21%)</title><rect x="23.3" y="643.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="26.3" y="654.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.21%)</title><rect x="23.3" y="627.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="26.3" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.21%)</title><rect x="23.3" y="611.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="26.3" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.21%)</title><rect x="23.3" y="595.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="26.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/621755864.run (917 samples, 94.15%)</title><rect x="25.7" y="835.0" width="1111.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.7" y="846.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/621755864.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0 (917 samples, 94.15%)</title><rect x="25.7" y="819.0" width="1111.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.7" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.getInternal (917 samples, 94.15%)</title><rect x="25.7" y="803.0" width="1111.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.7" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.getInternal</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.10%)</title><rect x="25.7" y="787.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.10%)</title><rect x="25.7" y="771.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.10%)</title><rect x="25.7" y="755.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.7" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="25.7" y="739.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="28.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (64 samples, 6.57%)</title><rect x="27.0" y="787.0" width="77.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.0" y="798.0">one/nio/h..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.10%)</title><rect x="27.0" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.10%)</title><rect x="27.0" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="27.0" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.0" y="750.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.10%)</title><rect x="27.0" y="723.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="30.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (63 samples, 6.47%)</title><rect x="28.2" y="771.0" width="76.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.2" y="782.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.21%)</title><rect x="28.2" y="755.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="28.2" y="739.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="31.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.10%)</title><rect x="29.4" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.10%)</title><rect x="29.4" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.10%)</title><rect x="29.4" y="707.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.4" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.10%)</title><rect x="29.4" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 6.26%)</title><rect x="30.6" y="755.0" width="73.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.6" y="766.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 6.26%)</title><rect x="30.6" y="739.0" width="73.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.6" y="750.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (61 samples, 6.26%)</title><rect x="30.6" y="723.0" width="73.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.6" y="734.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (61 samples, 6.26%)</title><rect x="30.6" y="707.0" width="73.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.6" y="718.0">one/nio/..</text>
</g>
<g>
<title>__libc_send (60 samples, 6.16%)</title><rect x="31.8" y="691.0" width="72.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="34.8" y="702.0">__libc_s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (59 samples, 6.06%)</title><rect x="33.0" y="675.0" width="71.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="36.0" y="686.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (59 samples, 6.06%)</title><rect x="33.0" y="659.0" width="71.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="36.0" y="670.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_sendto (58 samples, 5.95%)</title><rect x="33.0" y="643.0" width="70.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="36.0" y="654.0">__x64_sy..</text>
</g>
<g>
<title>__sys_sendto (58 samples, 5.95%)</title><rect x="33.0" y="627.0" width="70.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="36.0" y="638.0">__sys_se..</text>
</g>
<g>
<title>sock_sendmsg (56 samples, 5.75%)</title><rect x="35.4" y="611.0" width="67.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="38.4" y="622.0">sock_se..</text>
</g>
<g>
<title>inet6_sendmsg (55 samples, 5.65%)</title><rect x="36.7" y="595.0" width="66.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="39.7" y="606.0">inet6_s..</text>
</g>
<g>
<title>tcp_sendmsg (55 samples, 5.65%)</title><rect x="36.7" y="579.0" width="66.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="39.7" y="590.0">tcp_sen..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="36.7" y="563.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.7" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.10%)</title><rect x="36.7" y="547.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="39.7" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.10%)</title><rect x="37.9" y="563.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="40.9" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (53 samples, 5.44%)</title><rect x="39.1" y="563.0" width="64.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="42.1" y="574.0">tcp_sen..</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.10%)</title><rect x="40.3" y="547.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="43.3" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.10%)</title><rect x="40.3" y="531.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="43.3" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.82%)</title><rect x="41.5" y="547.0" width="9.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="44.5" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (6 samples, 0.62%)</title><rect x="43.9" y="531.0" width="7.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="46.9" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.10%)</title><rect x="45.1" y="515.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="48.1" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.10%)</title><rect x="46.3" y="515.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.3" y="526.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.10%)</title><rect x="46.3" y="499.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="49.3" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.31%)</title><rect x="47.6" y="515.0" width="3.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="50.6" y="526.0"></text>
</g>
<g>
<title>tcp_push (43 samples, 4.41%)</title><rect x="51.2" y="547.0" width="52.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="54.2" y="558.0">tcp_p..</text>
</g>
<g>
<title>__tcp_push_pending_frames (41 samples, 4.21%)</title><rect x="53.6" y="531.0" width="49.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="56.6" y="542.0">__tcp..</text>
</g>
<g>
<title>tcp_write_xmit (41 samples, 4.21%)</title><rect x="53.6" y="515.0" width="49.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="56.6" y="526.0">tcp_w..</text>
</g>
<g>
<title>__tcp_transmit_skb (34 samples, 3.49%)</title><rect x="57.2" y="499.0" width="41.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="60.2" y="510.0">__t..</text>
</g>
<g>
<title>ip_queue_xmit (33 samples, 3.39%)</title><rect x="58.5" y="483.0" width="39.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="61.5" y="494.0">ip_..</text>
</g>
<g>
<title>__ip_queue_xmit (33 samples, 3.39%)</title><rect x="58.5" y="467.0" width="39.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="61.5" y="478.0">__i..</text>
</g>
<g>
<title>ip_local_out (32 samples, 3.29%)</title><rect x="58.5" y="451.0" width="38.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="61.5" y="462.0">ip_..</text>
</g>
<g>
<title>__ip_local_out (5 samples, 0.51%)</title><rect x="58.5" y="435.0" width="6.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="61.5" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.51%)</title><rect x="58.5" y="419.0" width="6.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="61.5" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.10%)</title><rect x="58.5" y="403.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="61.5" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.10%)</title><rect x="58.5" y="387.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="61.5" y="398.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (4 samples, 0.41%)</title><rect x="59.7" y="403.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="62.7" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.31%)</title><rect x="59.7" y="387.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="62.7" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.10%)</title><rect x="60.9" y="371.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="63.9" y="382.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (1 samples, 0.10%)</title><rect x="62.1" y="371.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="65.1" y="382.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (1 samples, 0.10%)</title><rect x="63.3" y="387.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="66.3" y="398.0"></text>
</g>
<g>
<title>ip_output (27 samples, 2.77%)</title><rect x="64.5" y="435.0" width="32.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="67.5" y="446.0">ip..</text>
</g>
<g>
<title>ip_finish_output (24 samples, 2.46%)</title><rect x="65.7" y="419.0" width="29.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="68.7" y="430.0">ip..</text>
</g>
<g>
<title>__ip_finish_output (24 samples, 2.46%)</title><rect x="65.7" y="403.0" width="29.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="68.7" y="414.0">__..</text>
</g>
<g>
<title>ip_finish_output2 (24 samples, 2.46%)</title><rect x="65.7" y="387.0" width="29.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="68.7" y="398.0">ip..</text>
</g>
<g>
<title>__local_bh_enable_ip (21 samples, 2.16%)</title><rect x="65.7" y="371.0" width="25.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="68.7" y="382.0">_..</text>
</g>
<g>
<title>do_softirq.part.20 (21 samples, 2.16%)</title><rect x="65.7" y="355.0" width="25.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="68.7" y="366.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (21 samples, 2.16%)</title><rect x="65.7" y="339.0" width="25.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="68.7" y="350.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (21 samples, 2.16%)</title><rect x="65.7" y="323.0" width="25.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="68.7" y="334.0">_..</text>
</g>
<g>
<title>net_rx_action (19 samples, 1.95%)</title><rect x="68.2" y="307.0" width="23.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="71.2" y="318.0">n..</text>
</g>
<g>
<title>process_backlog (19 samples, 1.95%)</title><rect x="68.2" y="291.0" width="23.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="71.2" y="302.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (19 samples, 1.95%)</title><rect x="68.2" y="275.0" width="23.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="71.2" y="286.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (19 samples, 1.95%)</title><rect x="68.2" y="259.0" width="23.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="71.2" y="270.0">_..</text>
</g>
<g>
<title>ip_rcv (19 samples, 1.95%)</title><rect x="68.2" y="243.0" width="23.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="71.2" y="254.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (18 samples, 1.85%)</title><rect x="69.4" y="227.0" width="21.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="72.4" y="238.0">i..</text>
</g>
<g>
<title>ip_local_deliver (18 samples, 1.85%)</title><rect x="69.4" y="211.0" width="21.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="72.4" y="222.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (18 samples, 1.85%)</title><rect x="69.4" y="195.0" width="21.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="72.4" y="206.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (18 samples, 1.85%)</title><rect x="69.4" y="179.0" width="21.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="72.4" y="190.0">i..</text>
</g>
<g>
<title>tcp_v4_rcv (18 samples, 1.85%)</title><rect x="69.4" y="163.0" width="21.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="72.4" y="174.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.21%)</title><rect x="70.6" y="147.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="73.6" y="158.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.10%)</title><rect x="71.8" y="131.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="74.8" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.10%)</title><rect x="73.0" y="147.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="76.0" y="158.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.10%)</title><rect x="73.0" y="131.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="76.0" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (14 samples, 1.44%)</title><rect x="74.2" y="147.0" width="17.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.2" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (14 samples, 1.44%)</title><rect x="74.2" y="131.0" width="17.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.2" y="142.0"></text>
</g>
<g>
<title>tcp_ack (5 samples, 0.51%)</title><rect x="74.2" y="115.0" width="6.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="77.2" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.10%)</title><rect x="76.6" y="99.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="79.6" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.21%)</title><rect x="77.8" y="99.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="80.8" y="110.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.21%)</title><rect x="77.8" y="83.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="80.8" y="94.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.10%)</title><rect x="77.8" y="67.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="80.8" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.10%)</title><rect x="77.8" y="51.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="80.8" y="62.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.10%)</title><rect x="77.8" y="35.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="80.8" y="46.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.10%)</title><rect x="79.1" y="67.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="82.1" y="78.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="79.1" y="51.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="82.1" y="62.0"></text>
</g>
<g>
<title>tcp_data_ready (8 samples, 0.82%)</title><rect x="80.3" y="115.0" width="9.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="83.3" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (8 samples, 0.82%)</title><rect x="80.3" y="99.0" width="9.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="83.3" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (8 samples, 0.82%)</title><rect x="80.3" y="83.0" width="9.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="83.3" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (8 samples, 0.82%)</title><rect x="80.3" y="67.0" width="9.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="83.3" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.82%)</title><rect x="80.3" y="51.0" width="9.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="83.3" y="62.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.10%)</title><rect x="90.0" y="115.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="93.0" y="126.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.10%)</title><rect x="90.0" y="99.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="93.0" y="110.0"></text>
</g>
<g>
<title>dev_queue_xmit (3 samples, 0.31%)</title><rect x="91.2" y="371.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="94.2" y="382.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 0.21%)</title><rect x="91.2" y="355.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="94.2" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.10%)</title><rect x="91.2" y="339.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="94.2" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.10%)</title><rect x="91.2" y="323.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="94.2" y="334.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.10%)</title><rect x="91.2" y="307.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="94.2" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.10%)</title><rect x="91.2" y="291.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="94.2" y="302.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.10%)</title><rect x="91.2" y="275.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="94.2" y="286.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.10%)</title><rect x="92.4" y="339.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="95.4" y="350.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.10%)</title><rect x="93.6" y="355.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="96.6" y="366.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (2 samples, 0.21%)</title><rect x="94.8" y="419.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="97.8" y="430.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.10%)</title><rect x="97.2" y="451.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="100.2" y="462.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.10%)</title><rect x="98.4" y="499.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="101.4" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.10%)</title><rect x="99.7" y="499.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="102.7" y="510.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.10%)</title><rect x="100.9" y="499.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="103.9" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.10%)</title><rect x="102.1" y="499.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="105.1" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.10%)</title><rect x="102.1" y="483.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="105.1" y="494.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="103.3" y="643.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="106.3" y="654.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="103.3" y="627.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="106.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.10%)</title><rect x="104.5" y="787.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.10%)</title><rect x="104.5" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (851 samples, 87.37%)</title><rect x="105.7" y="787.0" width="1031.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.7" y="798.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (851 samples, 87.37%)</title><rect x="105.7" y="771.0" width="1031.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.7" y="782.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (851 samples, 87.37%)</title><rect x="105.7" y="755.0" width="1031.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.7" y="766.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.41%)</title><rect x="106.9" y="739.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.9" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (686 samples, 70.43%)</title><rect x="111.8" y="739.0" width="831.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="114.8" y="750.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="111.8" y="723.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="114.8" y="734.0"></text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (1 samples, 0.10%)</title><rect x="113.0" y="723.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.0" y="734.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.10%)</title><rect x="114.2" y="723.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="117.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (1 samples, 0.10%)</title><rect x="115.4" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="118.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.10%)</title><rect x="116.6" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="119.6" y="734.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (680 samples, 69.82%)</title><rect x="117.8" y="723.0" width="823.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="120.8" y="734.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*,..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.21%)</title><rect x="117.8" y="707.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="120.8" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="119.0" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="122.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.10%)</title><rect x="120.2" y="707.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="123.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (675 samples, 69.30%)</title><rect x="121.5" y="707.0" width="817.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="124.5" y="718.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*)</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.21%)</title><rect x="121.5" y="691.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="124.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (673 samples, 69.10%)</title><rect x="123.9" y="691.0" width="815.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="126.9" y="702.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*)</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (673 samples, 69.10%)</title><rect x="123.9" y="675.0" width="815.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="126.9" y="686.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Pi..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="123.9" y="659.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="126.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.10%)</title><rect x="125.1" y="659.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="128.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (670 samples, 68.79%)</title><rect x="126.3" y="659.0" width="811.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="129.3" y="670.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions)</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.10%)</title><rect x="128.7" y="643.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="131.7" y="654.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.10%)</title><rect x="129.9" y="643.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="132.9" y="654.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.10%)</title><rect x="131.1" y="643.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="134.1" y="654.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.10%)</title><rect x="132.4" y="643.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="135.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.21%)</title><rect x="133.6" y="643.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="136.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() [clone .plt] (1 samples, 0.10%)</title><rect x="133.6" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="136.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.10%)</title><rect x="134.8" y="627.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="137.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.10%)</title><rect x="136.0" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="139.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (659 samples, 67.66%)</title><rect x="137.2" y="643.0" width="798.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="140.2" y="654.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsign..</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (658 samples, 67.56%)</title><rect x="138.4" y="627.0" width="797.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="141.4" y="638.0">/tmp/librocksdbjni6799845474915841813.so</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (15 samples, 1.54%)</title><rect x="138.4" y="611.0" width="18.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="141.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (14 samples, 1.44%)</title><rect x="139.6" y="595.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="142.6" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="140.8" y="579.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.8" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.10%)</title><rect x="140.8" y="563.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="143.8" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="140.8" y="547.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="143.8" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="140.8" y="531.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.8" y="542.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="140.8" y="515.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="143.8" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.31%)</title><rect x="142.1" y="579.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="145.1" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.31%)</title><rect x="142.1" y="563.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="145.1" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.31%)</title><rect x="142.1" y="547.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="145.1" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="142.1" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="145.1" y="542.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="143.3" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="146.3" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="144.5" y="531.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="147.5" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="144.5" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="147.5" y="526.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.31%)</title><rect x="145.7" y="579.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="148.7" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.31%)</title><rect x="145.7" y="563.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="148.7" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.31%)</title><rect x="145.7" y="547.0" width="3.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="148.7" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.21%)</title><rect x="146.9" y="531.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="149.9" y="542.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.21%)</title><rect x="146.9" y="515.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="149.9" y="526.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.21%)</title><rect x="146.9" y="499.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="149.9" y="510.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="146.9" y="483.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="149.9" y="494.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.10%)</title><rect x="146.9" y="467.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="149.9" y="478.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="148.1" y="483.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="151.1" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.41%)</title><rect x="149.3" y="579.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="152.3" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.41%)</title><rect x="149.3" y="563.0" width="4.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="152.3" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.41%)</title><rect x="149.3" y="547.0" width="4.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="152.3" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.31%)</title><rect x="149.3" y="531.0" width="3.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="152.3" y="542.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.31%)</title><rect x="149.3" y="515.0" width="3.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="152.3" y="526.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.31%)</title><rect x="149.3" y="499.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="152.3" y="510.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.31%)</title><rect x="149.3" y="483.0" width="3.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="152.3" y="494.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.31%)</title><rect x="149.3" y="467.0" width="3.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="152.3" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.31%)</title><rect x="149.3" y="451.0" width="3.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="152.3" y="462.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="153.0" y="531.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="156.0" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="153.0" y="515.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="156.0" y="526.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.10%)</title><rect x="154.2" y="579.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="157.2" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.10%)</title><rect x="155.4" y="579.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="158.4" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="155.4" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="158.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (640 samples, 65.71%)</title><rect x="156.6" y="611.0" width="775.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="159.6" y="622.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const</text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.51%)</title><rect x="169.9" y="595.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="172.9" y="606.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="176.0" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="179.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (623 samples, 63.96%)</title><rect x="177.2" y="595.0" width="754.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="180.2" y="606.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.31%)</title><rect x="184.5" y="579.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="187.5" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.21%)</title><rect x="188.1" y="579.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="191.1" y="590.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.10%)</title><rect x="190.5" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="193.5" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.21%)</title><rect x="191.7" y="579.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="194.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (603 samples, 61.91%)</title><rect x="194.1" y="579.0" width="730.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="197.1" y="590.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (44 samples, 4.52%)</title><rect x="213.5" y="563.0" width="53.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="216.5" y="574.0">JNIEn..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (2 samples, 0.21%)</title><rect x="216.0" y="547.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.0" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (40 samples, 4.11%)</title><rect x="218.4" y="547.0" width="48.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="221.4" y="558.0">jni_..</text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.21%)</title><rect x="230.5" y="531.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="233.5" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="232.9" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="235.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="234.1" y="531.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="237.1" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (25 samples, 2.57%)</title><rect x="236.6" y="531.0" width="30.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="239.6" y="542.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="242.6" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="245.6" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.21%)</title><rect x="243.8" y="515.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.8" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.10%)</title><rect x="246.2" y="515.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="249.2" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (14 samples, 1.44%)</title><rect x="247.5" y="515.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="250.5" y="526.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.10%)</title><rect x="251.1" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="254.1" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="252.3" y="499.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="255.3" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.21%)</title><rect x="253.5" y="499.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="256.5" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.41%)</title><rect x="255.9" y="499.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="258.9" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.10%)</title><rect x="258.4" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="261.4" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.10%)</title><rect x="259.6" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="262.6" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.31%)</title><rect x="260.8" y="499.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="263.8" y="510.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="264.4" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="267.4" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.10%)</title><rect x="265.6" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="268.6" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (93 samples, 9.55%)</title><rect x="266.8" y="563.0" width="112.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="269.8" y="574.0">JNIEnv_::CallV..</text>
</g>
<g>
<title>jni_CallVoidMethodV (89 samples, 9.14%)</title><rect x="271.7" y="547.0" width="107.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="274.7" y="558.0">jni_CallVoidM..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="281.4" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="284.4" y="542.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="282.6" y="531.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="285.6" y="542.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.31%)</title><rect x="283.8" y="531.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="286.8" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="287.4" y="531.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="290.4" y="542.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.10%)</title><rect x="288.6" y="531.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.6" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.41%)</title><rect x="289.9" y="531.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.62%)</title><rect x="294.7" y="531.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="297.7" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (62 samples, 6.37%)</title><rect x="302.0" y="531.0" width="75.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="305.0" y="542.0">jni_invo..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.21%)</title><rect x="311.7" y="515.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.7" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (6 samples, 0.62%)</title><rect x="314.1" y="515.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="317.1" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.21%)</title><rect x="321.4" y="515.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="324.4" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (36 samples, 3.70%)</title><rect x="323.8" y="515.0" width="43.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.8" y="526.0">Java..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.21%)</title><rect x="332.3" y="499.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="335.3" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="334.7" y="499.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="337.7" y="510.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="335.9" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="338.9" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.21%)</title><rect x="337.1" y="499.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="340.1" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (2 samples, 0.21%)</title><rect x="339.5" y="499.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="342.5" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.31%)</title><rect x="342.0" y="499.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="345.0" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (12 samples, 1.23%)</title><rect x="345.6" y="499.0" width="14.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="348.6" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.21%)</title><rect x="356.5" y="483.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="359.5" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.10%)</title><rect x="358.9" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.9" y="494.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (3 samples, 0.31%)</title><rect x="360.1" y="499.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.1" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.21%)</title><rect x="363.8" y="499.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="366.8" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.10%)</title><rect x="366.2" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="369.2" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.21%)</title><rect x="367.4" y="515.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="370.4" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.10%)</title><rect x="369.8" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="372.8" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="371.0" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="374.0" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.31%)</title><rect x="372.2" y="515.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="375.2" y="526.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.10%)</title><rect x="375.9" y="515.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="378.9" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.10%)</title><rect x="377.1" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.1" y="542.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="378.3" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="381.3" y="542.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="379.5" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.5" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="380.7" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="383.7" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="381.9" y="563.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.9" y="574.0"></text>
</g>
<g>
<title>__lll_lock_wait (160 samples, 16.43%)</title><rect x="384.4" y="563.0" width="193.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="387.4" y="574.0">__lll_lock_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (117 samples, 12.01%)</title><rect x="436.4" y="547.0" width="141.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="439.4" y="558.0">entry_SYSCALL_64_a..</text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.21%)</title><rect x="436.4" y="531.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="439.4" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (115 samples, 11.81%)</title><rect x="438.9" y="531.0" width="139.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="441.9" y="542.0">do_syscall_64</text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="452.2" y="515.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="455.2" y="526.0"></text>
</g>
<g>
<title>__x64_sys_futex (68 samples, 6.98%)</title><rect x="453.4" y="515.0" width="82.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="456.4" y="526.0">__x64_sys..</text>
</g>
<g>
<title>do_futex (59 samples, 6.06%)</title><rect x="464.3" y="499.0" width="71.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="467.3" y="510.0">do_futex</text>
</g>
<g>
<title>futex_wait (51 samples, 5.24%)</title><rect x="472.8" y="483.0" width="61.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="475.8" y="494.0">futex_..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="484.9" y="467.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="487.9" y="478.0"></text>
</g>
<g>
<title>futex_wait_queue_me (20 samples, 2.05%)</title><rect x="486.1" y="467.0" width="24.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="489.1" y="478.0">f..</text>
</g>
<g>
<title>plist_add (4 samples, 0.41%)</title><rect x="494.6" y="451.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="497.6" y="462.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.21%)</title><rect x="499.4" y="451.0" width="2.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="502.4" y="462.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.72%)</title><rect x="501.9" y="451.0" width="8.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="504.9" y="462.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.51%)</title><rect x="504.3" y="435.0" width="6.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="507.3" y="446.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.41%)</title><rect x="505.5" y="419.0" width="4.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="508.5" y="430.0"></text>
</g>
<g>
<title>futex_wait_setup (18 samples, 1.85%)</title><rect x="510.3" y="467.0" width="21.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="513.3" y="478.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.21%)</title><rect x="515.2" y="451.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="518.2" y="462.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="516.4" y="435.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="519.4" y="446.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.41%)</title><rect x="517.6" y="451.0" width="4.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="520.6" y="462.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (4 samples, 0.41%)</title><rect x="517.6" y="435.0" width="4.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="520.6" y="446.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="522.5" y="451.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="525.5" y="462.0"></text>
</g>
<g>
<title>get_futex_value_locked (7 samples, 0.72%)</title><rect x="523.7" y="451.0" width="8.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="526.7" y="462.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.10%)</title><rect x="532.2" y="467.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="535.2" y="478.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="533.4" y="467.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="536.4" y="478.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="534.6" y="483.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="537.6" y="494.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (30 samples, 3.08%)</title><rect x="535.8" y="515.0" width="36.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="538.8" y="526.0">sys..</text>
</g>
<g>
<title>__audit_syscall_exit (17 samples, 1.75%)</title><rect x="549.1" y="499.0" width="20.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="552.1" y="510.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.51%)</title><rect x="560.0" y="483.0" width="6.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="563.0" y="494.0"></text>
</g>
<g>
<title>mntput (2 samples, 0.21%)</title><rect x="566.1" y="483.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="569.1" y="494.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.10%)</title><rect x="568.5" y="483.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="571.5" y="494.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.21%)</title><rect x="569.7" y="499.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="572.7" y="510.0"></text>
</g>
<g>
<title>syscall_trace_enter (5 samples, 0.51%)</title><rect x="572.1" y="515.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="575.1" y="526.0"></text>
</g>
<g>
<title>__audit_syscall_entry (3 samples, 0.31%)</title><rect x="573.3" y="499.0" width="3.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="576.3" y="510.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.10%)</title><rect x="575.8" y="483.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="578.8" y="494.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.10%)</title><rect x="577.0" y="499.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="580.0" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (228 samples, 23.41%)</title><rect x="578.2" y="563.0" width="276.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="581.2" y="574.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (220 samples, 22.59%)</title><rect x="587.9" y="547.0" width="266.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="590.9" y="558.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="587.9" y="531.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="590.9" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (219 samples, 22.48%)</title><rect x="589.1" y="531.0" width="265.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="592.1" y="542.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (209 samples, 21.46%)</title><rect x="596.4" y="515.0" width="253.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="599.4" y="526.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (206 samples, 21.15%)</title><rect x="598.8" y="499.0" width="249.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="601.8" y="510.0">do_futex</text>
</g>
<g>
<title>futex_wake (202 samples, 20.74%)</title><rect x="600.0" y="483.0" width="244.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="603.0" y="494.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (5 samples, 0.51%)</title><rect x="610.9" y="467.0" width="6.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="613.9" y="478.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.41%)</title><rect x="617.0" y="467.0" width="4.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="620.0" y="478.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="620.6" y="451.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="623.6" y="462.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="621.8" y="467.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="624.8" y="478.0"></text>
</g>
<g>
<title>mark_wake_futex (11 samples, 1.13%)</title><rect x="623.0" y="467.0" width="13.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="626.0" y="478.0"></text>
</g>
<g>
<title>__unqueue_futex (3 samples, 0.31%)</title><rect x="631.5" y="451.0" width="3.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="634.5" y="462.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.10%)</title><rect x="635.1" y="451.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="638.1" y="462.0"></text>
</g>
<g>
<title>wake_up_q (172 samples, 17.66%)</title><rect x="636.3" y="467.0" width="208.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="639.3" y="478.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (167 samples, 17.15%)</title><rect x="642.4" y="451.0" width="202.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="645.4" y="462.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (166 samples, 17.04%)</title><rect x="643.6" y="435.0" width="201.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="646.6" y="446.0">__lock_text_start</text>
</g>
<g>
<title>hash_futex (3 samples, 0.31%)</title><rect x="844.7" y="483.0" width="3.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="847.7" y="494.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.10%)</title><rect x="848.4" y="499.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="851.4" y="510.0"></text>
</g>
<g>
<title>syscall_trace_enter (4 samples, 0.41%)</title><rect x="849.6" y="515.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="852.6" y="526.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.10%)</title><rect x="853.2" y="499.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="856.2" y="510.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.31%)</title><rect x="854.4" y="563.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="857.4" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.21%)</title><rect x="858.0" y="563.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="861.0" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 1.85%)</title><rect x="860.5" y="563.0" width="21.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="863.5" y="574.0">j..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="862.9" y="547.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="865.9" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.62%)</title><rect x="864.1" y="547.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.1" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (9 samples, 0.92%)</title><rect x="871.4" y="547.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.4" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.21%)</title><rect x="882.3" y="563.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="885.3" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.54%)</title><rect x="884.7" y="563.0" width="18.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="887.7" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (11 samples, 1.13%)</title><rect x="902.9" y="563.0" width="13.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="905.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.31%)</title><rect x="916.2" y="563.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.2" y="574.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.10%)</title><rect x="918.6" y="547.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.21%)</title><rect x="919.8" y="563.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.21%)</title><rect x="922.3" y="563.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.21%)</title><rect x="924.7" y="579.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.10%)</title><rect x="927.1" y="579.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() [clone .plt] (1 samples, 0.10%)</title><rect x="928.3" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.21%)</title><rect x="929.5" y="579.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="932.0" y="611.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (1 samples, 0.10%)</title><rect x="933.2" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="936.2" y="622.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) [clone .plt] (1 samples, 0.10%)</title><rect x="934.4" y="611.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) [clone .plt] (1 samples, 0.10%)</title><rect x="935.6" y="643.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) [clone .plt] (1 samples, 0.10%)</title><rect x="936.8" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) [clone .plt] (1 samples, 0.10%)</title><rect x="938.0" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="941.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (2 samples, 0.21%)</title><rect x="939.2" y="707.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.2" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.10%)</title><rect x="939.2" y="691.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="942.2" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="939.2" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.2" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.10%)</title><rect x="940.4" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.4" y="702.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.10%)</title><rect x="941.6" y="723.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.6" y="734.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="942.9" y="739.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="945.9" y="750.0"></text>
</g>
<g>
<title>call_stub (10 samples, 1.03%)</title><rect x="944.1" y="739.0" width="12.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="947.1" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (19 samples, 1.95%)</title><rect x="956.2" y="739.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="959.2" y="750.0">o..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (128 samples, 13.14%)</title><rect x="979.2" y="739.0" width="155.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="982.2" y="750.0">ru/mail/polis/dao/st..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (124 samples, 12.73%)</title><rect x="984.0" y="723.0" width="150.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.0" y="734.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.31%)</title><rect x="987.7" y="707.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="990.7" y="718.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.31%)</title><rect x="987.7" y="691.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.7" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (118 samples, 12.11%)</title><rect x="991.3" y="707.0" width="143.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="994.3" y="718.0">org/rocksdb/Abstra..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (8 samples, 0.82%)</title><rect x="991.3" y="691.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.3" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (110 samples, 11.29%)</title><rect x="1001.0" y="691.0" width="133.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.0" y="702.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (108 samples, 11.09%)</title><rect x="1003.4" y="675.0" width="130.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.4" y="686.0">org/rocksdb/Slic..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (97 samples, 9.96%)</title><rect x="1014.3" y="659.0" width="117.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1017.3" y="670.0">Java_org_rocks..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.10%)</title><rect x="1016.8" y="643.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.8" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="1018.0" y="643.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="1019.2" y="643.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.2" y="654.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (7 samples, 0.72%)</title><rect x="1021.6" y="643.0" width="8.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1024.6" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.21%)</title><rect x="1030.1" y="643.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1033.1" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (17 samples, 1.75%)</title><rect x="1032.5" y="643.0" width="20.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1035.5" y="654.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="1033.7" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.7" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (11 samples, 1.13%)</title><rect x="1034.9" y="627.0" width="13.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.41%)</title><rect x="1048.3" y="627.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.3" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (42 samples, 4.31%)</title><rect x="1053.1" y="643.0" width="50.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1056.1" y="654.0">jni_N..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.21%)</title><rect x="1059.2" y="627.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.2" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.41%)</title><rect x="1061.6" y="627.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.6" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.21%)</title><rect x="1066.4" y="627.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.4" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.21%)</title><rect x="1068.9" y="627.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.31%)</title><rect x="1071.3" y="627.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.3" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (24 samples, 2.46%)</title><rect x="1074.9" y="627.0" width="29.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.9" y="638.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 1.75%)</title><rect x="1081.0" y="611.0" width="20.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.0" y="622.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.10%)</title><rect x="1082.2" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.2" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 1.23%)</title><rect x="1083.4" y="595.0" width="14.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.4" y="606.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (3 samples, 0.31%)</title><rect x="1088.2" y="579.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.2" y="590.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.31%)</title><rect x="1091.9" y="579.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.9" y="590.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (2 samples, 0.21%)</title><rect x="1095.5" y="579.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.5" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.21%)</title><rect x="1097.9" y="595.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1100.9" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.10%)</title><rect x="1100.3" y="595.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1103.3" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.21%)</title><rect x="1101.6" y="611.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.6" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (20 samples, 2.05%)</title><rect x="1104.0" y="643.0" width="24.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1107.0" y="654.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="1107.6" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.6" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1108.8" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.8" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.82%)</title><rect x="1110.0" y="627.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.0" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.51%)</title><rect x="1119.7" y="627.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.7" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.21%)</title><rect x="1125.8" y="627.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1128.8" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1127.0" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.0" y="622.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.21%)</title><rect x="1128.2" y="643.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1131.2" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.10%)</title><rect x="1130.6" y="643.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.6" y="654.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.21%)</title><rect x="1131.8" y="659.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1134.8" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.10%)</title><rect x="1134.3" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.3" y="750.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.10%)</title><rect x="1135.5" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.5" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (42 samples, 4.31%)</title><rect x="1136.7" y="883.0" width="50.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1139.7" y="894.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.21%)</title><rect x="1136.7" y="867.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1139.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.21%)</title><rect x="1136.7" y="851.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1139.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.10%)</title><rect x="1137.9" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1140.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 1.23%)</title><rect x="1139.1" y="867.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1142.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1139.1" y="851.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.10%)</title><rect x="1139.1" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 1.13%)</title><rect x="1140.3" y="851.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1143.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 1.13%)</title><rect x="1140.3" y="835.0" width="13.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1143.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="1140.3" y="819.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1143.3" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.10%)</title><rect x="1140.3" y="803.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1143.3" y="814.0"></text>
</g>
<g>
<title>epoll_wait (10 samples, 1.03%)</title><rect x="1141.5" y="819.0" width="12.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1144.5" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.03%)</title><rect x="1141.5" y="803.0" width="12.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1144.5" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 1.03%)</title><rect x="1141.5" y="787.0" width="12.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1144.5" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (10 samples, 1.03%)</title><rect x="1141.5" y="771.0" width="12.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1144.5" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (10 samples, 1.03%)</title><rect x="1141.5" y="755.0" width="12.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1144.5" y="766.0"></text>
</g>
<g>
<title>ep_poll (10 samples, 1.03%)</title><rect x="1141.5" y="739.0" width="12.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1144.5" y="750.0"></text>
</g>
<g>
<title>_raw_write_lock_irq (2 samples, 0.21%)</title><rect x="1142.8" y="723.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1145.8" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (5 samples, 0.51%)</title><rect x="1145.2" y="723.0" width="6.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (4 samples, 0.41%)</title><rect x="1146.4" y="707.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1149.4" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (3 samples, 0.31%)</title><rect x="1147.6" y="691.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1150.6" y="702.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.31%)</title><rect x="1147.6" y="675.0" width="3.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1150.6" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="1150.0" y="659.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1153.0" y="670.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.21%)</title><rect x="1151.2" y="723.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1154.2" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.21%)</title><rect x="1151.2" y="707.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1154.2" y="718.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.21%)</title><rect x="1151.2" y="691.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1154.2" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.21%)</title><rect x="1151.2" y="675.0" width="2.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1154.2" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="1152.4" y="659.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1155.4" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (28 samples, 2.87%)</title><rect x="1153.7" y="867.0" width="33.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1156.7" y="878.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (28 samples, 2.87%)</title><rect x="1153.7" y="851.0" width="33.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1156.7" y="862.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 1.44%)</title><rect x="1153.7" y="835.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1156.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 0.82%)</title><rect x="1154.9" y="819.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.72%)</title><rect x="1156.1" y="803.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1159.1" y="814.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (5 samples, 0.51%)</title><rect x="1156.1" y="787.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1159.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.21%)</title><rect x="1156.1" y="771.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1159.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.21%)</title><rect x="1156.1" y="755.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1159.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (1 samples, 0.10%)</title><rect x="1157.3" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (3 samples, 0.31%)</title><rect x="1158.5" y="771.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1161.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.31%)</title><rect x="1158.5" y="755.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1161.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.31%)</title><rect x="1158.5" y="739.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1161.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.21%)</title><rect x="1158.5" y="723.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1161.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.21%)</title><rect x="1158.5" y="707.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1161.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.21%)</title><rect x="1158.5" y="691.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1161.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.21%)</title><rect x="1158.5" y="675.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1161.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.21%)</title><rect x="1158.5" y="659.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1161.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.21%)</title><rect x="1158.5" y="643.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1161.5" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.21%)</title><rect x="1158.5" y="627.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1161.5" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.21%)</title><rect x="1158.5" y="611.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.5" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.21%)</title><rect x="1158.5" y="595.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1161.5" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.21%)</title><rect x="1158.5" y="579.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1161.5" y="590.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.21%)</title><rect x="1158.5" y="563.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.5" y="574.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.21%)</title><rect x="1158.5" y="547.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1161.5" y="558.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.21%)</title><rect x="1158.5" y="531.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1161.5" y="542.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.21%)</title><rect x="1158.5" y="515.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1161.5" y="526.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.21%)</title><rect x="1158.5" y="499.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="1160.9" y="723.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="1160.9" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="1160.9" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="1160.9" y="675.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.21%)</title><rect x="1162.1" y="787.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="1162.1" y="771.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="1162.1" y="755.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1165.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.31%)</title><rect x="1164.6" y="819.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.21%)</title><rect x="1164.6" y="803.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1165.8" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1168.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1165.8" y="771.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1168.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.10%)</title><rect x="1165.8" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1168.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1167.0" y="803.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1167.0" y="787.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.10%)</title><rect x="1168.2" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1171.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.10%)</title><rect x="1168.2" y="803.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1171.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.10%)</title><rect x="1168.2" y="787.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.10%)</title><rect x="1168.2" y="771.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.10%)</title><rect x="1168.2" y="755.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1171.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.10%)</title><rect x="1168.2" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1171.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1169.4" y="819.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1169.4" y="803.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1172.4" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (14 samples, 1.44%)</title><rect x="1170.6" y="835.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (14 samples, 1.44%)</title><rect x="1170.6" y="819.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.31%)</title><rect x="1170.6" y="803.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.21%)</title><rect x="1171.8" y="787.0" width="2.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="1171.8" y="771.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="1173.0" y="771.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>__GI___recv (10 samples, 1.03%)</title><rect x="1174.3" y="803.0" width="12.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.92%)</title><rect x="1175.5" y="787.0" width="10.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.92%)</title><rect x="1175.5" y="771.0" width="10.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (8 samples, 0.82%)</title><rect x="1176.7" y="755.0" width="9.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (8 samples, 0.82%)</title><rect x="1176.7" y="739.0" width="9.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.62%)</title><rect x="1176.7" y="723.0" width="7.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 0.31%)</title><rect x="1176.7" y="707.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (3 samples, 0.31%)</title><rect x="1176.7" y="691.0" width="3.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="1176.7" y="675.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="1176.7" y="659.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="1177.9" y="675.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="1177.9" y="659.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.10%)</title><rect x="1179.1" y="675.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.10%)</title><rect x="1179.1" y="659.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1182.1" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.31%)</title><rect x="1180.3" y="707.0" width="3.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.31%)</title><rect x="1180.3" y="691.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.31%)</title><rect x="1180.3" y="675.0" width="3.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.31%)</title><rect x="1180.3" y="659.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.21%)</title><rect x="1181.5" y="643.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>aa_check_perms (1 samples, 0.10%)</title><rect x="1181.5" y="627.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.10%)</title><rect x="1182.7" y="627.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.21%)</title><rect x="1183.9" y="723.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.21%)</title><rect x="1183.9" y="707.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.21%)</title><rect x="1183.9" y="691.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="1185.2" y="675.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.10%)</title><rect x="1186.4" y="803.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1189.4" y="814.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.21%)</title><rect x="1187.6" y="883.0" width="2.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.6" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.21%)</title><rect x="1187.6" y="867.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.6" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.21%)</title><rect x="1187.6" y="851.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.21%)</title><rect x="1187.6" y="835.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.21%)</title><rect x="1187.6" y="819.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.21%)</title><rect x="1187.6" y="803.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.21%)</title><rect x="1187.6" y="787.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="798.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.21%)</title><rect x="1187.6" y="771.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.10%)</title><rect x="1187.6" y="755.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.10%)</title><rect x="1187.6" y="739.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1187.6" y="723.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.10%)</title><rect x="1188.8" y="755.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
</g>
</svg>
