<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (560 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.18%)</title><rect x="10.0" y="1043.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="10.0" y="1027.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.18%)</title><rect x="10.0" y="1011.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.18%)</title><rect x="10.0" y="995.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.18%)</title><rect x="10.0" y="979.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="10.0" y="963.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="10.0" y="947.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="10.0" y="931.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.18%)</title><rect x="10.0" y="915.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.18%)</title><rect x="10.0" y="899.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 1.25%)</title><rect x="12.1" y="1043.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.1" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (7 samples, 1.25%)</title><rect x="12.1" y="1027.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.1" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (7 samples, 1.25%)</title><rect x="12.1" y="1011.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.1" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.89%)</title><rect x="14.2" y="995.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.2" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.18%)</title><rect x="16.3" y="979.0" width="2.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="19.3" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.18%)</title><rect x="18.4" y="979.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="18.4" y="963.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="18.4" y="947.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.18%)</title><rect x="18.4" y="931.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.18%)</title><rect x="20.5" y="979.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.5" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.18%)</title><rect x="22.6" y="979.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.6" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.18%)</title><rect x="24.8" y="995.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.8" y="1006.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.18%)</title><rect x="26.9" y="1043.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="29.9" y="1054.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.18%)</title><rect x="29.0" y="1043.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="32.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.18%)</title><rect x="29.0" y="1027.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.71%)</title><rect x="31.1" y="1043.0" width="8.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="34.1" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.18%)</title><rect x="31.1" y="1027.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="34.1" y="1038.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (3 samples, 0.54%)</title><rect x="33.2" y="1027.0" width="6.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="36.2" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.36%)</title><rect x="35.3" y="1011.0" width="4.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="38.3" y="1022.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.36%)</title><rect x="35.3" y="995.0" width="4.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="38.3" y="1006.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.36%)</title><rect x="35.3" y="979.0" width="4.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="38.3" y="990.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.36%)</title><rect x="35.3" y="963.0" width="4.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="38.3" y="974.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.18%)</title><rect x="37.4" y="947.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="40.4" y="958.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 1.79%)</title><rect x="39.5" y="1043.0" width="21.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="42.5" y="1054.0">[..</text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 1.79%)</title><rect x="39.5" y="1027.0" width="21.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="42.5" y="1038.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.79%)</title><rect x="39.5" y="1011.0" width="21.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="42.5" y="1022.0">e..</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="39.5" y="995.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="42.5" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 1.61%)</title><rect x="41.6" y="995.0" width="19.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="44.6" y="1006.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 1.43%)</title><rect x="41.6" y="979.0" width="16.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="44.6" y="990.0"></text>
</g>
<g>
<title>do_futex (8 samples, 1.43%)</title><rect x="41.6" y="963.0" width="16.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="44.6" y="974.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 1.43%)</title><rect x="41.6" y="947.0" width="16.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="44.6" y="958.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 1.25%)</title><rect x="43.7" y="931.0" width="14.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="46.7" y="942.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 1.25%)</title><rect x="43.7" y="915.0" width="14.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="46.7" y="926.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 1.25%)</title><rect x="43.7" y="899.0" width="14.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="46.7" y="910.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.18%)</title><rect x="58.5" y="979.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="61.5" y="990.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.18%)</title><rect x="58.5" y="963.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="61.5" y="974.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.18%)</title><rect x="58.5" y="947.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="61.5" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.18%)</title><rect x="60.6" y="1043.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="63.6" y="1054.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.18%)</title><rect x="60.6" y="1027.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="63.6" y="1038.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.18%)</title><rect x="60.6" y="1011.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="63.6" y="1022.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.18%)</title><rect x="60.6" y="995.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="63.6" y="1006.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.18%)</title><rect x="60.6" y="979.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="63.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (106 samples, 18.93%)</title><rect x="62.7" y="1043.0" width="223.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.7" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (106 samples, 18.93%)</title><rect x="62.7" y="1027.0" width="223.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.7" y="1038.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (106 samples, 18.93%)</title><rect x="62.7" y="1011.0" width="223.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.7" y="1022.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (89 samples, 15.89%)</title><rect x="69.0" y="995.0" width="187.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.0" y="1006.0">java/util/concurrent/Fut..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/1219091857.call (89 samples, 15.89%)</title><rect x="69.0" y="979.0" width="187.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.0" y="990.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0 (89 samples, 15.89%)</title><rect x="69.0" y="963.0" width="187.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.0" y="974.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (89 samples, 15.89%)</title><rect x="69.0" y="947.0" width="187.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.0" y="958.0">ru/mail/polis/dao/stasya..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.71%)</title><rect x="69.0" y="931.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="72.0" y="942.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (4 samples, 0.71%)</title><rect x="69.0" y="915.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="72.0" y="926.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.18%)</title><rect x="69.0" y="899.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="72.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.54%)</title><rect x="71.1" y="899.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="74.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.18%)</title><rect x="73.2" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="76.2" y="894.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.18%)</title><rect x="75.3" y="883.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="78.3" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.36%)</title><rect x="77.4" y="931.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.4" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.18%)</title><rect x="79.5" y="915.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.5" y="926.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.18%)</title><rect x="79.5" y="899.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="82.5" y="910.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.18%)</title><rect x="79.5" y="883.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="82.5" y="894.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.18%)</title><rect x="79.5" y="867.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="82.5" y="878.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.18%)</title><rect x="79.5" y="851.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="82.5" y="862.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.18%)</title><rect x="79.5" y="835.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="82.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (81 samples, 14.46%)</title><rect x="81.6" y="931.0" width="170.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.6" y="942.0">ru/mail/polis/dao/stas..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (81 samples, 14.46%)</title><rect x="81.6" y="915.0" width="170.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.6" y="926.0">ru/mail/polis/dao/stas..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (12 samples, 2.14%)</title><rect x="81.6" y="899.0" width="25.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.6" y="910.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (11 samples, 1.96%)</title><rect x="81.6" y="883.0" width="23.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.6" y="894.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (6 samples, 1.07%)</title><rect x="81.6" y="867.0" width="12.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="84.6" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (6 samples, 1.07%)</title><rect x="81.6" y="851.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="84.6" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (6 samples, 1.07%)</title><rect x="81.6" y="835.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="84.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.18%)</title><rect x="83.8" y="819.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="86.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.18%)</title><rect x="83.8" y="803.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="86.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.18%)</title><rect x="83.8" y="787.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="86.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.18%)</title><rect x="83.8" y="771.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="86.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::Arena*) (1 samples, 0.18%)</title><rect x="85.9" y="819.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="88.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (2 samples, 0.36%)</title><rect x="88.0" y="819.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="91.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::ForwardRangeDelIterator::ForwardRangeDelIterator(rocksdb::InternalKeyComparator const*) (1 samples, 0.18%)</title><rect x="88.0" y="803.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="91.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::OptimizeBlockSize(unsigned long) [clone .plt] (1 samples, 0.18%)</title><rect x="90.1" y="803.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::Version::AddIterators(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::MergeIteratorBuilder*, rocksdb::RangeDelAggregator*) (1 samples, 0.18%)</title><rect x="92.2" y="819.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="95.2" y="830.0"></text>
</g>
<g>
<title>_int_malloc (3 samples, 0.54%)</title><rect x="94.3" y="867.0" width="6.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="97.3" y="878.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) (2 samples, 0.36%)</title><rect x="100.6" y="867.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.6" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="883.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.8" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="867.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.8" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="851.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.8" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="835.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.8" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="819.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.18%)</title><rect x="104.8" y="803.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.8" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::register_finalizer(JavaThread*, oopDesc*) (1 samples, 0.18%)</title><rect x="104.8" y="787.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.8" y="798.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.18%)</title><rect x="104.8" y="771.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (64 samples, 11.43%)</title><rect x="106.9" y="899.0" width="134.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.9" y="910.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (64 samples, 11.43%)</title><rect x="106.9" y="883.0" width="134.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.9" y="894.0">org/rocksdb/Abstr..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (64 samples, 11.43%)</title><rect x="106.9" y="867.0" width="134.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.9" y="878.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.18%)</title><rect x="109.0" y="851.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.0" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (39 samples, 6.96%)</title><rect x="111.1" y="851.0" width="82.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="114.1" y="862.0">Java_org_..</text>
</g>
<g>
<title>jni_GetByteArrayElements (1 samples, 0.18%)</title><rect x="111.1" y="835.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="114.1" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="111.1" y="819.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="114.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.18%)</title><rect x="113.2" y="835.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="116.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (37 samples, 6.61%)</title><rect x="115.4" y="835.0" width="77.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="118.4" y="846.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (37 samples, 6.61%)</title><rect x="115.4" y="819.0" width="77.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="118.4" y="830.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (36 samples, 6.43%)</title><rect x="115.4" y="803.0" width="75.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="118.4" y="814.0">/tmp/lib..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (36 samples, 6.43%)</title><rect x="115.4" y="787.0" width="75.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="118.4" y="798.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (36 samples, 6.43%)</title><rect x="115.4" y="771.0" width="75.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="118.4" y="782.0">rocksdb:..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.18%)</title><rect x="115.4" y="755.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="118.4" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="117.5" y="755.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="120.5" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="119.6" y="755.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="122.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (32 samples, 5.71%)</title><rect x="121.7" y="755.0" width="67.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.7" y="766.0">rocksdb..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (10 samples, 1.79%)</title><rect x="123.8" y="739.0" width="21.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="126.8" y="750.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (10 samples, 1.79%)</title><rect x="123.8" y="723.0" width="21.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="126.8" y="734.0">j..</text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.18%)</title><rect x="128.0" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="131.0" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="130.1" y="707.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="133.1" y="718.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 1.07%)</title><rect x="132.2" y="707.0" width="12.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="135.2" y="718.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="134.3" y="691.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="137.3" y="702.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.18%)</title><rect x="136.4" y="691.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="139.4" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.54%)</title><rect x="138.5" y="691.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="141.5" y="702.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.36%)</title><rect x="140.6" y="675.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="143.6" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (13 samples, 2.32%)</title><rect x="144.9" y="739.0" width="27.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="147.9" y="750.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (13 samples, 2.32%)</title><rect x="144.9" y="723.0" width="27.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="147.9" y="734.0">j..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.18%)</title><rect x="147.0" y="707.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="150.0" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="149.1" y="707.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="152.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.36%)</title><rect x="151.2" y="707.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="154.2" y="718.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 1.43%)</title><rect x="155.4" y="707.0" width="16.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="158.4" y="718.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="161.7" y="691.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="164.7" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.54%)</title><rect x="163.8" y="691.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="166.8" y="702.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.36%)</title><rect x="165.9" y="675.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="168.9" y="686.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.18%)</title><rect x="170.1" y="691.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="173.1" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 1.07%)</title><rect x="172.3" y="739.0" width="12.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="175.3" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.36%)</title><rect x="176.5" y="723.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="179.5" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.36%)</title><rect x="180.7" y="723.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="183.7" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.36%)</title><rect x="184.9" y="739.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="187.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.18%)</title><rect x="189.1" y="755.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="192.1" y="766.0"></text>
</g>
<g>
<title>rocksdb::EncodeKey(std::string*, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.18%)</title><rect x="191.2" y="803.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="194.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="193.3" y="851.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="196.3" y="862.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.18%)</title><rect x="193.3" y="835.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="196.3" y="846.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.18%)</title><rect x="195.4" y="851.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="198.4" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 0.54%)</title><rect x="197.5" y="851.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.5" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (18 samples, 3.21%)</title><rect x="203.9" y="851.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.9" y="862.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (18 samples, 3.21%)</title><rect x="203.9" y="835.0" width="37.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.9" y="846.0">ru/..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.18%)</title><rect x="203.9" y="819.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.9" y="830.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.18%)</title><rect x="203.9" y="803.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.9" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (17 samples, 3.04%)</title><rect x="206.0" y="819.0" width="35.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.0" y="830.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.18%)</title><rect x="206.0" y="803.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.0" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (16 samples, 2.86%)</title><rect x="208.1" y="803.0" width="33.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.1" y="814.0">or..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (16 samples, 2.86%)</title><rect x="208.1" y="787.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.1" y="798.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (14 samples, 2.50%)</title><rect x="212.3" y="771.0" width="29.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="215.3" y="782.0">Ja..</text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.18%)</title><rect x="212.3" y="755.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="215.3" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.18%)</title><rect x="214.4" y="755.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="217.4" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="216.5" y="755.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="219.5" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="216.5" y="739.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="219.5" y="750.0"></text>
</g>
<g>
<title>jni_NewByteArray (8 samples, 1.43%)</title><rect x="218.6" y="755.0" width="16.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="221.6" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="220.7" y="739.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="223.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="222.8" y="739.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.8" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.89%)</title><rect x="224.9" y="739.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="227.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.89%)</title><rect x="224.9" y="723.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="227.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.54%)</title><rect x="227.0" y="707.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="230.0" y="718.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.18%)</title><rect x="231.3" y="691.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="234.3" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="233.4" y="707.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="236.4" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.36%)</title><rect x="235.5" y="755.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="238.5" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="235.5" y="739.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="238.5" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.18%)</title><rect x="237.6" y="739.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="240.6" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.18%)</title><rect x="239.7" y="755.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="242.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (5 samples, 0.89%)</title><rect x="241.8" y="899.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.8" y="910.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (5 samples, 0.89%)</title><rect x="241.8" y="883.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.8" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (5 samples, 0.89%)</title><rect x="241.8" y="867.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.8" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.isOwningHandle (1 samples, 0.18%)</title><rect x="241.8" y="851.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.8" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.18%)</title><rect x="241.8" y="835.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="244.8" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.18%)</title><rect x="241.8" y="819.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="244.8" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (4 samples, 0.71%)</title><rect x="243.9" y="851.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.9" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_disposeInternal (1 samples, 0.18%)</title><rect x="243.9" y="835.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="246.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (3 samples, 0.54%)</title><rect x="246.0" y="835.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="249.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (3 samples, 0.54%)</title><rect x="246.0" y="819.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="249.0" y="830.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.18%)</title><rect x="246.0" y="803.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="249.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (2 samples, 0.36%)</title><rect x="248.1" y="803.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="251.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.36%)</title><rect x="252.3" y="931.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.3" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.36%)</title><rect x="252.3" y="915.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.3" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (2 samples, 0.36%)</title><rect x="252.3" y="899.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.3" y="910.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (2 samples, 0.36%)</title><rect x="252.3" y="883.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.3" y="894.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (1 samples, 0.18%)</title><rect x="252.3" y="867.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="255.3" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.18%)</title><rect x="252.3" y="851.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="255.3" y="862.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.18%)</title><rect x="252.3" y="835.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="255.3" y="846.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.18%)</title><rect x="252.3" y="819.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="255.3" y="830.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.18%)</title><rect x="252.3" y="803.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="255.3" y="814.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.18%)</title><rect x="252.3" y="787.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="255.3" y="798.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.18%)</title><rect x="252.3" y="771.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="255.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.18%)</title><rect x="254.4" y="867.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="257.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 2.32%)</title><rect x="256.5" y="995.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.5" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 2.32%)</title><rect x="256.5" y="979.0" width="27.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 1.79%)</title><rect x="256.5" y="963.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.5" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 1.79%)</title><rect x="256.5" y="947.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.5" y="958.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 1.79%)</title><rect x="256.5" y="931.0" width="21.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.5" y="942.0">j..</text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.71%)</title><rect x="256.5" y="915.0" width="8.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="259.5" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.36%)</title><rect x="256.5" y="899.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.5" y="910.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.18%)</title><rect x="260.8" y="899.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="263.8" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.18%)</title><rect x="262.9" y="899.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="265.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 1.07%)</title><rect x="265.0" y="915.0" width="12.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="268.0" y="926.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (6 samples, 1.07%)</title><rect x="265.0" y="899.0" width="12.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="268.0" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.07%)</title><rect x="265.0" y="883.0" width="12.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="268.0" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 1.07%)</title><rect x="265.0" y="867.0" width="12.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="268.0" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.54%)</title><rect x="271.3" y="851.0" width="6.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="274.3" y="862.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.54%)</title><rect x="271.3" y="835.0" width="6.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="274.3" y="846.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.54%)</title><rect x="271.3" y="819.0" width="6.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="274.3" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.54%)</title><rect x="271.3" y="803.0" width="6.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="274.3" y="814.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.18%)</title><rect x="271.3" y="787.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="274.3" y="798.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.36%)</title><rect x="273.4" y="787.0" width="4.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="276.4" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.36%)</title><rect x="273.4" y="771.0" width="4.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="276.4" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.36%)</title><rect x="273.4" y="755.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="276.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.54%)</title><rect x="277.6" y="963.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.54%)</title><rect x="277.6" y="947.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.54%)</title><rect x="277.6" y="931.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.54%)</title><rect x="277.6" y="915.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.6" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.54%)</title><rect x="277.6" y="899.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.54%)</title><rect x="277.6" y="883.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="280.6" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.54%)</title><rect x="277.6" y="867.0" width="6.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="280.6" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.54%)</title><rect x="277.6" y="851.0" width="6.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="280.6" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.54%)</title><rect x="277.6" y="835.0" width="6.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="280.6" y="846.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.54%)</title><rect x="277.6" y="819.0" width="6.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="280.6" y="830.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.54%)</title><rect x="277.6" y="803.0" width="6.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="280.6" y="814.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.18%)</title><rect x="277.6" y="787.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="280.6" y="798.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.18%)</title><rect x="277.6" y="771.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="280.6" y="782.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.36%)</title><rect x="279.7" y="787.0" width="4.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="282.7" y="798.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.36%)</title><rect x="279.7" y="771.0" width="4.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="282.7" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.36%)</title><rect x="279.7" y="755.0" width="4.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="282.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.18%)</title><rect x="283.9" y="995.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer$FinalizerThread.run (1 samples, 0.18%)</title><rect x="286.0" y="1043.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.runFinalizer (1 samples, 0.18%)</title><rect x="286.0" y="1027.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/System$2.invokeFinalize (1 samples, 0.18%)</title><rect x="286.0" y="1011.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.0" y="1022.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.finalize (1 samples, 0.18%)</title><rect x="286.0" y="995.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.0" y="1006.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.18%)</title><rect x="286.0" y="979.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.18%)</title><rect x="288.1" y="1043.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="288.1" y="1027.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.1" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (384 samples, 68.57%)</title><rect x="290.2" y="1043.0" width="809.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.2" y="1054.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.18%)</title><rect x="294.5" y="1027.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.5" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7 samples, 1.25%)</title><rect x="296.6" y="1027.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (7 samples, 1.25%)</title><rect x="296.6" y="1011.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 1.07%)</title><rect x="298.7" y="995.0" width="12.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="301.7" y="1006.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.18%)</title><rect x="298.7" y="979.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="301.7" y="990.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.89%)</title><rect x="300.8" y="979.0" width="10.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="303.8" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.71%)</title><rect x="302.9" y="963.0" width="8.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="305.9" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.71%)</title><rect x="302.9" y="947.0" width="8.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="305.9" y="958.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (4 samples, 0.71%)</title><rect x="302.9" y="931.0" width="8.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="305.9" y="942.0"></text>
</g>
<g>
<title>do_epoll_wait (4 samples, 0.71%)</title><rect x="302.9" y="915.0" width="8.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="305.9" y="926.0"></text>
</g>
<g>
<title>ep_poll (4 samples, 0.71%)</title><rect x="302.9" y="899.0" width="8.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="305.9" y="910.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (3 samples, 0.54%)</title><rect x="302.9" y="883.0" width="6.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="305.9" y="894.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.54%)</title><rect x="302.9" y="867.0" width="6.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="305.9" y="878.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.36%)</title><rect x="302.9" y="851.0" width="4.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="305.9" y="862.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.36%)</title><rect x="302.9" y="835.0" width="4.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="305.9" y="846.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.18%)</title><rect x="305.0" y="819.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="308.0" y="830.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.18%)</title><rect x="307.1" y="851.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="310.1" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.18%)</title><rect x="309.2" y="883.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="312.2" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.18%)</title><rect x="309.2" y="867.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="312.2" y="878.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.18%)</title><rect x="309.2" y="851.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="312.2" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.18%)</title><rect x="309.2" y="835.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="312.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (374 samples, 66.79%)</title><rect x="311.3" y="1027.0" width="788.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.3" y="1038.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (374 samples, 66.79%)</title><rect x="311.3" y="1011.0" width="788.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="314.3" y="1022.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (368 samples, 65.71%)</title><rect x="311.3" y="995.0" width="775.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.3" y="1006.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (362 samples, 64.64%)</title><rect x="313.4" y="979.0" width="762.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.4" y="990.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (362 samples, 64.64%)</title><rect x="313.4" y="963.0" width="762.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.4" y="974.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (362 samples, 64.64%)</title><rect x="313.4" y="947.0" width="762.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.4" y="958.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27 samples, 4.82%)</title><rect x="313.4" y="931.0" width="56.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.4" y="942.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (25 samples, 4.46%)</title><rect x="315.5" y="915.0" width="52.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.5" y="926.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.18%)</title><rect x="315.5" y="899.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.5" y="910.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.18%)</title><rect x="315.5" y="883.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.5" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.18%)</title><rect x="315.5" y="867.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.5" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.18%)</title><rect x="315.5" y="851.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.18%)</title><rect x="315.5" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="318.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 4.29%)</title><rect x="317.6" y="899.0" width="50.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.6" y="910.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 4.29%)</title><rect x="317.6" y="883.0" width="50.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="320.6" y="894.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (24 samples, 4.29%)</title><rect x="317.6" y="867.0" width="50.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.6" y="878.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (24 samples, 4.29%)</title><rect x="317.6" y="851.0" width="50.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.6" y="862.0">one/n..</text>
</g>
<g>
<title>__libc_send (24 samples, 4.29%)</title><rect x="317.6" y="835.0" width="50.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.6" y="846.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 4.11%)</title><rect x="319.7" y="819.0" width="48.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="322.7" y="830.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (23 samples, 4.11%)</title><rect x="319.7" y="803.0" width="48.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="322.7" y="814.0">do_s..</text>
</g>
<g>
<title>__x64_sys_sendto (23 samples, 4.11%)</title><rect x="319.7" y="787.0" width="48.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="322.7" y="798.0">__x6..</text>
</g>
<g>
<title>__sys_sendto (23 samples, 4.11%)</title><rect x="319.7" y="771.0" width="48.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.7" y="782.0">__sy..</text>
</g>
<g>
<title>sock_sendmsg (23 samples, 4.11%)</title><rect x="319.7" y="755.0" width="48.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="322.7" y="766.0">sock..</text>
</g>
<g>
<title>inet6_sendmsg (22 samples, 3.93%)</title><rect x="319.7" y="739.0" width="46.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="322.7" y="750.0">inet..</text>
</g>
<g>
<title>tcp_sendmsg (22 samples, 3.93%)</title><rect x="319.7" y="723.0" width="46.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="322.7" y="734.0">tcp_..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.18%)</title><rect x="319.7" y="707.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="322.7" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.18%)</title><rect x="319.7" y="691.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="322.7" y="702.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (21 samples, 3.75%)</title><rect x="321.9" y="707.0" width="44.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="324.9" y="718.0">tcp_..</text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.18%)</title><rect x="321.9" y="691.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="324.9" y="702.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.18%)</title><rect x="324.0" y="691.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="327.0" y="702.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.18%)</title><rect x="326.1" y="691.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="329.1" y="702.0"></text>
</g>
<g>
<title>tcp_push (17 samples, 3.04%)</title><rect x="328.2" y="691.0" width="35.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="331.2" y="702.0">tcp..</text>
</g>
<g>
<title>__tcp_push_pending_frames (17 samples, 3.04%)</title><rect x="328.2" y="675.0" width="35.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="331.2" y="686.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (17 samples, 3.04%)</title><rect x="328.2" y="659.0" width="35.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="331.2" y="670.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (17 samples, 3.04%)</title><rect x="328.2" y="643.0" width="35.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="331.2" y="654.0">__t..</text>
</g>
<g>
<title>ip_queue_xmit (17 samples, 3.04%)</title><rect x="328.2" y="627.0" width="35.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="331.2" y="638.0">ip_..</text>
</g>
<g>
<title>__ip_queue_xmit (17 samples, 3.04%)</title><rect x="328.2" y="611.0" width="35.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="331.2" y="622.0">__i..</text>
</g>
<g>
<title>ip_local_out (17 samples, 3.04%)</title><rect x="328.2" y="595.0" width="35.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="331.2" y="606.0">ip_..</text>
</g>
<g>
<title>ip_output (17 samples, 3.04%)</title><rect x="328.2" y="579.0" width="35.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="331.2" y="590.0">ip_..</text>
</g>
<g>
<title>ip_finish_output (17 samples, 3.04%)</title><rect x="328.2" y="563.0" width="35.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="331.2" y="574.0">ip_..</text>
</g>
<g>
<title>__ip_finish_output (17 samples, 3.04%)</title><rect x="328.2" y="547.0" width="35.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="331.2" y="558.0">__i..</text>
</g>
<g>
<title>ip_finish_output2 (17 samples, 3.04%)</title><rect x="328.2" y="531.0" width="35.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.2" y="542.0">ip_..</text>
</g>
<g>
<title>__local_bh_enable_ip (15 samples, 2.68%)</title><rect x="330.3" y="515.0" width="31.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="333.3" y="526.0">__..</text>
</g>
<g>
<title>do_softirq.part.20 (15 samples, 2.68%)</title><rect x="330.3" y="499.0" width="31.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="333.3" y="510.0">do..</text>
</g>
<g>
<title>do_softirq_own_stack (15 samples, 2.68%)</title><rect x="330.3" y="483.0" width="31.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="333.3" y="494.0">do..</text>
</g>
<g>
<title>__softirqentry_text_start (15 samples, 2.68%)</title><rect x="330.3" y="467.0" width="31.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="333.3" y="478.0">__..</text>
</g>
<g>
<title>net_rx_action (15 samples, 2.68%)</title><rect x="330.3" y="451.0" width="31.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="333.3" y="462.0">ne..</text>
</g>
<g>
<title>process_backlog (15 samples, 2.68%)</title><rect x="330.3" y="435.0" width="31.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="333.3" y="446.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb (15 samples, 2.68%)</title><rect x="330.3" y="419.0" width="31.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="333.3" y="430.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (15 samples, 2.68%)</title><rect x="330.3" y="403.0" width="31.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="333.3" y="414.0">__..</text>
</g>
<g>
<title>ip_rcv (15 samples, 2.68%)</title><rect x="330.3" y="387.0" width="31.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="333.3" y="398.0">ip..</text>
</g>
<g>
<title>ip_rcv_finish (15 samples, 2.68%)</title><rect x="330.3" y="371.0" width="31.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="333.3" y="382.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (15 samples, 2.68%)</title><rect x="330.3" y="355.0" width="31.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="333.3" y="366.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (15 samples, 2.68%)</title><rect x="330.3" y="339.0" width="31.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="333.3" y="350.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (15 samples, 2.68%)</title><rect x="330.3" y="323.0" width="31.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="333.3" y="334.0">ip..</text>
</g>
<g>
<title>tcp_v4_rcv (15 samples, 2.68%)</title><rect x="330.3" y="307.0" width="31.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="333.3" y="318.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.18%)</title><rect x="330.3" y="291.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="333.3" y="302.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.18%)</title><rect x="332.4" y="291.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="335.4" y="302.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.18%)</title><rect x="332.4" y="275.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="335.4" y="286.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (13 samples, 2.32%)</title><rect x="334.5" y="291.0" width="27.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="337.5" y="302.0">t..</text>
</g>
<g>
<title>tcp_rcv_established (13 samples, 2.32%)</title><rect x="334.5" y="275.0" width="27.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.5" y="286.0">t..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.54%)</title><rect x="336.6" y="259.0" width="6.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="339.6" y="270.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.54%)</title><rect x="336.6" y="243.0" width="6.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="339.6" y="254.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.54%)</title><rect x="336.6" y="227.0" width="6.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="339.6" y="238.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.54%)</title><rect x="336.6" y="211.0" width="6.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="339.6" y="222.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.54%)</title><rect x="336.6" y="195.0" width="6.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="339.6" y="206.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.36%)</title><rect x="342.9" y="259.0" width="4.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="345.9" y="270.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.18%)</title><rect x="345.0" y="243.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="348.0" y="254.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.18%)</title><rect x="345.0" y="227.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="348.0" y="238.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.18%)</title><rect x="345.0" y="211.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="348.0" y="222.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.18%)</title><rect x="345.0" y="195.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="348.0" y="206.0"></text>
</g>
<g>
<title>tcp_data_ready (7 samples, 1.25%)</title><rect x="347.1" y="259.0" width="14.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="350.1" y="270.0"></text>
</g>
<g>
<title>sock_def_readable (7 samples, 1.25%)</title><rect x="347.1" y="243.0" width="14.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="350.1" y="254.0"></text>
</g>
<g>
<title>__wake_up_sync_key (7 samples, 1.25%)</title><rect x="347.1" y="227.0" width="14.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="350.1" y="238.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 1.25%)</title><rect x="347.1" y="211.0" width="14.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="350.1" y="222.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 1.25%)</title><rect x="347.1" y="195.0" width="14.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="350.1" y="206.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.18%)</title><rect x="361.9" y="515.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="364.9" y="526.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.18%)</title><rect x="361.9" y="499.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="364.9" y="510.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.18%)</title><rect x="364.0" y="691.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="367.0" y="702.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.18%)</title><rect x="364.0" y="675.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="367.0" y="686.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.18%)</title><rect x="366.1" y="739.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="369.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.18%)</title><rect x="368.2" y="915.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.18%)</title><rect x="368.2" y="899.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.18%)</title><rect x="368.2" y="883.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.18%)</title><rect x="368.2" y="867.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.18%)</title><rect x="368.2" y="851.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.2" y="862.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.18%)</title><rect x="368.2" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.18%)</title><rect x="370.3" y="931.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.3" y="942.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.18%)</title><rect x="370.3" y="915.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.3" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (334 samples, 59.64%)</title><rect x="372.4" y="931.0" width="703.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="375.4" y="942.0">ru/mail/polis/service/stasyanoi/CustomServer.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (46 samples, 8.21%)</title><rect x="372.4" y="915.0" width="97.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.4" y="926.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (46 samples, 8.21%)</title><rect x="372.4" y="899.0" width="97.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.4" y="910.0">java/lang/i..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/1219091857.get$Lambda (33 samples, 5.89%)</title><rect x="399.8" y="883.0" width="69.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.8" y="894.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/1219091857.&lt;init&gt; (33 samples, 5.89%)</title><rect x="399.8" y="867.0" width="69.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.8" y="878.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (6 samples, 1.07%)</title><rect x="469.4" y="915.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.07%)</title><rect x="469.4" y="899.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="472.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.07%)</title><rect x="469.4" y="883.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 1.07%)</title><rect x="469.4" y="867.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.07%)</title><rect x="469.4" y="851.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.07%)</title><rect x="469.4" y="835.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.07%)</title><rect x="469.4" y="819.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.07%)</title><rect x="469.4" y="803.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 1.07%)</title><rect x="469.4" y="787.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.4" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.18%)</title><rect x="469.4" y="771.0" width="2.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="472.4" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.18%)</title><rect x="469.4" y="755.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.4" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.89%)</title><rect x="471.5" y="771.0" width="10.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="474.5" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.71%)</title><rect x="473.6" y="755.0" width="8.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="476.6" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.71%)</title><rect x="473.6" y="739.0" width="8.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="476.6" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.71%)</title><rect x="473.6" y="723.0" width="8.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="476.6" y="734.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.71%)</title><rect x="473.6" y="707.0" width="8.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="476.6" y="718.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.71%)</title><rect x="473.6" y="691.0" width="8.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="476.6" y="702.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.71%)</title><rect x="473.6" y="675.0" width="8.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="476.6" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.54%)</title><rect x="475.7" y="659.0" width="6.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="478.7" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.54%)</title><rect x="475.7" y="643.0" width="6.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="478.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.18%)</title><rect x="482.0" y="915.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.0" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.18%)</title><rect x="482.0" y="899.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.18%)</title><rect x="482.0" y="883.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.18%)</title><rect x="482.0" y="867.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.18%)</title><rect x="482.0" y="851.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (78 samples, 13.93%)</title><rect x="484.1" y="915.0" width="164.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="487.1" y="926.0">ru/mail/polis/dao/sta..</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="484.1" y="899.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="487.1" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.18%)</title><rect x="486.2" y="899.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.2" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="486.2" y="883.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.2" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.18%)</title><rect x="486.2" y="867.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="489.2" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.18%)</title><rect x="486.2" y="851.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="489.2" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.18%)</title><rect x="488.3" y="899.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.3" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.18%)</title><rect x="488.3" y="883.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.3" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.18%)</title><rect x="488.3" y="867.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.3" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="488.3" y="851.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="488.3" y="835.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.3" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="488.3" y="819.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.3" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (73 samples, 13.04%)</title><rect x="490.4" y="899.0" width="153.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.4" y="910.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (73 samples, 13.04%)</title><rect x="490.4" y="883.0" width="153.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="493.4" y="894.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (6 samples, 1.07%)</title><rect x="492.5" y="867.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.5" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (4 samples, 0.71%)</title><rect x="492.5" y="851.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.5" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (2 samples, 0.36%)</title><rect x="492.5" y="835.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="495.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (2 samples, 0.36%)</title><rect x="492.5" y="819.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::GetRangeDelAggregator() (1 samples, 0.18%)</title><rect x="492.5" y="803.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (1 samples, 0.18%)</title><rect x="494.6" y="803.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="497.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.18%)</title><rect x="494.6" y="787.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.18%)</title><rect x="496.7" y="835.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="499.7" y="846.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) (1 samples, 0.18%)</title><rect x="498.9" y="835.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="501.9" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="851.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.0" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="835.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.0" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="819.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.0" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="803.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.0" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="787.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.36%)</title><rect x="501.0" y="771.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.18%)</title><rect x="501.0" y="755.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="504.0" y="766.0"></text>
</g>
<g>
<title>LatestMethodCache::get_method() (1 samples, 0.18%)</title><rect x="501.0" y="739.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="504.0" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::register_finalizer(JavaThread*, oopDesc*) (1 samples, 0.18%)</title><rect x="503.1" y="755.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.18%)</title><rect x="503.1" y="739.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="506.1" y="750.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.18%)</title><rect x="503.1" y="723.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (62 samples, 11.07%)</title><rect x="505.2" y="867.0" width="130.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.2" y="878.0">ru/mail/polis/se..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (62 samples, 11.07%)</title><rect x="505.2" y="851.0" width="130.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.2" y="862.0">org/rocksdb/Abst..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (62 samples, 11.07%)</title><rect x="505.2" y="835.0" width="130.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.2" y="846.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.18%)</title><rect x="505.2" y="819.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.2" y="830.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (34 samples, 6.07%)</title><rect x="507.3" y="819.0" width="71.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="510.3" y="830.0">Java_org..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.18%)</title><rect x="507.3" y="803.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="510.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (33 samples, 5.89%)</title><rect x="509.4" y="803.0" width="69.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.4" y="814.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (33 samples, 5.89%)</title><rect x="509.4" y="787.0" width="69.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="512.4" y="798.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (32 samples, 5.71%)</title><rect x="511.5" y="771.0" width="67.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="514.5" y="782.0">/tmp/li..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (31 samples, 5.54%)</title><rect x="513.6" y="755.0" width="65.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="516.6" y="766.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (30 samples, 5.36%)</title><rect x="515.7" y="739.0" width="63.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="518.7" y="750.0">rocksdb..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.18%)</title><rect x="515.7" y="723.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="518.7" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="517.8" y="723.0" width="2.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="520.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (27 samples, 4.82%)</title><rect x="519.9" y="723.0" width="56.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.9" y="734.0">rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (11 samples, 1.96%)</title><rect x="522.0" y="707.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="525.0" y="718.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (10 samples, 1.79%)</title><rect x="524.1" y="691.0" width="21.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="527.1" y="702.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="526.2" y="675.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="529.2" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 1.43%)</title><rect x="528.4" y="675.0" width="16.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="531.4" y="686.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.18%)</title><rect x="532.6" y="659.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="535.6" y="670.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.18%)</title><rect x="534.7" y="659.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="537.7" y="670.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="536.8" y="659.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="539.8" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.36%)</title><rect x="538.9" y="659.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="541.9" y="670.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.18%)</title><rect x="543.1" y="659.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="546.1" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (10 samples, 1.79%)</title><rect x="545.2" y="707.0" width="21.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="548.2" y="718.0">J..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.18%)</title><rect x="547.3" y="691.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.3" y="702.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (8 samples, 1.43%)</title><rect x="549.4" y="691.0" width="16.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="552.4" y="702.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.18%)</title><rect x="549.4" y="675.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="552.4" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="551.5" y="675.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="554.5" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 1.07%)</title><rect x="553.6" y="675.0" width="12.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="556.6" y="686.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.18%)</title><rect x="555.8" y="659.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="558.8" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.54%)</title><rect x="557.9" y="659.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="560.9" y="670.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.18%)</title><rect x="562.1" y="643.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.1" y="654.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.18%)</title><rect x="564.2" y="659.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="567.2" y="670.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.18%)</title><rect x="566.3" y="707.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="569.3" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.36%)</title><rect x="568.4" y="707.0" width="4.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="571.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.36%)</title><rect x="568.4" y="691.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="571.4" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.18%)</title><rect x="572.6" y="707.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="575.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.18%)</title><rect x="574.7" y="707.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="577.7" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.18%)</title><rect x="574.7" y="691.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="577.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.18%)</title><rect x="576.8" y="723.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="579.8" y="734.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.18%)</title><rect x="578.9" y="819.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="581.9" y="830.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.36%)</title><rect x="581.0" y="819.0" width="4.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="584.0" y="830.0"></text>
</g>
<g>
<title>jni_GetByteArrayElements (1 samples, 0.18%)</title><rect x="585.2" y="819.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="588.2" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (4 samples, 0.71%)</title><rect x="587.4" y="819.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.4" y="830.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.18%)</title><rect x="593.7" y="803.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="596.7" y="814.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.18%)</title><rect x="593.7" y="787.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="596.7" y="798.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.18%)</title><rect x="593.7" y="771.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="596.7" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.18%)</title><rect x="593.7" y="755.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="596.7" y="766.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.18%)</title><rect x="593.7" y="739.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="596.7" y="750.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.18%)</title><rect x="593.7" y="723.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="596.7" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.18%)</title><rect x="593.7" y="707.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="596.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (19 samples, 3.39%)</title><rect x="595.8" y="819.0" width="40.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.8" y="830.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (18 samples, 3.21%)</title><rect x="597.9" y="803.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.9" y="814.0">ru/..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (18 samples, 3.21%)</title><rect x="597.9" y="787.0" width="37.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="600.9" y="798.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.18%)</title><rect x="597.9" y="771.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.9" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (17 samples, 3.04%)</title><rect x="600.0" y="771.0" width="35.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.0" y="782.0">org..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (17 samples, 3.04%)</title><rect x="600.0" y="755.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="766.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (16 samples, 2.86%)</title><rect x="600.0" y="739.0" width="33.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="603.0" y="750.0">Ja..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="600.0" y="723.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="603.0" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="600.0" y="707.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 1.07%)</title><rect x="602.1" y="723.0" width="12.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="605.1" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.18%)</title><rect x="602.1" y="707.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="605.1" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.54%)</title><rect x="604.2" y="707.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.2" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.36%)</title><rect x="610.5" y="707.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.18%)</title><rect x="612.6" y="691.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="615.6" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.18%)</title><rect x="612.6" y="675.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="615.6" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 1.61%)</title><rect x="614.7" y="723.0" width="19.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="617.7" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.36%)</title><rect x="621.1" y="707.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.71%)</title><rect x="625.3" y="707.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.3" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="633.7" y="739.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="636.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (4 samples, 0.71%)</title><rect x="635.8" y="867.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.8" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (4 samples, 0.71%)</title><rect x="635.8" y="851.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.8" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (4 samples, 0.71%)</title><rect x="635.8" y="835.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.8" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (4 samples, 0.71%)</title><rect x="635.8" y="819.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (4 samples, 0.71%)</title><rect x="635.8" y="803.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="638.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (4 samples, 0.71%)</title><rect x="635.8" y="787.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="638.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 0.54%)</title><rect x="635.8" y="771.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="638.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (3 samples, 0.54%)</title><rect x="635.8" y="755.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="638.8" y="766.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.36%)</title><rect x="635.8" y="739.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="638.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.18%)</title><rect x="640.0" y="739.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="643.0" y="750.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (1 samples, 0.18%)</title><rect x="640.0" y="723.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="643.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.18%)</title><rect x="642.1" y="771.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="645.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.36%)</title><rect x="644.2" y="899.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.2" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (2 samples, 0.36%)</title><rect x="644.2" y="883.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.2" y="894.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (1 samples, 0.18%)</title><rect x="644.2" y="867.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.2" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (1 samples, 0.18%)</title><rect x="644.2" y="851.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.2" y="862.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (1 samples, 0.18%)</title><rect x="644.2" y="835.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="647.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.18%)</title><rect x="644.2" y="819.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="647.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.18%)</title><rect x="644.2" y="803.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.2" y="814.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.18%)</title><rect x="644.2" y="787.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="647.2" y="798.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.18%)</title><rect x="644.2" y="771.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="647.2" y="782.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.18%)</title><rect x="644.2" y="755.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="647.2" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.18%)</title><rect x="644.2" y="739.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="647.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.18%)</title><rect x="644.2" y="723.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="647.2" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (1 samples, 0.18%)</title><rect x="646.4" y="867.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.4" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (1 samples, 0.18%)</title><rect x="646.4" y="851.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.4" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_value0 (1 samples, 0.18%)</title><rect x="646.4" y="835.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="649.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::value() const (1 samples, 0.18%)</title><rect x="646.4" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="649.4" y="830.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (1 samples, 0.18%)</title><rect x="646.4" y="803.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="649.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.awaitUntilReady (203 samples, 36.25%)</title><rect x="648.5" y="915.0" width="427.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="651.5" y="926.0">ru/mail/polis/service/stasyanoi/CustomServer.awaitUntilReady</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.71%)</title><rect x="1076.2" y="979.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.2" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.36%)</title><rect x="1080.4" y="963.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1083.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.18%)</title><rect x="1084.6" y="979.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1087.6" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.18%)</title><rect x="1084.6" y="963.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.6" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (6 samples, 1.07%)</title><rect x="1086.8" y="995.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1089.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (6 samples, 1.07%)</title><rect x="1086.8" y="979.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1089.8" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.36%)</title><rect x="1086.8" y="963.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1089.8" y="974.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.36%)</title><rect x="1086.8" y="947.0" width="4.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1089.8" y="958.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.18%)</title><rect x="1086.8" y="931.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.8" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.18%)</title><rect x="1088.9" y="931.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.9" y="942.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 0.71%)</title><rect x="1091.0" y="963.0" width="8.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1094.0" y="974.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.71%)</title><rect x="1091.0" y="947.0" width="8.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1094.0" y="958.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.71%)</title><rect x="1091.0" y="931.0" width="8.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1094.0" y="942.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 0.71%)</title><rect x="1091.0" y="915.0" width="8.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1094.0" y="926.0"></text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 0.71%)</title><rect x="1091.0" y="899.0" width="8.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1094.0" y="910.0"></text>
</g>
<g>
<title>sock_recvmsg (4 samples, 0.71%)</title><rect x="1091.0" y="883.0" width="8.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1094.0" y="894.0"></text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 0.36%)</title><rect x="1091.0" y="867.0" width="4.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1094.0" y="878.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.36%)</title><rect x="1091.0" y="851.0" width="4.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1094.0" y="862.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.36%)</title><rect x="1091.0" y="835.0" width="4.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1094.0" y="846.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 0.36%)</title><rect x="1091.0" y="819.0" width="4.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1094.0" y="830.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.18%)</title><rect x="1093.1" y="803.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1096.1" y="814.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.18%)</title><rect x="1093.1" y="787.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1096.1" y="798.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.18%)</title><rect x="1093.1" y="771.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1096.1" y="782.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.36%)</title><rect x="1095.2" y="867.0" width="4.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1098.2" y="878.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.36%)</title><rect x="1095.2" y="851.0" width="4.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1098.2" y="862.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.36%)</title><rect x="1095.2" y="835.0" width="4.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1098.2" y="846.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.36%)</title><rect x="1095.2" y="819.0" width="4.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1098.2" y="830.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.36%)</title><rect x="1095.2" y="803.0" width="4.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1098.2" y="814.0"></text>
</g>
<g>
<title>aa_label_next_confined (1 samples, 0.18%)</title><rect x="1097.3" y="787.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1100.3" y="798.0"></text>
</g>
<g>
<title>start_thread (43 samples, 7.68%)</title><rect x="1099.4" y="1043.0" width="90.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1102.4" y="1054.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (43 samples, 7.68%)</title><rect x="1099.4" y="1027.0" width="90.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1102.4" y="1038.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (43 samples, 7.68%)</title><rect x="1099.4" y="1011.0" width="90.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.4" y="1022.0">Thread::ca..</text>
</g>
<g>
<title>JavaThread::run() (43 samples, 7.68%)</title><rect x="1099.4" y="995.0" width="90.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.4" y="1006.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (43 samples, 7.68%)</title><rect x="1099.4" y="979.0" width="90.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.4" y="990.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (43 samples, 7.68%)</title><rect x="1099.4" y="963.0" width="90.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.4" y="974.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (41 samples, 7.32%)</title><rect x="1099.4" y="947.0" width="86.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.4" y="958.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (41 samples, 7.32%)</title><rect x="1099.4" y="931.0" width="86.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.4" y="942.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 3.21%)</title><rect x="1099.4" y="915.0" width="37.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.4" y="926.0">Com..</text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.18%)</title><rect x="1099.4" y="899.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.4" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.18%)</title><rect x="1099.4" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.18%)</title><rect x="1101.5" y="899.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.18%)</title><rect x="1101.5" y="883.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 2.86%)</title><rect x="1103.6" y="899.0" width="33.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.6" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.36%)</title><rect x="1103.6" y="883.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.18%)</title><rect x="1103.6" y="867.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.18%)</title><rect x="1103.6" y="851.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.6" y="862.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.18%)</title><rect x="1103.6" y="835.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.6" y="846.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::rule() const (1 samples, 0.18%)</title><rect x="1105.7" y="867.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.54%)</title><rect x="1107.8" y="883.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.18%)</title><rect x="1109.9" y="867.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.18%)</title><rect x="1112.0" y="867.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.0" y="878.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.18%)</title><rect x="1112.0" y="851.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.18%)</title><rect x="1114.1" y="883.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.1" y="894.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.18%)</title><rect x="1114.1" y="867.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.36%)</title><rect x="1116.3" y="883.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.54%)</title><rect x="1120.5" y="883.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.36%)</title><rect x="1122.6" y="867.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.6" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.36%)</title><rect x="1126.8" y="883.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.8" y="894.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.18%)</title><rect x="1126.8" y="867.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.8" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.18%)</title><rect x="1128.9" y="867.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.18%)</title><rect x="1128.9" y="851.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.9" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.54%)</title><rect x="1131.0" y="883.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.36%)</title><rect x="1133.1" y="867.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.18%)</title><rect x="1133.1" y="851.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1135.2" y="851.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.2" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 2.86%)</title><rect x="1137.3" y="915.0" width="33.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="926.0">Co..</text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.18%)</title><rect x="1137.3" y="899.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.3" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.18%)</title><rect x="1139.4" y="899.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="910.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.18%)</title><rect x="1139.4" y="883.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.4" y="894.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (7 samples, 1.25%)</title><rect x="1141.5" y="899.0" width="14.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 1.25%)</title><rect x="1141.5" y="883.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.5" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1141.5" y="867.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.5" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.18%)</title><rect x="1141.5" y="851.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.18%)</title><rect x="1143.6" y="867.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.36%)</title><rect x="1145.8" y="867.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.18%)</title><rect x="1147.9" y="851.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.54%)</title><rect x="1150.0" y="867.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.36%)</title><rect x="1152.1" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.18%)</title><rect x="1152.1" y="835.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.18%)</title><rect x="1154.2" y="835.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.18%)</title><rect x="1154.2" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.258] (1 samples, 0.18%)</title><rect x="1156.3" y="899.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.18%)</title><rect x="1158.4" y="899.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.18%)</title><rect x="1158.4" y="883.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 0.71%)</title><rect x="1160.5" y="899.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.18%)</title><rect x="1160.5" y="883.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.18%)</title><rect x="1162.6" y="883.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.18%)</title><rect x="1162.6" y="867.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.36%)</title><rect x="1164.7" y="883.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.36%)</title><rect x="1164.7" y="867.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1164.7" y="851.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="862.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.18%)</title><rect x="1164.7" y="835.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="846.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.18%)</title><rect x="1164.7" y="819.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="830.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.18%)</title><rect x="1164.7" y="803.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.18%)</title><rect x="1166.8" y="851.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.18%)</title><rect x="1166.8" y="835.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.18%)</title><rect x="1166.8" y="819.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.18%)</title><rect x="1168.9" y="899.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1168.9" y="883.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1168.9" y="867.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1168.9" y="851.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.25%)</title><rect x="1171.0" y="915.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.25%)</title><rect x="1171.0" y="899.0" width="14.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.25%)</title><rect x="1171.0" y="883.0" width="14.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.25%)</title><rect x="1171.0" y="867.0" width="14.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.25%)</title><rect x="1171.0" y="851.0" width="14.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.07%)</title><rect x="1171.0" y="835.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.07%)</title><rect x="1171.0" y="819.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.07%)</title><rect x="1171.0" y="803.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.07%)</title><rect x="1171.0" y="787.0" width="12.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.07%)</title><rect x="1171.0" y="771.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.07%)</title><rect x="1171.0" y="755.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.07%)</title><rect x="1171.0" y="739.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.89%)</title><rect x="1171.0" y="723.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.89%)</title><rect x="1171.0" y="707.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.89%)</title><rect x="1171.0" y="691.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.89%)</title><rect x="1171.0" y="675.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.89%)</title><rect x="1171.0" y="659.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.89%)</title><rect x="1171.0" y="643.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.89%)</title><rect x="1171.0" y="627.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.89%)</title><rect x="1171.0" y="611.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.89%)</title><rect x="1171.0" y="595.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.89%)</title><rect x="1171.0" y="579.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.89%)</title><rect x="1171.0" y="563.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.89%)</title><rect x="1171.0" y="547.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.89%)</title><rect x="1171.0" y="531.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.89%)</title><rect x="1171.0" y="515.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.89%)</title><rect x="1171.0" y="499.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.89%)</title><rect x="1171.0" y="483.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.89%)</title><rect x="1171.0" y="467.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.54%)</title><rect x="1171.0" y="451.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.54%)</title><rect x="1171.0" y="435.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.54%)</title><rect x="1171.0" y="419.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.54%)</title><rect x="1171.0" y="403.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.54%)</title><rect x="1171.0" y="387.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.54%)</title><rect x="1171.0" y="371.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.54%)</title><rect x="1171.0" y="355.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.36%)</title><rect x="1171.0" y="339.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.36%)</title><rect x="1171.0" y="323.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.36%)</title><rect x="1171.0" y="307.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.36%)</title><rect x="1171.0" y="291.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.36%)</title><rect x="1171.0" y="275.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.36%)</title><rect x="1171.0" y="259.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.36%)</title><rect x="1171.0" y="243.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.36%)</title><rect x="1171.0" y="227.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.18%)</title><rect x="1171.0" y="211.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.18%)</title><rect x="1171.0" y="195.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.18%)</title><rect x="1171.0" y="179.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.18%)</title><rect x="1171.0" y="163.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1171.0" y="147.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.18%)</title><rect x="1171.0" y="131.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1171.0" y="115.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1171.0" y="99.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.18%)</title><rect x="1171.0" y="83.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="94.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.18%)</title><rect x="1171.0" y="67.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.18%)</title><rect x="1173.1" y="211.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.18%)</title><rect x="1173.1" y="195.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1173.1" y="179.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1173.1" y="163.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.1" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1173.1" y="147.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1173.1" y="131.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="142.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1173.1" y="115.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="126.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.18%)</title><rect x="1173.1" y="99.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.18%)</title><rect x="1173.1" y="83.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.18%)</title><rect x="1173.1" y="67.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="78.0"></text>
</g>
<g>
<title>Klass::array_klass_or_null(int) (1 samples, 0.18%)</title><rect x="1173.1" y="51.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="62.0"></text>
</g>
<g>
<title>TypeArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.18%)</title><rect x="1173.1" y="35.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1175.2" y="339.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1175.2" y="323.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.84] (1 samples, 0.18%)</title><rect x="1175.2" y="307.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="318.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.18%)</title><rect x="1175.2" y="291.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.18%)</title><rect x="1175.2" y="275.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1178.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.18%)</title><rect x="1177.4" y="451.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.18%)</title><rect x="1177.4" y="435.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.18%)</title><rect x="1177.4" y="419.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.18%)</title><rect x="1177.4" y="403.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.18%)</title><rect x="1177.4" y="387.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.18%)</title><rect x="1177.4" y="371.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.18%)</title><rect x="1179.5" y="451.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.18%)</title><rect x="1179.5" y="435.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.18%)</title><rect x="1179.5" y="419.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.18%)</title><rect x="1179.5" y="403.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.18%)</title><rect x="1179.5" y="387.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="723.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="707.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="691.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="675.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="659.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="643.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="627.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="595.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="579.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="563.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="547.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="531.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="515.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="499.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="483.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="467.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="451.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="435.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="419.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="403.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="387.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="371.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="355.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="339.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="323.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="307.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="291.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="275.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="259.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="243.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="227.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="211.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1181.6" y="195.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1181.6" y="179.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1181.6" y="163.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1181.6" y="147.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1181.6" y="131.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1181.6" y="115.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="126.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.18%)</title><rect x="1181.6" y="99.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="110.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.18%)</title><rect x="1181.6" y="83.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="94.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.18%)</title><rect x="1181.6" y="67.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1184.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.18%)</title><rect x="1183.7" y="835.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.18%)</title><rect x="1183.7" y="819.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.18%)</title><rect x="1183.7" y="803.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="814.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.18%)</title><rect x="1183.7" y="787.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.36%)</title><rect x="1185.8" y="947.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.36%)</title><rect x="1185.8" y="931.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.36%)</title><rect x="1185.8" y="915.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.36%)</title><rect x="1185.8" y="899.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.36%)</title><rect x="1185.8" y="883.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="894.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.36%)</title><rect x="1185.8" y="867.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="878.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.36%)</title><rect x="1185.8" y="851.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.36%)</title><rect x="1185.8" y="835.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.36%)</title><rect x="1185.8" y="819.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.36%)</title><rect x="1185.8" y="803.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.36%)</title><rect x="1185.8" y="787.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.36%)</title><rect x="1185.8" y="771.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.36%)</title><rect x="1185.8" y="755.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.36%)</title><rect x="1185.8" y="739.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.36%)</title><rect x="1185.8" y="723.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.36%)</title><rect x="1185.8" y="707.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.36%)</title><rect x="1185.8" y="691.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.36%)</title><rect x="1185.8" y="675.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.36%)</title><rect x="1185.8" y="659.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.36%)</title><rect x="1185.8" y="643.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.36%)</title><rect x="1185.8" y="627.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.36%)</title><rect x="1185.8" y="611.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1185.8" y="595.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="606.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.18%)</title><rect x="1185.8" y="579.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="590.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.18%)</title><rect x="1185.8" y="563.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="574.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.18%)</title><rect x="1185.8" y="547.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="558.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.18%)</title><rect x="1185.8" y="531.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="542.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.18%)</title><rect x="1185.8" y="515.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.18%)</title><rect x="1185.8" y="499.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1188.8" y="510.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.18%)</title><rect x="1185.8" y="483.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.18%)</title><rect x="1185.8" y="467.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.18%)</title><rect x="1185.8" y="451.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.18%)</title><rect x="1185.8" y="435.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.18%)</title><rect x="1185.8" y="419.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>mem_cgroup_throttle_swaprate (1 samples, 0.18%)</title><rect x="1185.8" y="403.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.18%)</title><rect x="1187.9" y="595.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1187.9" y="579.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1187.9" y="563.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1187.9" y="547.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1187.9" y="531.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1187.9" y="515.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1187.9" y="499.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1187.9" y="483.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1187.9" y="467.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1187.9" y="451.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.18%)</title><rect x="1187.9" y="435.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.18%)</title><rect x="1187.9" y="419.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="430.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.18%)</title><rect x="1187.9" y="403.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.18%)</title><rect x="1187.9" y="387.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.18%)</title><rect x="1187.9" y="371.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.18%)</title><rect x="1187.9" y="355.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.18%)</title><rect x="1187.9" y="339.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>rcu_core_si (1 samples, 0.18%)</title><rect x="1187.9" y="323.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1190.9" y="334.0"></text>
</g>
<g>
<title>rcu_core (1 samples, 0.18%)</title><rect x="1187.9" y="307.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1190.9" y="318.0"></text>
</g>
</g>
</svg>
