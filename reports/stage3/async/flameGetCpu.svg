<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,011 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.10%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.20%)</title><rect x="11.2" y="867.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.20%)</title><rect x="11.2" y="851.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="11.2" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.10%)</title><rect x="11.2" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.10%)</title><rect x="12.3" y="835.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (944 samples, 93.37%)</title><rect x="13.5" y="867.0" width="1101.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="16.5" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (944 samples, 93.37%)</title><rect x="13.5" y="851.0" width="1101.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (943 samples, 93.27%)</title><rect x="14.7" y="835.0" width="1100.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.7" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="17.0" y="819.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.30%)</title><rect x="18.2" y="819.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.30%)</title><rect x="18.2" y="803.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.2" y="814.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.20%)</title><rect x="18.2" y="787.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="21.2" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.10%)</title><rect x="18.2" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.2" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="19.3" y="771.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="22.3" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="20.5" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 1.09%)</title><rect x="21.7" y="819.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 0.69%)</title><rect x="26.3" y="803.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 0.40%)</title><rect x="26.3" y="787.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.10%)</title><rect x="26.3" y="771.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="26.3" y="755.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.30%)</title><rect x="27.5" y="771.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.30%)</title><rect x="27.5" y="755.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.5" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.10%)</title><rect x="27.5" y="739.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="27.5" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="30.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="28.7" y="739.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="31.7" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.10%)</title><rect x="28.7" y="723.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="31.7" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="28.7" y="707.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="31.7" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="28.7" y="691.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="31.7" y="702.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="28.7" y="675.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="31.7" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="29.8" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="32.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.30%)</title><rect x="31.0" y="787.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.30%)</title><rect x="31.0" y="771.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.30%)</title><rect x="31.0" y="755.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.30%)</title><rect x="31.0" y="739.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.0" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.20%)</title><rect x="32.2" y="723.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.20%)</title><rect x="32.2" y="707.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="35.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="32.2" y="691.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="35.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="32.2" y="675.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.2" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.20%)</title><rect x="32.2" y="659.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="35.2" y="670.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.20%)</title><rect x="32.2" y="643.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="35.2" y="654.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.20%)</title><rect x="32.2" y="627.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="35.2" y="638.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.20%)</title><rect x="32.2" y="611.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="35.2" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.20%)</title><rect x="32.2" y="595.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="35.2" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="32.2" y="579.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="35.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/47798198.run (926 samples, 91.59%)</title><rect x="34.5" y="819.0" width="1080.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.5" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/47798198.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0 (926 samples, 91.59%)</title><rect x="34.5" y="803.0" width="1080.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.5" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.getInternal (926 samples, 91.59%)</title><rect x="34.5" y="787.0" width="1080.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.5" y="798.0">ru/mail/polis/service/stasyanoi/CustomServer.getInternal</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.20%)</title><rect x="35.7" y="771.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.20%)</title><rect x="35.7" y="755.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.10%)</title><rect x="36.8" y="739.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.8" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="36.8" y="723.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="39.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (70 samples, 6.92%)</title><rect x="38.0" y="771.0" width="81.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.0" y="782.0">one/nio/h..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.40%)</title><rect x="38.0" y="755.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.40%)</title><rect x="38.0" y="739.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.30%)</title><rect x="39.2" y="723.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.10%)</title><rect x="40.3" y="707.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.10%)</title><rect x="40.3" y="691.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.3" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.10%)</title><rect x="40.3" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.3" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="41.5" y="707.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="44.5" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="41.5" y="691.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="44.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (65 samples, 6.43%)</title><rect x="42.7" y="755.0" width="75.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.7" y="766.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (65 samples, 6.43%)</title><rect x="42.7" y="739.0" width="75.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.7" y="750.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (65 samples, 6.43%)</title><rect x="42.7" y="723.0" width="75.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.7" y="734.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (65 samples, 6.43%)</title><rect x="42.7" y="707.0" width="75.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.7" y="718.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (65 samples, 6.43%)</title><rect x="42.7" y="691.0" width="75.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.7" y="702.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.10%)</title><rect x="43.8" y="675.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="46.8" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.10%)</title><rect x="43.8" y="659.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="46.8" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="43.8" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="46.8" y="654.0"></text>
</g>
<g>
<title>__libc_send (63 samples, 6.23%)</title><rect x="45.0" y="675.0" width="73.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="48.0" y="686.0">__libc_s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (63 samples, 6.23%)</title><rect x="45.0" y="659.0" width="73.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="48.0" y="670.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (63 samples, 6.23%)</title><rect x="45.0" y="643.0" width="73.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="48.0" y="654.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_sendto (63 samples, 6.23%)</title><rect x="45.0" y="627.0" width="73.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="48.0" y="638.0">__x64_sy..</text>
</g>
<g>
<title>__sys_sendto (63 samples, 6.23%)</title><rect x="45.0" y="611.0" width="73.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="48.0" y="622.0">__sys_se..</text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="46.2" y="595.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="49.2" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (60 samples, 5.93%)</title><rect x="47.3" y="595.0" width="70.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="50.3" y="606.0">sock_sen..</text>
</g>
<g>
<title>inet6_sendmsg (58 samples, 5.74%)</title><rect x="47.3" y="579.0" width="67.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="50.3" y="590.0">inet6_s..</text>
</g>
<g>
<title>tcp_sendmsg (58 samples, 5.74%)</title><rect x="47.3" y="563.0" width="67.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="50.3" y="574.0">tcp_sen..</text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.10%)</title><rect x="48.5" y="547.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="51.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (56 samples, 5.54%)</title><rect x="49.7" y="547.0" width="65.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="52.7" y="558.0">tcp_sen..</text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.10%)</title><rect x="49.7" y="531.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="52.7" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.10%)</title><rect x="50.9" y="531.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="53.9" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.30%)</title><rect x="52.0" y="531.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="55.0" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.30%)</title><rect x="52.0" y="515.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="55.0" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.10%)</title><rect x="52.0" y="499.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="55.0" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.10%)</title><rect x="52.0" y="483.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="55.0" y="494.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.20%)</title><rect x="53.2" y="499.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="56.2" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.10%)</title><rect x="55.5" y="531.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="58.5" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.10%)</title><rect x="55.5" y="515.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="58.5" y="526.0"></text>
</g>
<g>
<title>tcp_push (48 samples, 4.75%)</title><rect x="56.7" y="531.0" width="56.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="59.7" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (48 samples, 4.75%)</title><rect x="56.7" y="515.0" width="56.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="59.7" y="526.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (48 samples, 4.75%)</title><rect x="56.7" y="499.0" width="56.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="59.7" y="510.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.10%)</title><rect x="59.0" y="483.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="62.0" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (44 samples, 4.35%)</title><rect x="60.2" y="483.0" width="51.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="63.2" y="494.0">__tcp..</text>
</g>
<g>
<title>ip_queue_xmit (41 samples, 4.06%)</title><rect x="63.7" y="467.0" width="47.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="66.7" y="478.0">ip_q..</text>
</g>
<g>
<title>__ip_queue_xmit (40 samples, 3.96%)</title><rect x="63.7" y="451.0" width="46.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="66.7" y="462.0">__ip..</text>
</g>
<g>
<title>ip_local_out (39 samples, 3.86%)</title><rect x="64.9" y="435.0" width="45.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="67.9" y="446.0">ip_l..</text>
</g>
<g>
<title>__ip_local_out (10 samples, 0.99%)</title><rect x="64.9" y="419.0" width="11.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="67.9" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.10%)</title><rect x="64.9" y="403.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="67.9" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (9 samples, 0.89%)</title><rect x="66.0" y="403.0" width="10.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="69.0" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.10%)</title><rect x="66.0" y="387.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="69.0" y="398.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (3 samples, 0.30%)</title><rect x="67.2" y="387.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="70.2" y="398.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (3 samples, 0.30%)</title><rect x="67.2" y="371.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="70.2" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (5 samples, 0.49%)</title><rect x="70.7" y="387.0" width="5.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="73.7" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (5 samples, 0.49%)</title><rect x="70.7" y="371.0" width="5.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="73.7" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.10%)</title><rect x="70.7" y="355.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="73.7" y="366.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (4 samples, 0.40%)</title><rect x="71.9" y="355.0" width="4.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="74.9" y="366.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (1 samples, 0.10%)</title><rect x="73.0" y="339.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="76.0" y="350.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (2 samples, 0.20%)</title><rect x="74.2" y="339.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="77.2" y="350.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.10%)</title><rect x="76.5" y="419.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="79.5" y="430.0"></text>
</g>
<g>
<title>ip_output (26 samples, 2.57%)</title><rect x="77.7" y="419.0" width="30.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="80.7" y="430.0">ip..</text>
</g>
<g>
<title>ip_finish_output (25 samples, 2.47%)</title><rect x="77.7" y="403.0" width="29.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="80.7" y="414.0">ip..</text>
</g>
<g>
<title>__ip_finish_output (25 samples, 2.47%)</title><rect x="77.7" y="387.0" width="29.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="80.7" y="398.0">__..</text>
</g>
<g>
<title>ip_finish_output2 (25 samples, 2.47%)</title><rect x="77.7" y="371.0" width="29.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="80.7" y="382.0">ip..</text>
</g>
<g>
<title>__local_bh_enable_ip (25 samples, 2.47%)</title><rect x="77.7" y="355.0" width="29.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="80.7" y="366.0">__..</text>
</g>
<g>
<title>do_softirq.part.20 (25 samples, 2.47%)</title><rect x="77.7" y="339.0" width="29.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="80.7" y="350.0">do..</text>
</g>
<g>
<title>do_softirq_own_stack (25 samples, 2.47%)</title><rect x="77.7" y="323.0" width="29.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="80.7" y="334.0">do..</text>
</g>
<g>
<title>__softirqentry_text_start (25 samples, 2.47%)</title><rect x="77.7" y="307.0" width="29.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="80.7" y="318.0">__..</text>
</g>
<g>
<title>net_rx_action (23 samples, 2.27%)</title><rect x="80.0" y="291.0" width="26.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="83.0" y="302.0">n..</text>
</g>
<g>
<title>process_backlog (23 samples, 2.27%)</title><rect x="80.0" y="275.0" width="26.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="83.0" y="286.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (23 samples, 2.27%)</title><rect x="80.0" y="259.0" width="26.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="83.0" y="270.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (22 samples, 2.18%)</title><rect x="80.0" y="243.0" width="25.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="83.0" y="254.0">_..</text>
</g>
<g>
<title>ip_rcv (22 samples, 2.18%)</title><rect x="80.0" y="227.0" width="25.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="83.0" y="238.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (21 samples, 2.08%)</title><rect x="80.0" y="211.0" width="24.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="83.0" y="222.0">i..</text>
</g>
<g>
<title>ip_local_deliver (21 samples, 2.08%)</title><rect x="80.0" y="195.0" width="24.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="83.0" y="206.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (20 samples, 1.98%)</title><rect x="80.0" y="179.0" width="23.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="83.0" y="190.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (20 samples, 1.98%)</title><rect x="80.0" y="163.0" width="23.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="83.0" y="174.0">i..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.10%)</title><rect x="80.0" y="147.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="83.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (19 samples, 1.88%)</title><rect x="81.2" y="147.0" width="22.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="84.2" y="158.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.20%)</title><rect x="83.5" y="131.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="86.5" y="142.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.10%)</title><rect x="85.9" y="131.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="88.9" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.10%)</title><rect x="87.0" y="131.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="90.0" y="142.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.10%)</title><rect x="87.0" y="115.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="90.0" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (13 samples, 1.29%)</title><rect x="88.2" y="131.0" width="15.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="91.2" y="142.0"></text>
</g>
<g>
<title>tcp_rcv_established (13 samples, 1.29%)</title><rect x="88.2" y="115.0" width="15.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="91.2" y="126.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.40%)</title><rect x="89.4" y="99.0" width="4.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="92.4" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.40%)</title><rect x="89.4" y="83.0" width="4.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="92.4" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.40%)</title><rect x="89.4" y="67.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="92.4" y="78.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.10%)</title><rect x="89.4" y="51.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="92.4" y="62.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.30%)</title><rect x="90.5" y="51.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="93.5" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="91.7" y="35.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="94.7" y="46.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.30%)</title><rect x="94.0" y="99.0" width="3.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="97.0" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.10%)</title><rect x="94.0" y="83.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="97.0" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.20%)</title><rect x="95.2" y="83.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="98.2" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="95.2" y="67.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="98.2" y="78.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.10%)</title><rect x="95.2" y="51.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="98.2" y="62.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="95.2" y="35.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="98.2" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.10%)</title><rect x="96.4" y="67.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="99.4" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.10%)</title><rect x="97.5" y="99.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="100.5" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.30%)</title><rect x="98.7" y="99.0" width="3.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="101.7" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.30%)</title><rect x="98.7" y="83.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="101.7" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.20%)</title><rect x="99.9" y="67.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="102.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.20%)</title><rect x="99.9" y="51.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="102.9" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="99.9" y="35.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="102.9" y="46.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.10%)</title><rect x="102.2" y="99.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="105.2" y="110.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.10%)</title><rect x="103.4" y="179.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="106.4" y="190.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.10%)</title><rect x="104.5" y="211.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="107.5" y="222.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.10%)</title><rect x="105.7" y="243.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="108.7" y="254.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.10%)</title><rect x="106.9" y="403.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="109.9" y="414.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.10%)</title><rect x="106.9" y="387.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="109.9" y="398.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (1 samples, 0.10%)</title><rect x="106.9" y="371.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="109.9" y="382.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.20%)</title><rect x="108.0" y="419.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="111.0" y="430.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.10%)</title><rect x="110.4" y="451.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="113.4" y="462.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.10%)</title><rect x="111.5" y="483.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="114.5" y="494.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.10%)</title><rect x="111.5" y="467.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="114.5" y="478.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.20%)</title><rect x="112.7" y="531.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="115.7" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.10%)</title><rect x="112.7" y="515.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="115.7" y="526.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.10%)</title><rect x="113.9" y="515.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="116.9" y="526.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.20%)</title><rect x="115.0" y="579.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="118.0" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.20%)</title><rect x="115.0" y="563.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="118.0" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.20%)</title><rect x="115.0" y="547.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="118.0" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.20%)</title><rect x="115.0" y="531.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="118.0" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.10%)</title><rect x="116.2" y="515.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="119.2" y="526.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.10%)</title><rect x="117.4" y="595.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="120.4" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="117.4" y="579.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="120.4" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="117.4" y="563.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="120.4" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="117.4" y="547.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="120.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.10%)</title><rect x="118.5" y="755.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.10%)</title><rect x="118.5" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="118.5" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.10%)</title><rect x="118.5" y="707.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.10%)</title><rect x="118.5" y="691.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.10%)</title><rect x="119.7" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.10%)</title><rect x="119.7" y="755.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.7" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="119.7" y="739.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="122.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (851 samples, 84.17%)</title><rect x="120.9" y="771.0" width="993.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.9" y="782.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.10%)</title><rect x="120.9" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.9" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (850 samples, 84.08%)</title><rect x="122.0" y="755.0" width="992.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.0" y="766.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (850 samples, 84.08%)</title><rect x="122.0" y="739.0" width="992.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.0" y="750.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.10%)</title><rect x="122.0" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.0" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (702 samples, 69.44%)</title><rect x="123.2" y="723.0" width="819.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="126.2" y="734.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="123.2" y="707.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="126.2" y="718.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.10%)</title><rect x="124.4" y="707.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="127.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.10%)</title><rect x="125.5" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="128.5" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (699 samples, 69.14%)</title><rect x="126.7" y="707.0" width="815.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="129.7" y="718.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (694 samples, 68.64%)</title><rect x="127.9" y="691.0" width="810.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="130.9" y="702.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*)</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.20%)</title><rect x="127.9" y="675.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="130.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (691 samples, 68.35%)</title><rect x="130.2" y="675.0" width="806.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="133.2" y="686.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*)</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (691 samples, 68.35%)</title><rect x="130.2" y="659.0" width="806.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="133.2" y="670.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::P..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.10%)</title><rect x="130.2" y="643.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="133.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.10%)</title><rect x="131.4" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="134.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.10%)</title><rect x="132.6" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="135.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) [clone .plt] (1 samples, 0.10%)</title><rect x="133.7" y="643.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="136.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (684 samples, 67.66%)</title><rect x="134.9" y="643.0" width="798.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="137.9" y="654.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions)</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.10%)</title><rect x="134.9" y="627.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="137.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.10%)</title><rect x="134.9" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="137.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (2 samples, 0.20%)</title><rect x="136.1" y="627.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="139.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.20%)</title><rect x="136.1" y="611.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="139.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.10%)</title><rect x="137.2" y="595.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="140.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.10%)</title><rect x="137.2" y="579.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="140.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.10%)</title><rect x="138.4" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="141.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (680 samples, 67.26%)</title><rect x="139.6" y="627.0" width="793.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="142.6" y="638.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsig..</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (679 samples, 67.16%)</title><rect x="140.7" y="611.0" width="792.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="143.7" y="622.0">/tmp/librocksdbjni10546891661304564868.so</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (27 samples, 2.67%)</title><rect x="144.2" y="595.0" width="31.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="147.2" y="606.0">/t..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (25 samples, 2.47%)</title><rect x="146.6" y="579.0" width="29.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="149.6" y="590.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.20%)</title><rect x="146.6" y="563.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="149.6" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.20%)</title><rect x="146.6" y="547.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="149.6" y="558.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="146.6" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="149.6" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="147.7" y="531.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="150.7" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.69%)</title><rect x="148.9" y="563.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="151.9" y="574.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="148.9" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="151.9" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 0.59%)</title><rect x="150.1" y="547.0" width="7.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="153.1" y="558.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.10%)</title><rect x="150.1" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="153.1" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.20%)</title><rect x="151.2" y="531.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="154.2" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="153.6" y="531.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="156.6" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="154.7" y="531.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="157.7" y="542.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="155.9" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="158.9" y="542.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.49%)</title><rect x="157.1" y="563.0" width="5.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="160.1" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.49%)</title><rect x="157.1" y="547.0" width="5.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="160.1" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.49%)</title><rect x="157.1" y="531.0" width="5.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="160.1" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.30%)</title><rect x="157.1" y="515.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="160.1" y="526.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.30%)</title><rect x="157.1" y="499.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="160.1" y="510.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.20%)</title><rect x="158.2" y="483.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="161.2" y="494.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="159.4" y="467.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="162.4" y="478.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.20%)</title><rect x="160.6" y="515.0" width="2.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="163.6" y="526.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="161.7" y="499.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="164.7" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (11 samples, 1.09%)</title><rect x="162.9" y="563.0" width="12.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="165.9" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.09%)</title><rect x="162.9" y="547.0" width="12.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="165.9" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.09%)</title><rect x="162.9" y="531.0" width="12.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="165.9" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.89%)</title><rect x="165.2" y="515.0" width="10.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="168.2" y="526.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.89%)</title><rect x="165.2" y="499.0" width="10.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="168.2" y="510.0"></text>
</g>
<g>
<title>futex_wake (9 samples, 0.89%)</title><rect x="165.2" y="483.0" width="10.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="168.2" y="494.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="165.2" y="467.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="168.2" y="478.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="166.4" y="467.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="169.4" y="478.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 0.69%)</title><rect x="167.6" y="467.0" width="8.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="170.6" y="478.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 0.69%)</title><rect x="167.6" y="451.0" width="8.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="170.6" y="462.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.69%)</title><rect x="167.6" y="435.0" width="8.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="170.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (647 samples, 64.00%)</title><rect x="175.7" y="595.0" width="755.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="178.7" y="606.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="186.2" y="579.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="189.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (637 samples, 63.01%)</title><rect x="187.4" y="579.0" width="743.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="190.4" y="590.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.20%)</title><rect x="190.9" y="563.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="193.9" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.40%)</title><rect x="193.2" y="563.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="196.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (622 samples, 61.52%)</title><rect x="197.9" y="563.0" width="726.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="200.9" y="574.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (32 samples, 3.17%)</title><rect x="214.3" y="547.0" width="37.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="217.3" y="558.0">JNI..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="214.3" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="217.3" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (31 samples, 3.07%)</title><rect x="215.4" y="531.0" width="36.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="218.4" y="542.0">jni..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.40%)</title><rect x="218.9" y="515.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.30%)</title><rect x="223.6" y="515.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="226.6" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (18 samples, 1.78%)</title><rect x="227.1" y="515.0" width="21.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="230.1" y="526.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.20%)</title><rect x="232.9" y="499.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="235.9" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.69%)</title><rect x="235.3" y="499.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="238.3" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="235.3" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="238.3" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="236.4" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="239.4" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.30%)</title><rect x="237.6" y="483.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="240.6" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.20%)</title><rect x="241.1" y="483.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.20%)</title><rect x="243.4" y="499.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="246.4" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.20%)</title><rect x="245.8" y="499.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="248.8" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.30%)</title><rect x="248.1" y="515.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="251.1" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (94 samples, 9.30%)</title><rect x="251.6" y="547.0" width="109.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="254.6" y="558.0">JNIEnv_::Call..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="256.3" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="259.3" y="542.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (89 samples, 8.80%)</title><rect x="257.4" y="531.0" width="103.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="260.4" y="542.0">jni_CallVoid..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="263.3" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="266.3" y="526.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.20%)</title><rect x="264.4" y="515.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="267.4" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.20%)</title><rect x="266.8" y="515.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="269.8" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.20%)</title><rect x="269.1" y="515.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="272.1" y="526.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="271.4" y="515.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="274.4" y="526.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.20%)</title><rect x="272.6" y="515.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="275.6" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.59%)</title><rect x="274.9" y="515.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="277.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.49%)</title><rect x="281.9" y="515.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.9" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (59 samples, 5.84%)</title><rect x="287.8" y="515.0" width="68.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="290.8" y="526.0">jni_inv..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.20%)</title><rect x="298.3" y="499.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="301.3" y="510.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="300.6" y="499.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="303.6" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="301.8" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="304.8" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="303.0" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="306.0" y="510.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.10%)</title><rect x="304.1" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.1" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (7 samples, 0.69%)</title><rect x="305.3" y="499.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (30 samples, 2.97%)</title><rect x="313.5" y="499.0" width="35.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="316.5" y="510.0">Jav..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.10%)</title><rect x="327.5" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="330.5" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="328.6" y="483.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="331.6" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.30%)</title><rect x="329.8" y="483.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="332.8" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.79%)</title><rect x="333.3" y="483.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="336.3" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.10%)</title><rect x="341.5" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="344.5" y="478.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.20%)</title><rect x="342.6" y="483.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="345.6" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="345.0" y="483.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="348.0" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.20%)</title><rect x="346.1" y="483.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="349.1" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.20%)</title><rect x="348.5" y="499.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.5" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.20%)</title><rect x="350.8" y="499.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.8" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.20%)</title><rect x="353.1" y="499.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="356.1" y="510.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="355.5" y="499.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="358.5" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.20%)</title><rect x="356.6" y="515.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="359.6" y="526.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.20%)</title><rect x="359.0" y="515.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="362.0" y="526.0"></text>
</g>
<g>
<title>__lll_lock_wait (172 samples, 17.01%)</title><rect x="361.3" y="547.0" width="200.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="364.3" y="558.0">__lll_lock_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (139 samples, 13.75%)</title><rect x="399.8" y="531.0" width="162.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="402.8" y="542.0">entry_SYSCALL_64_afte..</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="399.8" y="515.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="402.8" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (136 samples, 13.45%)</title><rect x="401.0" y="515.0" width="158.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="404.0" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="418.5" y="499.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="421.5" y="510.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.20%)</title><rect x="419.7" y="499.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="422.7" y="510.0"></text>
</g>
<g>
<title>__x64_sys_futex (87 samples, 8.61%)</title><rect x="422.0" y="499.0" width="101.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="425.0" y="510.0">__x64_sys_fu..</text>
</g>
<g>
<title>do_futex (80 samples, 7.91%)</title><rect x="430.2" y="483.0" width="93.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="433.2" y="494.0">do_futex</text>
</g>
<g>
<title>futex_wait (72 samples, 7.12%)</title><rect x="439.5" y="467.0" width="84.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="442.5" y="478.0">futex_wait</text>
</g>
<g>
<title>futex_wait_queue_me (35 samples, 3.46%)</title><rect x="454.7" y="451.0" width="40.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="457.7" y="462.0">fut..</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.10%)</title><rect x="469.9" y="435.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="472.9" y="446.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.10%)</title><rect x="469.9" y="419.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="472.9" y="430.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.10%)</title><rect x="471.0" y="435.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="474.0" y="446.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.10%)</title><rect x="472.2" y="435.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="475.2" y="446.0"></text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.10%)</title><rect x="473.4" y="435.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="476.4" y="446.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.10%)</title><rect x="473.4" y="419.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="476.4" y="430.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.10%)</title><rect x="473.4" y="403.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="476.4" y="414.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="473.4" y="387.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="476.4" y="398.0"></text>
</g>
<g>
<title>schedule (18 samples, 1.78%)</title><rect x="474.5" y="435.0" width="21.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="477.5" y="446.0">s..</text>
</g>
<g>
<title>__sched_text_start (13 samples, 1.29%)</title><rect x="480.4" y="419.0" width="15.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="483.4" y="430.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.89%)</title><rect x="485.0" y="403.0" width="10.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="488.0" y="414.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.10%)</title><rect x="494.4" y="387.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="497.4" y="398.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="494.4" y="371.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="497.4" y="382.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.10%)</title><rect x="494.4" y="355.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="497.4" y="366.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="494.4" y="339.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="497.4" y="350.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.10%)</title><rect x="494.4" y="323.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="497.4" y="334.0"></text>
</g>
<g>
<title>futex_wait_setup (19 samples, 1.88%)</title><rect x="495.5" y="451.0" width="22.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.5" y="462.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.20%)</title><rect x="501.4" y="435.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="504.4" y="446.0"></text>
</g>
<g>
<title>get_futex_key (6 samples, 0.59%)</title><rect x="503.7" y="435.0" width="7.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="506.7" y="446.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (3 samples, 0.30%)</title><rect x="507.2" y="419.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="510.2" y="430.0"></text>
</g>
<g>
<title>get_futex_value_locked (6 samples, 0.59%)</title><rect x="510.7" y="435.0" width="7.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="513.7" y="446.0"></text>
</g>
<g>
<title>hash_futex (3 samples, 0.30%)</title><rect x="517.7" y="451.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="520.7" y="462.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.20%)</title><rect x="521.2" y="451.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="524.2" y="462.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (29 samples, 2.87%)</title><rect x="523.6" y="499.0" width="33.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="526.6" y="510.0">sy..</text>
</g>
<g>
<title>__audit_syscall_exit (13 samples, 1.29%)</title><rect x="538.7" y="483.0" width="15.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="541.7" y="494.0"></text>
</g>
<g>
<title>mntput (1 samples, 0.10%)</title><rect x="550.4" y="467.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="553.4" y="478.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.10%)</title><rect x="551.6" y="467.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="554.6" y="478.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.10%)</title><rect x="552.7" y="467.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="555.7" y="478.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.30%)</title><rect x="553.9" y="483.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="556.9" y="494.0"></text>
</g>
<g>
<title>syscall_trace_enter (2 samples, 0.20%)</title><rect x="557.4" y="499.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="560.4" y="510.0"></text>
</g>
<g>
<title>__audit_syscall_entry (2 samples, 0.20%)</title><rect x="557.4" y="483.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="560.4" y="494.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (2 samples, 0.20%)</title><rect x="557.4" y="467.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="560.4" y="478.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (2 samples, 0.20%)</title><rect x="559.7" y="515.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="562.7" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (254 samples, 25.12%)</title><rect x="562.1" y="547.0" width="296.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="565.1" y="558.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (240 samples, 23.74%)</title><rect x="578.4" y="531.0" width="280.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="581.4" y="542.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (240 samples, 23.74%)</title><rect x="578.4" y="515.0" width="280.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="581.4" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (223 samples, 22.06%)</title><rect x="586.6" y="499.0" width="260.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="589.6" y="510.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (221 samples, 21.86%)</title><rect x="587.7" y="483.0" width="258.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="590.7" y="494.0">do_futex</text>
</g>
<g>
<title>futex_wake (216 samples, 21.36%)</title><rect x="587.7" y="467.0" width="252.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="590.7" y="478.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (8 samples, 0.79%)</title><rect x="594.7" y="451.0" width="9.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="597.7" y="462.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="602.9" y="435.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="605.9" y="446.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.40%)</title><rect x="604.1" y="451.0" width="4.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="607.1" y="462.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (2 samples, 0.20%)</title><rect x="606.4" y="435.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="609.4" y="446.0"></text>
</g>
<g>
<title>mark_wake_futex (12 samples, 1.19%)</title><rect x="608.8" y="451.0" width="14.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="611.8" y="462.0"></text>
</g>
<g>
<title>__unqueue_futex (4 samples, 0.40%)</title><rect x="615.8" y="435.0" width="4.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="618.8" y="446.0"></text>
</g>
<g>
<title>wake_q_add_safe (2 samples, 0.20%)</title><rect x="620.4" y="435.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="623.4" y="446.0"></text>
</g>
<g>
<title>wake_up_q (186 samples, 18.40%)</title><rect x="622.8" y="451.0" width="217.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="625.8" y="462.0">wake_up_q</text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="622.8" y="435.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="625.8" y="446.0"></text>
</g>
<g>
<title>try_to_wake_up (184 samples, 18.20%)</title><rect x="625.1" y="435.0" width="214.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="628.1" y="446.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (182 samples, 18.00%)</title><rect x="626.3" y="419.0" width="212.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="629.3" y="430.0">__lock_text_start</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.10%)</title><rect x="838.7" y="419.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="841.7" y="430.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.10%)</title><rect x="839.9" y="467.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="842.9" y="478.0"></text>
</g>
<g>
<title>hash_futex (3 samples, 0.30%)</title><rect x="841.0" y="467.0" width="3.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="844.0" y="478.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.10%)</title><rect x="844.5" y="467.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="847.5" y="478.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.10%)</title><rect x="845.7" y="483.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="848.7" y="494.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (5 samples, 0.49%)</title><rect x="846.9" y="499.0" width="5.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="849.9" y="510.0"></text>
</g>
<g>
<title>__audit_syscall_exit (4 samples, 0.40%)</title><rect x="848.0" y="483.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="851.0" y="494.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.10%)</title><rect x="850.4" y="467.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="853.4" y="478.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.10%)</title><rect x="851.5" y="467.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="854.5" y="478.0"></text>
</g>
<g>
<title>syscall_trace_enter (5 samples, 0.49%)</title><rect x="852.7" y="499.0" width="5.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="855.7" y="510.0"></text>
</g>
<g>
<title>__audit_syscall_entry (3 samples, 0.30%)</title><rect x="853.9" y="483.0" width="3.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="856.9" y="494.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.10%)</title><rect x="856.2" y="467.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="859.2" y="478.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.10%)</title><rect x="857.4" y="483.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="860.4" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.20%)</title><rect x="858.5" y="547.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="861.5" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (14 samples, 1.38%)</title><rect x="860.9" y="547.0" width="16.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="863.9" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.40%)</title><rect x="862.0" y="531.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (9 samples, 0.89%)</title><rect x="866.7" y="531.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.7" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.20%)</title><rect x="877.2" y="547.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="880.2" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.48%)</title><rect x="879.5" y="547.0" width="17.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="882.5" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.59%)</title><rect x="897.0" y="547.0" width="7.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="900.0" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.20%)</title><rect x="904.0" y="547.0" width="2.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="907.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (9 samples, 0.89%)</title><rect x="906.4" y="547.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.4" y="558.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="909.9" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.9" y="542.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.10%)</title><rect x="911.0" y="531.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.0" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="912.2" y="531.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="915.2" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.10%)</title><rect x="913.4" y="531.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="916.4" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.20%)</title><rect x="914.5" y="531.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="917.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (5 samples, 0.49%)</title><rect x="916.9" y="547.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.10%)</title><rect x="922.7" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.10%)</title><rect x="923.9" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.10%)</title><rect x="925.1" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.20%)</title><rect x="926.2" y="563.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="929.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.20%)</title><rect x="928.6" y="563.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.6" y="574.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.20%)</title><rect x="930.9" y="595.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="933.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (2 samples, 0.20%)</title><rect x="933.2" y="643.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.10%)</title><rect x="935.6" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.10%)</title><rect x="936.7" y="675.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.10%)</title><rect x="937.9" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (3 samples, 0.30%)</title><rect x="939.1" y="691.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.1" y="702.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.30%)</title><rect x="939.1" y="675.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="942.1" y="686.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.10%)</title><rect x="939.1" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.1" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="940.2" y="659.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.2" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="941.4" y="659.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="942.6" y="723.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="945.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="942.6" y="707.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="945.6" y="718.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="942.6" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.6" y="702.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.20%)</title><rect x="943.7" y="723.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="946.7" y="734.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.10%)</title><rect x="946.1" y="723.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="949.1" y="734.0"></text>
</g>
<g>
<title>call_stub (9 samples, 0.89%)</title><rect x="947.2" y="723.0" width="10.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="950.2" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.10%)</title><rect x="957.7" y="723.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="960.7" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (13 samples, 1.29%)</title><rect x="958.9" y="723.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (119 samples, 11.77%)</title><rect x="974.1" y="723.0" width="138.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.1" y="734.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (117 samples, 11.57%)</title><rect x="976.4" y="707.0" width="136.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.4" y="718.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.20%)</title><rect x="978.7" y="691.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="981.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.20%)</title><rect x="978.7" y="675.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="981.7" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (2 samples, 0.20%)</title><rect x="978.7" y="659.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="981.7" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (113 samples, 11.18%)</title><rect x="981.1" y="691.0" width="131.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="984.1" y="702.0">org/rocksdb/Abst..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.30%)</title><rect x="981.1" y="675.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="984.1" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (110 samples, 10.88%)</title><rect x="984.6" y="675.0" width="128.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="987.6" y="686.0">org/rocksdb/Slic..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (105 samples, 10.39%)</title><rect x="990.4" y="659.0" width="122.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.4" y="670.0">org/rocksdb/Sli..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (91 samples, 9.00%)</title><rect x="1005.6" y="643.0" width="106.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1008.6" y="654.0">Java_org_rock..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.20%)</title><rect x="1005.6" y="627.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.6" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.10%)</title><rect x="1007.9" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.9" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="1009.1" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1012.1" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="1010.3" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.3" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.30%)</title><rect x="1011.4" y="627.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1014.4" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="1014.9" y="627.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1017.9" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 1.29%)</title><rect x="1016.1" y="627.0" width="15.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1019.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="1016.1" y="611.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.1" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (9 samples, 0.89%)</title><rect x="1017.3" y="611.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.3" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.30%)</title><rect x="1027.8" y="611.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.8" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (45 samples, 4.45%)</title><rect x="1031.3" y="627.0" width="52.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1034.3" y="638.0">jni_N..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="1040.6" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.6" y="622.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.10%)</title><rect x="1041.8" y="611.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1044.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.30%)</title><rect x="1042.9" y="611.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.9" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.40%)</title><rect x="1046.4" y="611.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.4" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (28 samples, 2.77%)</title><rect x="1051.1" y="611.0" width="32.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.1" y="622.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (26 samples, 2.57%)</title><rect x="1053.4" y="595.0" width="30.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.4" y="606.0">Co..</text>
</g>
<g>
<title>MemAllocator::allocate() const (16 samples, 1.58%)</title><rect x="1053.4" y="579.0" width="18.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.4" y="590.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.20%)</title><rect x="1060.4" y="563.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.4" y="574.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.10%)</title><rect x="1061.6" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.6" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (5 samples, 0.49%)</title><rect x="1062.8" y="563.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.8" y="574.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (3 samples, 0.30%)</title><rect x="1068.6" y="563.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1071.6" y="574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="1072.1" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.1" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.69%)</title><rect x="1073.3" y="579.0" width="8.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1076.3" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.20%)</title><rect x="1081.5" y="579.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1084.5" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (24 samples, 2.37%)</title><rect x="1083.8" y="627.0" width="28.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1086.8" y="638.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.20%)</title><rect x="1087.3" y="611.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.3" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1089.6" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (7 samples, 0.69%)</title><rect x="1090.8" y="611.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.8" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.59%)</title><rect x="1099.0" y="611.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.0" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.49%)</title><rect x="1106.0" y="611.0" width="5.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1109.0" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.40%)</title><rect x="1107.1" y="595.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.1" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.10%)</title><rect x="1111.8" y="643.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1114.8" y="654.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="1113.0" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.10%)</title><rect x="1114.1" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.10%)</title><rect x="1114.1" y="755.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.10%)</title><rect x="1114.1" y="739.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1117.1" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1114.1" y="723.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1114.1" y="707.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.1" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1114.1" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1114.1" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1114.1" y="659.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.1" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (61 samples, 6.03%)</title><rect x="1115.3" y="867.0" width="71.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1118.3" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.10%)</title><rect x="1115.3" y="851.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1118.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.10%)</title><rect x="1115.3" y="835.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.3" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (18 samples, 1.78%)</title><rect x="1116.5" y="851.0" width="21.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.5" y="862.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.20%)</title><rect x="1116.5" y="835.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1119.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.10%)</title><rect x="1117.6" y="819.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1120.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (16 samples, 1.58%)</title><rect x="1118.8" y="835.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1121.8" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.20%)</title><rect x="1118.8" y="819.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1121.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 1.38%)</title><rect x="1121.1" y="819.0" width="16.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1124.1" y="830.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 1.38%)</title><rect x="1121.1" y="803.0" width="16.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1124.1" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.19%)</title><rect x="1123.5" y="787.0" width="14.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1126.5" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.19%)</title><rect x="1123.5" y="771.0" width="14.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1126.5" y="782.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (11 samples, 1.09%)</title><rect x="1123.5" y="755.0" width="12.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1126.5" y="766.0"></text>
</g>
<g>
<title>do_epoll_wait (11 samples, 1.09%)</title><rect x="1123.5" y="739.0" width="12.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1126.5" y="750.0"></text>
</g>
<g>
<title>ep_poll (11 samples, 1.09%)</title><rect x="1123.5" y="723.0" width="12.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1126.5" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (5 samples, 0.49%)</title><rect x="1127.0" y="707.0" width="5.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1130.0" y="718.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.30%)</title><rect x="1128.1" y="691.0" width="3.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1131.1" y="702.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.20%)</title><rect x="1129.3" y="675.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1132.3" y="686.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.10%)</title><rect x="1130.5" y="659.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1133.5" y="670.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.10%)</title><rect x="1131.6" y="691.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1134.6" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 0.30%)</title><rect x="1132.8" y="707.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1135.8" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.30%)</title><rect x="1132.8" y="691.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1135.8" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="1135.1" y="675.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1138.1" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="1135.1" y="659.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1138.1" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="1135.1" y="643.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1138.1" y="654.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="1136.3" y="755.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1139.3" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="1136.3" y="739.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1139.3" y="750.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.10%)</title><rect x="1136.3" y="723.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1139.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (42 samples, 4.15%)</title><rect x="1137.5" y="851.0" width="49.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1140.5" y="862.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (42 samples, 4.15%)</title><rect x="1137.5" y="835.0" width="49.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1140.5" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (28 samples, 2.77%)</title><rect x="1138.6" y="819.0" width="32.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1141.6" y="830.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (11 samples, 1.09%)</title><rect x="1152.7" y="803.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1155.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (11 samples, 1.09%)</title><rect x="1152.7" y="787.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1155.7" y="798.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (9 samples, 0.89%)</title><rect x="1152.7" y="771.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1155.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.30%)</title><rect x="1152.7" y="755.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.20%)</title><rect x="1153.8" y="739.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1156.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (2 samples, 0.20%)</title><rect x="1153.8" y="723.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (6 samples, 0.59%)</title><rect x="1156.2" y="755.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1159.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.49%)</title><rect x="1157.3" y="739.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 0.49%)</title><rect x="1157.3" y="723.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1160.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.40%)</title><rect x="1157.3" y="707.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.40%)</title><rect x="1157.3" y="691.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.40%)</title><rect x="1157.3" y="675.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1160.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.40%)</title><rect x="1157.3" y="659.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1160.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.40%)</title><rect x="1157.3" y="643.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1160.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.40%)</title><rect x="1157.3" y="627.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.3" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.10%)</title><rect x="1157.3" y="611.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1160.3" y="622.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.10%)</title><rect x="1157.3" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.3" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.30%)</title><rect x="1158.5" y="611.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1161.5" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.30%)</title><rect x="1158.5" y="595.0" width="3.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1161.5" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.30%)</title><rect x="1158.5" y="579.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.5" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.30%)</title><rect x="1158.5" y="563.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1161.5" y="574.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.30%)</title><rect x="1158.5" y="547.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1161.5" y="558.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.30%)</title><rect x="1158.5" y="531.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1161.5" y="542.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.30%)</title><rect x="1158.5" y="515.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1161.5" y="526.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.30%)</title><rect x="1158.5" y="499.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.30%)</title><rect x="1158.5" y="483.0" width="3.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1161.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="1162.0" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="1162.0" y="691.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="1162.0" y="675.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="1162.0" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.20%)</title><rect x="1163.2" y="771.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="1164.3" y="755.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1167.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="1164.3" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="1164.3" y="723.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="1164.3" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.20%)</title><rect x="1165.5" y="803.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1168.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.10%)</title><rect x="1165.5" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1168.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1166.7" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1169.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1166.7" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1169.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1166.7" y="755.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1169.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.10%)</title><rect x="1166.7" y="739.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1169.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.30%)</title><rect x="1167.8" y="803.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1170.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.20%)</title><rect x="1169.0" y="787.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="1170.2" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="1170.2" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="1170.2" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="1170.2" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.2" y="734.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.10%)</title><rect x="1170.2" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.2" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 1.29%)</title><rect x="1171.3" y="819.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 1.29%)</title><rect x="1171.3" y="803.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.20%)</title><rect x="1171.3" y="787.0" width="2.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="1172.5" y="771.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1175.5" y="782.0"></text>
</g>
<g>
<title>__GI___recv (10 samples, 0.99%)</title><rect x="1173.7" y="787.0" width="11.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.99%)</title><rect x="1173.7" y="771.0" width="11.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.99%)</title><rect x="1173.7" y="755.0" width="11.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 0.89%)</title><rect x="1174.8" y="739.0" width="10.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>__sys_recvfrom (9 samples, 0.89%)</title><rect x="1174.8" y="723.0" width="10.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.59%)</title><rect x="1174.8" y="707.0" width="7.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>inet6_recvmsg (4 samples, 0.40%)</title><rect x="1174.8" y="691.0" width="4.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 0.40%)</title><rect x="1174.8" y="675.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.20%)</title><rect x="1174.8" y="659.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.20%)</title><rect x="1174.8" y="643.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="1174.8" y="627.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.10%)</title><rect x="1176.0" y="627.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.10%)</title><rect x="1176.0" y="611.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="1177.2" y="659.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1180.2" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.10%)</title><rect x="1178.3" y="659.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.10%)</title><rect x="1178.3" y="643.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.10%)</title><rect x="1178.3" y="627.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.10%)</title><rect x="1178.3" y="611.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.10%)</title><rect x="1179.5" y="691.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.10%)</title><rect x="1179.5" y="675.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.10%)</title><rect x="1179.5" y="659.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.10%)</title><rect x="1179.5" y="643.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.10%)</title><rect x="1180.7" y="691.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.30%)</title><rect x="1181.8" y="707.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1184.8" y="718.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.20%)</title><rect x="1181.8" y="691.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.20%)</title><rect x="1181.8" y="675.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="1183.0" y="659.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="1184.2" y="691.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.10%)</title><rect x="1185.3" y="787.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1188.3" y="798.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.30%)</title><rect x="1186.5" y="867.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.5" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.30%)</title><rect x="1186.5" y="851.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1189.5" y="862.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.30%)</title><rect x="1186.5" y="835.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.5" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.30%)</title><rect x="1186.5" y="819.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.30%)</title><rect x="1186.5" y="803.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.30%)</title><rect x="1186.5" y="787.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.30%)</title><rect x="1186.5" y="771.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.30%)</title><rect x="1186.5" y="755.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.20%)</title><rect x="1186.5" y="739.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.10%)</title><rect x="1186.5" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.10%)</title><rect x="1187.7" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1187.7" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1187.7" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="1187.7" y="675.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
</g>
</svg>
