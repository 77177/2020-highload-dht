<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (247 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (9 samples, 3.64%)</title><rect x="10.0" y="899.0" width="43.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="910.0">Runt..</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (9 samples, 3.64%)</title><rect x="10.0" y="883.0" width="43.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="894.0">Obje..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (8 samples, 3.24%)</title><rect x="14.8" y="867.0" width="38.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.8" y="878.0">Obj..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (7 samples, 2.83%)</title><rect x="14.8" y="851.0" width="33.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.8" y="862.0">Ob..</text>
</g>
<g>
<title>SpinPause (2 samples, 0.81%)</title><rect x="19.6" y="835.0" width="9.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.6" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.81%)</title><rect x="29.1" y="835.0" width="9.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="32.1" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.40%)</title><rect x="33.9" y="819.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="36.9" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.40%)</title><rect x="33.9" y="803.0" width="4.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="36.9" y="814.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.40%)</title><rect x="33.9" y="787.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="36.9" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.40%)</title><rect x="38.7" y="835.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.7" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.40%)</title><rect x="43.4" y="835.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="46.4" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.40%)</title><rect x="48.2" y="851.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="51.2" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.81%)</title><rect x="53.0" y="899.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.0" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.81%)</title><rect x="53.0" y="883.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="56.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 0.81%)</title><rect x="53.0" y="867.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="56.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.81%)</title><rect x="53.0" y="851.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="56.0" y="862.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="53.0" y="835.0" width="4.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="56.0" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.40%)</title><rect x="57.8" y="835.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="60.8" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.40%)</title><rect x="57.8" y="819.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="60.8" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.40%)</title><rect x="57.8" y="803.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="60.8" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.40%)</title><rect x="62.6" y="899.0" width="4.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="65.6" y="910.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.40%)</title><rect x="62.6" y="883.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="65.6" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.40%)</title><rect x="62.6" y="867.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="65.6" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.40%)</title><rect x="62.6" y="851.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.81%)</title><rect x="67.3" y="899.0" width="9.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="70.3" y="910.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.81%)</title><rect x="67.3" y="883.0" width="9.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="70.3" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 2.43%)</title><rect x="76.9" y="899.0" width="28.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="79.9" y="910.0">[u..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 2.43%)</title><rect x="76.9" y="883.0" width="28.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="79.9" y="894.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.43%)</title><rect x="76.9" y="867.0" width="28.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="79.9" y="878.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.43%)</title><rect x="76.9" y="851.0" width="28.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="79.9" y="862.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 2.43%)</title><rect x="76.9" y="835.0" width="28.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="79.9" y="846.0">__..</text>
</g>
<g>
<title>do_futex (6 samples, 2.43%)</title><rect x="76.9" y="819.0" width="28.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="79.9" y="830.0">do..</text>
</g>
<g>
<title>futex_wake (5 samples, 2.02%)</title><rect x="81.7" y="803.0" width="23.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="84.7" y="814.0">f..</text>
</g>
<g>
<title>wake_up_q (5 samples, 2.02%)</title><rect x="81.7" y="787.0" width="23.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="84.7" y="798.0">w..</text>
</g>
<g>
<title>try_to_wake_up (5 samples, 2.02%)</title><rect x="81.7" y="771.0" width="23.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="84.7" y="782.0">t..</text>
</g>
<g>
<title>__lock_text_start (5 samples, 2.02%)</title><rect x="81.7" y="755.0" width="23.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="84.7" y="766.0">_..</text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 55.87%)</title><rect x="105.5" y="899.0" width="659.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.5" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 55.87%)</title><rect x="105.5" y="883.0" width="659.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.5" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 55.87%)</title><rect x="105.5" y="867.0" width="659.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.5" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.62%)</title><rect x="124.7" y="851.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.62%)</title><rect x="124.7" y="835.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.81%)</title><rect x="124.7" y="819.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.40%)</title><rect x="129.4" y="803.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.40%)</title><rect x="129.4" y="787.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="129.4" y="771.0" width="4.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="132.4" y="782.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.40%)</title><rect x="129.4" y="755.0" width="4.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="132.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.40%)</title><rect x="134.2" y="819.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.40%)</title><rect x="134.2" y="803.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="137.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.40%)</title><rect x="134.2" y="787.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="139.0" y="819.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="139.0" y="803.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="139.0" y="787.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="139.0" y="771.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.40%)</title><rect x="139.0" y="755.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.0" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.40%)</title><rect x="139.0" y="739.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="142.0" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.40%)</title><rect x="139.0" y="723.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="142.0" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.40%)</title><rect x="139.0" y="707.0" width="4.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="142.0" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.40%)</title><rect x="139.0" y="691.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="142.0" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.40%)</title><rect x="139.0" y="675.0" width="4.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="142.0" y="686.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.40%)</title><rect x="139.0" y="659.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="142.0" y="670.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.40%)</title><rect x="139.0" y="643.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="142.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/1086173512.run (130 samples, 52.63%)</title><rect x="143.8" y="851.0" width="621.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.8" y="862.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$68/1086173512.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0 (129 samples, 52.23%)</title><rect x="148.5" y="835.0" width="616.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.5" y="846.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.getInternal (129 samples, 52.23%)</title><rect x="148.5" y="819.0" width="616.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.5" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer.getInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (22 samples, 8.91%)</title><rect x="148.5" y="803.0" width="105.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.5" y="814.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (20 samples, 8.10%)</title><rect x="153.3" y="787.0" width="95.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.3" y="798.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.40%)</title><rect x="153.3" y="771.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.40%)</title><rect x="153.3" y="755.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.40%)</title><rect x="153.3" y="739.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 7.69%)</title><rect x="158.1" y="771.0" width="90.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.1" y="782.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 7.69%)</title><rect x="158.1" y="755.0" width="90.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.1" y="766.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (19 samples, 7.69%)</title><rect x="158.1" y="739.0" width="90.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.1" y="750.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (19 samples, 7.69%)</title><rect x="158.1" y="723.0" width="90.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.1" y="734.0">one/nio/ne..</text>
</g>
<g>
<title>__libc_send (19 samples, 7.69%)</title><rect x="158.1" y="707.0" width="90.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="161.1" y="718.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 7.69%)</title><rect x="158.1" y="691.0" width="90.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="161.1" y="702.0">entry_SYSC..</text>
</g>
<g>
<title>do_syscall_64 (19 samples, 7.69%)</title><rect x="158.1" y="675.0" width="90.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="161.1" y="686.0">do_syscall..</text>
</g>
<g>
<title>__x64_sys_sendto (19 samples, 7.69%)</title><rect x="158.1" y="659.0" width="90.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="161.1" y="670.0">__x64_sys_..</text>
</g>
<g>
<title>__sys_sendto (19 samples, 7.69%)</title><rect x="158.1" y="643.0" width="90.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="161.1" y="654.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (18 samples, 7.29%)</title><rect x="162.9" y="627.0" width="86.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="165.9" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (17 samples, 6.88%)</title><rect x="162.9" y="611.0" width="81.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="165.9" y="622.0">inet6_sen..</text>
</g>
<g>
<title>tcp_sendmsg (16 samples, 6.48%)</title><rect x="167.7" y="595.0" width="76.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="170.7" y="606.0">tcp_send..</text>
</g>
<g>
<title>tcp_sendmsg_locked (16 samples, 6.48%)</title><rect x="167.7" y="579.0" width="76.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="170.7" y="590.0">tcp_send..</text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.81%)</title><rect x="167.7" y="563.0" width="9.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="170.7" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.81%)</title><rect x="167.7" y="547.0" width="9.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="170.7" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.40%)</title><rect x="167.7" y="531.0" width="4.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="170.7" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.40%)</title><rect x="172.4" y="531.0" width="4.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="175.4" y="542.0"></text>
</g>
<g>
<title>tcp_push (13 samples, 5.26%)</title><rect x="177.2" y="563.0" width="62.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="180.2" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (13 samples, 5.26%)</title><rect x="177.2" y="547.0" width="62.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="180.2" y="558.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (13 samples, 5.26%)</title><rect x="177.2" y="531.0" width="62.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="180.2" y="542.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (12 samples, 4.86%)</title><rect x="177.2" y="515.0" width="57.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="180.2" y="526.0">__tcp_..</text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.40%)</title><rect x="186.8" y="499.0" width="4.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="189.8" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (9 samples, 3.64%)</title><rect x="191.5" y="499.0" width="43.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="194.5" y="510.0">ip_q..</text>
</g>
<g>
<title>__ip_queue_xmit (9 samples, 3.64%)</title><rect x="191.5" y="483.0" width="43.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="194.5" y="494.0">__ip..</text>
</g>
<g>
<title>ip_local_out (8 samples, 3.24%)</title><rect x="196.3" y="467.0" width="38.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="199.3" y="478.0">ip_..</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.40%)</title><rect x="196.3" y="451.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="199.3" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.40%)</title><rect x="196.3" y="435.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="199.3" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.40%)</title><rect x="196.3" y="419.0" width="4.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="199.3" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.40%)</title><rect x="196.3" y="403.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="199.3" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (1 samples, 0.40%)</title><rect x="196.3" y="387.0" width="4.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="199.3" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.40%)</title><rect x="196.3" y="371.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="199.3" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.40%)</title><rect x="196.3" y="355.0" width="4.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="199.3" y="366.0"></text>
</g>
<g>
<title>ip_output (7 samples, 2.83%)</title><rect x="201.1" y="451.0" width="33.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="204.1" y="462.0">ip..</text>
</g>
<g>
<title>ip_finish_output (7 samples, 2.83%)</title><rect x="201.1" y="435.0" width="33.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="204.1" y="446.0">ip..</text>
</g>
<g>
<title>__ip_finish_output (7 samples, 2.83%)</title><rect x="201.1" y="419.0" width="33.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="204.1" y="430.0">__..</text>
</g>
<g>
<title>ip_finish_output2 (7 samples, 2.83%)</title><rect x="201.1" y="403.0" width="33.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="204.1" y="414.0">ip..</text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 2.02%)</title><rect x="201.1" y="387.0" width="23.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="204.1" y="398.0">_..</text>
</g>
<g>
<title>do_softirq.part.20 (5 samples, 2.02%)</title><rect x="201.1" y="371.0" width="23.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.1" y="382.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (5 samples, 2.02%)</title><rect x="201.1" y="355.0" width="23.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="204.1" y="366.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 2.02%)</title><rect x="201.1" y="339.0" width="23.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="204.1" y="350.0">_..</text>
</g>
<g>
<title>net_rx_action (5 samples, 2.02%)</title><rect x="201.1" y="323.0" width="23.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="204.1" y="334.0">n..</text>
</g>
<g>
<title>process_backlog (5 samples, 2.02%)</title><rect x="201.1" y="307.0" width="23.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.1" y="318.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (5 samples, 2.02%)</title><rect x="201.1" y="291.0" width="23.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="204.1" y="302.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (5 samples, 2.02%)</title><rect x="201.1" y="275.0" width="23.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="204.1" y="286.0">_..</text>
</g>
<g>
<title>ip_rcv (5 samples, 2.02%)</title><rect x="201.1" y="259.0" width="23.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.1" y="270.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 1.62%)</title><rect x="201.1" y="243.0" width="19.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="204.1" y="254.0"></text>
</g>
<g>
<title>ip_local_deliver (4 samples, 1.62%)</title><rect x="201.1" y="227.0" width="19.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.1" y="238.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 1.21%)</title><rect x="201.1" y="211.0" width="14.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="204.1" y="222.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (3 samples, 1.21%)</title><rect x="201.1" y="195.0" width="14.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="204.1" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 1.21%)</title><rect x="201.1" y="179.0" width="14.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 1.21%)</title><rect x="201.1" y="163.0" width="14.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="204.1" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 1.21%)</title><rect x="201.1" y="147.0" width="14.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="204.1" y="158.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.40%)</title><rect x="201.1" y="131.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="204.1" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.40%)</title><rect x="201.1" y="115.0" width="4.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="204.1" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.40%)</title><rect x="201.1" y="99.0" width="4.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="204.1" y="110.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.40%)</title><rect x="201.1" y="83.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="204.1" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.40%)</title><rect x="201.1" y="67.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="204.1" y="78.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.40%)</title><rect x="205.9" y="131.0" width="4.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="208.9" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.40%)</title><rect x="205.9" y="115.0" width="4.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="208.9" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.40%)</title><rect x="205.9" y="99.0" width="4.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="208.9" y="110.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.40%)</title><rect x="205.9" y="83.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="208.9" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.40%)</title><rect x="205.9" y="67.0" width="4.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="208.9" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.40%)</title><rect x="205.9" y="51.0" width="4.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="208.9" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.40%)</title><rect x="205.9" y="35.0" width="4.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="208.9" y="46.0"></text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.40%)</title><rect x="210.6" y="131.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="213.6" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.40%)</title><rect x="210.6" y="115.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="213.6" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.40%)</title><rect x="210.6" y="99.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="213.6" y="110.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.40%)</title><rect x="210.6" y="83.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="213.6" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.40%)</title><rect x="210.6" y="67.0" width="4.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="213.6" y="78.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.40%)</title><rect x="215.4" y="211.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="218.4" y="222.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.40%)</title><rect x="220.2" y="243.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="223.2" y="254.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack] (1 samples, 0.40%)</title><rect x="220.2" y="227.0" width="4.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="223.2" y="238.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.40%)</title><rect x="220.2" y="211.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="223.2" y="222.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.40%)</title><rect x="225.0" y="387.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="228.0" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.40%)</title><rect x="225.0" y="371.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="228.0" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.40%)</title><rect x="225.0" y="355.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="228.0" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.40%)</title><rect x="225.0" y="339.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="228.0" y="350.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.40%)</title><rect x="225.0" y="323.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="228.0" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.40%)</title><rect x="225.0" y="307.0" width="4.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="228.0" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.40%)</title><rect x="225.0" y="291.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="228.0" y="302.0"></text>
</g>
<g>
<title>do_softirq.part.20 (1 samples, 0.40%)</title><rect x="229.8" y="387.0" width="4.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="232.8" y="398.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.40%)</title><rect x="234.5" y="515.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="237.5" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.40%)</title><rect x="239.3" y="563.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="242.3" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.40%)</title><rect x="239.3" y="547.0" width="4.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="242.3" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.40%)</title><rect x="239.3" y="531.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="242.3" y="542.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.40%)</title><rect x="244.1" y="611.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="247.1" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.40%)</title><rect x="244.1" y="595.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="247.1" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.40%)</title><rect x="244.1" y="579.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="247.1" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.40%)</title><rect x="244.1" y="563.0" width="4.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="247.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.40%)</title><rect x="248.9" y="787.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (3 samples, 1.21%)</title><rect x="253.6" y="803.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 1.21%)</title><rect x="253.6" y="787.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.6" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (2 samples, 0.81%)</title><rect x="253.6" y="771.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="256.6" y="782.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="253.6" y="755.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="256.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.40%)</title><rect x="258.4" y="755.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="261.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.40%)</title><rect x="263.2" y="771.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.2" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.40%)</title><rect x="263.2" y="755.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="266.2" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.40%)</title><rect x="263.2" y="739.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.40%)</title><rect x="263.2" y="723.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="263.2" y="707.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="266.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (104 samples, 42.11%)</title><rect x="268.0" y="803.0" width="496.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.0" y="814.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.40%)</title><rect x="268.0" y="787.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="271.0" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.40%)</title><rect x="268.0" y="771.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="271.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.40%)</title><rect x="268.0" y="755.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="271.0" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="268.0" y="739.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="271.0" y="750.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.40%)</title><rect x="272.8" y="787.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="275.8" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.40%)</title><rect x="272.8" y="771.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="275.8" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.40%)</title><rect x="272.8" y="755.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="275.8" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.40%)</title><rect x="272.8" y="739.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="275.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (95 samples, 38.46%)</title><rect x="277.5" y="787.0" width="453.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.5" y="798.0">ru/mail/polis/dao/stasyanoi/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (95 samples, 38.46%)</title><rect x="277.5" y="771.0" width="453.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.5" y="782.0">ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (7 samples, 2.83%)</title><rect x="277.5" y="755.0" width="33.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.5" y="766.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (4 samples, 1.62%)</title><rect x="277.5" y="739.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.5" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (1 samples, 0.40%)</title><rect x="282.3" y="723.0" width="4.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="285.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) [clone .plt] (1 samples, 0.40%)</title><rect x="282.3" y="707.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="285.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::NewIterator(rocksdb::ReadOptions const&amp;) (1 samples, 0.40%)</title><rect x="287.1" y="723.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="290.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() [clone .plt] (1 samples, 0.40%)</title><rect x="291.9" y="723.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="294.9" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="739.0" width="14.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.6" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="723.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.6" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="707.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.6" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="691.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.6" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="675.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.6" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 1.21%)</title><rect x="296.6" y="659.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.40%)</title><rect x="296.6" y="643.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="299.6" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::register_finalizer(JavaThread*, oopDesc*) (2 samples, 0.81%)</title><rect x="301.4" y="643.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="304.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (2 samples, 0.81%)</title><rect x="301.4" y="627.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="304.4" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.81%)</title><rect x="301.4" y="611.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="304.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.40%)</title><rect x="301.4" y="595.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.4" y="606.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.40%)</title><rect x="306.2" y="595.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="309.2" y="606.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.40%)</title><rect x="306.2" y="579.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="309.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (79 samples, 31.98%)</title><rect x="311.0" y="755.0" width="377.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.0" y="766.0">ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (79 samples, 31.98%)</title><rect x="311.0" y="739.0" width="377.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.0" y="750.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (79 samples, 31.98%)</title><rect x="311.0" y="723.0" width="377.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.0" y="734.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.81%)</title><rect x="315.7" y="707.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.7" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (46 samples, 18.62%)</title><rect x="325.3" y="707.0" width="219.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="328.3" y="718.0">Java_org_rocksdb_RocksIterato..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.40%)</title><rect x="325.3" y="691.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="328.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (45 samples, 18.22%)</title><rect x="330.1" y="691.0" width="215.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="333.1" y="702.0">rocksdb::DBIter::Seek(rocksd..</text>
</g>
<g>
<title>rocksdb::DBIter::TooManyInternalKeysSkipped(bool) [clone .plt] (1 samples, 0.40%)</title><rect x="344.4" y="675.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="347.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (41 samples, 16.60%)</title><rect x="349.2" y="675.0" width="195.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="352.2" y="686.0">rocksdb::MemTableIterator..</text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (40 samples, 16.19%)</title><rect x="349.2" y="659.0" width="191.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="352.2" y="670.0">/tmp/librocksdbjni1409605..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (40 samples, 16.19%)</title><rect x="349.2" y="643.0" width="191.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="352.2" y="654.0">rocksdb::InlineSkipList&lt;r..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.40%)</title><rect x="349.2" y="627.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="352.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (39 samples, 15.79%)</title><rect x="354.0" y="627.0" width="186.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="357.0" y="638.0">rocksdb::MemTable::KeyCo..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="358.7" y="611.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="361.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (37 samples, 14.98%)</title><rect x="363.5" y="611.0" width="176.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="366.5" y="622.0">rocksdb::BaseComparator..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (12 samples, 4.86%)</title><rect x="368.3" y="595.0" width="57.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="371.3" y="606.0">JNIEnv..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="368.3" y="579.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.3" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (11 samples, 4.45%)</title><rect x="373.1" y="579.0" width="52.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="376.1" y="590.0">jni_C..</text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 3.64%)</title><rect x="382.6" y="563.0" width="43.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="385.6" y="574.0">jni_..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.40%)</title><rect x="382.6" y="547.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.6" y="558.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.40%)</title><rect x="387.4" y="547.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="390.4" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 1.62%)</title><rect x="392.2" y="547.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="395.2" y="558.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.40%)</title><rect x="397.0" y="531.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="400.0" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.81%)</title><rect x="401.7" y="531.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="404.7" y="542.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.40%)</title><rect x="411.3" y="547.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="414.3" y="558.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.81%)</title><rect x="416.1" y="547.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="419.1" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (14 samples, 5.67%)</title><rect x="425.6" y="595.0" width="66.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="428.6" y="606.0">JNIEnv_..</text>
</g>
<g>
<title>jni_CallVoidMethodV (14 samples, 5.67%)</title><rect x="425.6" y="579.0" width="66.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="428.6" y="590.0">jni_Cal..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.40%)</title><rect x="425.6" y="563.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="428.6" y="574.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.40%)</title><rect x="430.4" y="563.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="433.4" y="574.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.40%)</title><rect x="435.2" y="563.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="438.2" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.81%)</title><rect x="440.0" y="563.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="443.0" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="449.5" y="563.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="452.5" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 3.24%)</title><rect x="454.3" y="563.0" width="38.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="457.3" y="574.0">jni..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.81%)</title><rect x="454.3" y="547.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="457.3" y="558.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.40%)</title><rect x="463.8" y="547.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.8" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 1.21%)</title><rect x="468.6" y="547.0" width="14.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="471.6" y="558.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.81%)</title><rect x="473.4" y="531.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="476.4" y="542.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.40%)</title><rect x="483.0" y="547.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="486.0" y="558.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.40%)</title><rect x="487.7" y="547.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="490.7" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.40%)</title><rect x="492.5" y="595.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="495.5" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 2.02%)</title><rect x="497.3" y="595.0" width="23.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="500.3" y="606.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 1.21%)</title><rect x="502.1" y="579.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="505.1" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="516.4" y="579.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="519.4" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.81%)</title><rect x="521.2" y="595.0" width="9.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="524.2" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.40%)</title><rect x="530.7" y="595.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="533.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.40%)</title><rect x="535.5" y="595.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="538.5" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="535.5" y="579.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="538.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.40%)</title><rect x="540.3" y="659.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="543.3" y="670.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.40%)</title><rect x="545.1" y="707.0" width="4.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="548.1" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 1.21%)</title><rect x="549.8" y="707.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (26 samples, 10.53%)</title><rect x="564.2" y="707.0" width="124.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.2" y="718.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (25 samples, 10.12%)</title><rect x="568.9" y="691.0" width="119.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.9" y="702.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (24 samples, 9.72%)</title><rect x="568.9" y="675.0" width="114.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.9" y="686.0">org/rocksdb/Ab..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (24 samples, 9.72%)</title><rect x="568.9" y="659.0" width="114.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="571.9" y="670.0">org/rocksdb/Sl..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (24 samples, 9.72%)</title><rect x="568.9" y="643.0" width="114.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.9" y="654.0">org/rocksdb/Sl..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (20 samples, 8.10%)</title><rect x="588.1" y="627.0" width="95.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="591.1" y="638.0">Java_org_ro..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="588.1" y="611.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="591.1" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 1.21%)</title><rect x="592.8" y="611.0" width="14.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="595.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.40%)</title><rect x="597.6" y="595.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="600.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="602.4" y="595.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="605.4" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (14 samples, 5.67%)</title><rect x="607.2" y="611.0" width="66.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="610.2" y="622.0">jni_New..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="611.9" y="595.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="614.9" y="606.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.40%)</title><rect x="616.7" y="595.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="619.7" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.40%)</title><rect x="621.5" y="595.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="624.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 1.21%)</title><rect x="626.3" y="595.0" width="14.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="629.3" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 2.83%)</title><rect x="640.6" y="595.0" width="33.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="643.6" y="606.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 1.21%)</title><rect x="654.9" y="579.0" width="14.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="657.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="654.9" y="563.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="657.9" y="574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.40%)</title><rect x="654.9" y="547.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.9" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.81%)</title><rect x="659.7" y="563.0" width="9.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="662.7" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="669.3" y="579.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="672.3" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.81%)</title><rect x="674.0" y="611.0" width="9.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="677.0" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.40%)</title><rect x="674.0" y="595.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.0" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="678.8" y="595.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.8" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.40%)</title><rect x="683.6" y="675.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (9 samples, 3.64%)</title><rect x="688.4" y="755.0" width="43.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.4" y="766.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (7 samples, 2.83%)</title><rect x="697.9" y="739.0" width="33.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.9" y="750.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (7 samples, 2.83%)</title><rect x="697.9" y="723.0" width="33.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="700.9" y="734.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.isOwningHandle (1 samples, 0.40%)</title><rect x="697.9" y="707.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.9" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (6 samples, 2.43%)</title><rect x="702.7" y="707.0" width="28.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.7" y="718.0">or..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.40%)</title><rect x="702.7" y="691.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="705.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (5 samples, 2.02%)</title><rect x="707.5" y="691.0" width="23.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="710.5" y="702.0">r..</text>
</g>
<g>
<title>rocksdb::Arena::~Arena() [clone .plt] (1 samples, 0.40%)</title><rect x="707.5" y="675.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (4 samples, 1.62%)</title><rect x="712.3" y="675.0" width="19.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="715.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 1.21%)</title><rect x="717.0" y="659.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="720.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (2 samples, 0.81%)</title><rect x="721.8" y="643.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.8" y="654.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.40%)</title><rect x="726.6" y="627.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="729.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 2.83%)</title><rect x="731.4" y="787.0" width="33.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="734.4" y="798.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (7 samples, 2.83%)</title><rect x="731.4" y="771.0" width="33.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.4" y="782.0">ru..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (5 samples, 2.02%)</title><rect x="731.4" y="755.0" width="23.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.4" y="766.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (5 samples, 2.02%)</title><rect x="731.4" y="739.0" width="23.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.4" y="750.0">o..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (3 samples, 1.21%)</title><rect x="731.4" y="723.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (3 samples, 1.21%)</title><rect x="731.4" y="707.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 1.21%)</title><rect x="731.4" y="691.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.4" y="702.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.40%)</title><rect x="731.4" y="675.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.4" y="686.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.40%)</title><rect x="731.4" y="659.0" width="4.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="734.4" y="670.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.40%)</title><rect x="731.4" y="643.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="734.4" y="654.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.40%)</title><rect x="731.4" y="627.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="734.4" y="638.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.40%)</title><rect x="731.4" y="611.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.4" y="622.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.40%)</title><rect x="736.2" y="675.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="739.2" y="686.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.40%)</title><rect x="736.2" y="659.0" width="4.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="739.2" y="670.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.40%)</title><rect x="736.2" y="643.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="739.2" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.40%)</title><rect x="736.2" y="627.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.2" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.40%)</title><rect x="740.9" y="675.0" width="4.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="743.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="740.9" y="659.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="743.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (2 samples, 0.81%)</title><rect x="745.7" y="723.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (2 samples, 0.81%)</title><rect x="745.7" y="707.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.7" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (2 samples, 0.81%)</title><rect x="745.7" y="691.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.7" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (2 samples, 0.81%)</title><rect x="745.7" y="675.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.7" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (2 samples, 0.81%)</title><rect x="745.7" y="659.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.7" y="670.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (2 samples, 0.81%)</title><rect x="745.7" y="643.0" width="9.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="748.7" y="654.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.81%)</title><rect x="745.7" y="627.0" width="9.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="748.7" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.81%)</title><rect x="745.7" y="611.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="748.7" y="622.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (1 samples, 0.40%)</title><rect x="755.3" y="755.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.3" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (1 samples, 0.40%)</title><rect x="755.3" y="739.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.3" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_key0 (1 samples, 0.40%)</title><rect x="755.3" y="723.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="758.3" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.40%)</title><rect x="755.3" y="707.0" width="4.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="758.3" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.40%)</title><rect x="755.3" y="691.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="758.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.40%)</title><rect x="760.0" y="755.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="763.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.40%)</title><rect x="760.0" y="739.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.40%)</title><rect x="764.8" y="899.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="764.8" y="883.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="767.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/FinalReference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="764.8" y="867.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="764.8" y="851.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.8" y="862.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (27 samples, 10.93%)</title><rect x="769.6" y="899.0" width="129.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.6" y="910.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (10 samples, 4.05%)</title><rect x="769.6" y="883.0" width="47.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.6" y="894.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (9 samples, 3.64%)</title><rect x="774.4" y="867.0" width="43.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.4" y="878.0">one/..</text>
</g>
<g>
<title>[unknown] (8 samples, 3.24%)</title><rect x="774.4" y="851.0" width="38.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="777.4" y="862.0">[un..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.40%)</title><rect x="774.4" y="835.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="777.4" y="846.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 2.83%)</title><rect x="779.1" y="835.0" width="33.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="782.1" y="846.0">ep..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.02%)</title><rect x="788.7" y="819.0" width="23.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="791.7" y="830.0">e..</text>
</g>
<g>
<title>do_syscall_64 (5 samples, 2.02%)</title><rect x="788.7" y="803.0" width="23.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="791.7" y="814.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 2.02%)</title><rect x="788.7" y="787.0" width="23.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="791.7" y="798.0">_..</text>
</g>
<g>
<title>do_epoll_wait (5 samples, 2.02%)</title><rect x="788.7" y="771.0" width="23.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="791.7" y="782.0">d..</text>
</g>
<g>
<title>ep_poll (5 samples, 2.02%)</title><rect x="788.7" y="755.0" width="23.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="791.7" y="766.0">e..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (3 samples, 1.21%)</title><rect x="788.7" y="739.0" width="14.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="791.7" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 1.21%)</title><rect x="788.7" y="723.0" width="14.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="791.7" y="734.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (3 samples, 1.21%)</title><rect x="788.7" y="707.0" width="14.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="791.7" y="718.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.81%)</title><rect x="793.5" y="691.0" width="9.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="796.5" y="702.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.40%)</title><rect x="798.3" y="675.0" width="4.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="801.3" y="686.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.81%)</title><rect x="803.0" y="739.0" width="9.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="806.0" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.81%)</title><rect x="803.0" y="723.0" width="9.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="806.0" y="734.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.81%)</title><rect x="803.0" y="707.0" width="9.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="806.0" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.81%)</title><rect x="803.0" y="691.0" width="9.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="806.0" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.81%)</title><rect x="803.0" y="675.0" width="9.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="806.0" y="686.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.40%)</title><rect x="812.6" y="851.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="815.6" y="862.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.40%)</title><rect x="812.6" y="835.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="815.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (17 samples, 6.88%)</title><rect x="817.4" y="883.0" width="81.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="820.4" y="894.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (17 samples, 6.88%)</title><rect x="817.4" y="867.0" width="81.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.4" y="878.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 2.02%)</title><rect x="817.4" y="851.0" width="23.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="820.4" y="862.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4 samples, 1.62%)</title><rect x="817.4" y="835.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 1.62%)</title><rect x="817.4" y="819.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.4" y="830.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (3 samples, 1.21%)</title><rect x="817.4" y="803.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="820.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.40%)</title><rect x="817.4" y="787.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (2 samples, 0.81%)</title><rect x="822.1" y="787.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.81%)</title><rect x="822.1" y="771.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.81%)</title><rect x="822.1" y="755.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.81%)</title><rect x="822.1" y="739.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.81%)</title><rect x="822.1" y="723.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.81%)</title><rect x="822.1" y="707.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.81%)</title><rect x="822.1" y="691.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.81%)</title><rect x="822.1" y="675.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.81%)</title><rect x="822.1" y="659.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="825.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.81%)</title><rect x="822.1" y="643.0" width="9.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="825.1" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.81%)</title><rect x="822.1" y="627.0" width="9.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="825.1" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.81%)</title><rect x="822.1" y="611.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.1" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.81%)</title><rect x="822.1" y="595.0" width="9.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="825.1" y="606.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.81%)</title><rect x="822.1" y="579.0" width="9.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="825.1" y="590.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.81%)</title><rect x="822.1" y="563.0" width="9.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="825.1" y="574.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.81%)</title><rect x="822.1" y="547.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.1" y="558.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.81%)</title><rect x="822.1" y="531.0" width="9.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="825.1" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.81%)</title><rect x="822.1" y="515.0" width="9.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="825.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.40%)</title><rect x="831.7" y="803.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="831.7" y="787.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="831.7" y="771.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="834.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.40%)</title><rect x="831.7" y="755.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.40%)</title><rect x="836.5" y="835.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.40%)</title><rect x="836.5" y="819.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.40%)</title><rect x="836.5" y="803.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.40%)</title><rect x="836.5" y="787.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.40%)</title><rect x="836.5" y="771.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.40%)</title><rect x="836.5" y="755.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.5" y="766.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.40%)</title><rect x="836.5" y="739.0" width="4.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="839.5" y="750.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.40%)</title><rect x="836.5" y="723.0" width="4.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="839.5" y="734.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.40%)</title><rect x="836.5" y="707.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="839.5" y="718.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.40%)</title><rect x="836.5" y="691.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="839.5" y="702.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.40%)</title><rect x="836.5" y="675.0" width="4.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="839.5" y="686.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.40%)</title><rect x="836.5" y="659.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="839.5" y="670.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.40%)</title><rect x="836.5" y="643.0" width="4.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="839.5" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 4.86%)</title><rect x="841.3" y="851.0" width="57.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.3" y="862.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 4.86%)</title><rect x="841.3" y="835.0" width="57.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.3" y="846.0">one/ni..</text>
</g>
<g>
<title>__GI___recv (11 samples, 4.45%)</title><rect x="846.0" y="819.0" width="52.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="849.0" y="830.0">__GI_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 4.05%)</title><rect x="850.8" y="803.0" width="47.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="853.8" y="814.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (10 samples, 4.05%)</title><rect x="850.8" y="787.0" width="47.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="853.8" y="798.0">do_s..</text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.40%)</title><rect x="850.8" y="771.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="853.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 3.64%)</title><rect x="855.6" y="771.0" width="43.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="858.6" y="782.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (8 samples, 3.24%)</title><rect x="855.6" y="755.0" width="38.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="858.6" y="766.0">__s..</text>
</g>
<g>
<title>sock_recvmsg (7 samples, 2.83%)</title><rect x="855.6" y="739.0" width="33.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="858.6" y="750.0">so..</text>
</g>
<g>
<title>inet6_recvmsg (5 samples, 2.02%)</title><rect x="855.6" y="723.0" width="23.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="858.6" y="734.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (5 samples, 2.02%)</title><rect x="855.6" y="707.0" width="23.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="858.6" y="718.0">t..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.40%)</title><rect x="855.6" y="691.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="858.6" y="702.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.40%)</title><rect x="855.6" y="675.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="858.6" y="686.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.40%)</title><rect x="860.4" y="691.0" width="4.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="863.4" y="702.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.40%)</title><rect x="865.1" y="691.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="868.1" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.40%)</title><rect x="865.1" y="675.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="868.1" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.40%)</title><rect x="869.9" y="691.0" width="4.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="872.9" y="702.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.40%)</title><rect x="869.9" y="675.0" width="4.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="872.9" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.40%)</title><rect x="874.7" y="691.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="877.7" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.40%)</title><rect x="874.7" y="675.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="877.7" y="686.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.40%)</title><rect x="874.7" y="659.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="877.7" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.81%)</title><rect x="879.5" y="723.0" width="9.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="882.5" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.40%)</title><rect x="884.3" y="707.0" width="4.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="887.3" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.40%)</title><rect x="884.3" y="691.0" width="4.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="887.3" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.40%)</title><rect x="884.3" y="675.0" width="4.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="887.3" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.40%)</title><rect x="884.3" y="659.0" width="4.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="887.3" y="670.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.40%)</title><rect x="884.3" y="643.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.3" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.40%)</title><rect x="889.0" y="739.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="892.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.40%)</title><rect x="889.0" y="723.0" width="4.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="892.0" y="734.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.40%)</title><rect x="893.8" y="755.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="896.8" y="766.0"></text>
</g>
<g>
<title>start_thread (61 samples, 24.70%)</title><rect x="898.6" y="899.0" width="291.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="901.6" y="910.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (61 samples, 24.70%)</title><rect x="898.6" y="883.0" width="291.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="901.6" y="894.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (61 samples, 24.70%)</title><rect x="898.6" y="867.0" width="291.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.6" y="878.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.05%)</title><rect x="898.6" y="851.0" width="47.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.6" y="862.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.43%)</title><rect x="898.6" y="835.0" width="28.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.6" y="846.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.81%)</title><rect x="898.6" y="819.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.6" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="903.4" y="803.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="906.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="908.1" y="819.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.1" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="908.1" y="803.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="908.1" y="787.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="911.1" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="908.1" y="771.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.1" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="908.1" y="755.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.1" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (1 samples, 0.40%)</title><rect x="908.1" y="739.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.1" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.40%)</title><rect x="908.1" y="723.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="911.1" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.40%)</title><rect x="908.1" y="707.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="911.1" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.40%)</title><rect x="908.1" y="691.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.1" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.81%)</title><rect x="912.9" y="819.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="915.9" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.81%)</title><rect x="912.9" y="803.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.9" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.81%)</title><rect x="912.9" y="787.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.9" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="912.9" y="771.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="915.9" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.40%)</title><rect x="917.7" y="771.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.7" y="782.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.40%)</title><rect x="917.7" y="755.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.7" y="766.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.40%)</title><rect x="917.7" y="739.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.7" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="922.5" y="819.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.40%)</title><rect x="922.5" y="803.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.5" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.40%)</title><rect x="922.5" y="787.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="925.5" y="798.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.40%)</title><rect x="922.5" y="771.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="925.5" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.40%)</title><rect x="922.5" y="755.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="922.5" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.5" y="750.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (4 samples, 1.62%)</title><rect x="927.2" y="835.0" width="19.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="930.2" y="846.0"></text>
</g>
<g>
<title>RefProcPhase3Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (4 samples, 1.62%)</title><rect x="927.2" y="819.0" width="19.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="930.2" y="830.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&amp;, OopClosure*, VoidClosure*) (4 samples, 1.62%)</title><rect x="927.2" y="803.0" width="19.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="930.2" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.62%)</title><rect x="927.2" y="787.0" width="19.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.2" y="798.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.62%)</title><rect x="927.2" y="771.0" width="19.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="930.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (51 samples, 20.65%)</title><rect x="946.4" y="851.0" width="243.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.4" y="862.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (51 samples, 20.65%)</title><rect x="946.4" y="835.0" width="243.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.4" y="846.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (51 samples, 20.65%)</title><rect x="946.4" y="819.0" width="243.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="949.4" y="830.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (45 samples, 18.22%)</title><rect x="946.4" y="803.0" width="214.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.4" y="814.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (45 samples, 18.22%)</title><rect x="946.4" y="787.0" width="214.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="949.4" y="798.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (25 samples, 10.12%)</title><rect x="946.4" y="771.0" width="119.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.4" y="782.0">Compile::Code_G..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.81%)</title><rect x="946.4" y="755.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.4" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.81%)</title><rect x="946.4" y="739.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="949.4" y="750.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.40%)</title><rect x="951.1" y="723.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.1" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="951.1" y="707.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.1" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.40%)</title><rect x="955.9" y="755.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.9" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.40%)</title><rect x="955.9" y="739.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.21%)</title><rect x="960.7" y="755.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.7" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.21%)</title><rect x="960.7" y="739.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="960.7" y="723.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.40%)</title><rect x="960.7" y="707.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.7" y="718.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="960.7" y="691.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="963.7" y="702.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.40%)</title><rect x="960.7" y="675.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.40%)</title><rect x="965.5" y="723.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.5" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="965.5" y="707.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.5" y="718.0"></text>
</g>
<g>
<title>compB_mem_immNode::oper_input_base() const (1 samples, 0.40%)</title><rect x="970.2" y="723.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.40%)</title><rect x="975.0" y="755.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 7.29%)</title><rect x="979.8" y="755.0" width="86.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.8" y="766.0">PhaseChait..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.40%)</title><rect x="979.8" y="739.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="979.8" y="723.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="982.8" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="979.8" y="707.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.21%)</title><rect x="984.6" y="739.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.6" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="984.6" y="723.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.6" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.81%)</title><rect x="989.4" y="723.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="994.1" y="707.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.40%)</title><rect x="998.9" y="739.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.21%)</title><rect x="1003.7" y="739.0" width="14.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.40%)</title><rect x="1008.5" y="723.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.5" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="1008.5" y="707.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.5" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.40%)</title><rect x="1013.2" y="723.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.81%)</title><rect x="1018.0" y="739.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.81%)</title><rect x="1018.0" y="723.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1022.8" y="707.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.40%)</title><rect x="1027.6" y="739.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.6" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="1027.6" y="723.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.40%)</title><rect x="1032.3" y="739.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.81%)</title><rect x="1037.1" y="739.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.40%)</title><rect x="1046.7" y="739.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.7" y="750.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.40%)</title><rect x="1046.7" y="723.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.7" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.21%)</title><rect x="1051.5" y="739.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.5" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="1061.0" y="723.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 5.26%)</title><rect x="1065.8" y="771.0" width="62.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.8" y="782.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (5 samples, 2.02%)</title><rect x="1065.8" y="755.0" width="23.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.8" y="766.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 2.02%)</title><rect x="1065.8" y="739.0" width="23.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.8" y="750.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1065.8" y="723.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1070.6" y="723.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1075.3" y="723.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.3" y="734.0"></text>
</g>
<g>
<title>ArrayCopyNode::Opcode() const (1 samples, 0.40%)</title><rect x="1075.3" y="707.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.40%)</title><rect x="1080.1" y="723.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.40%)</title><rect x="1080.1" y="707.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.40%)</title><rect x="1080.1" y="691.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="1080.1" y="675.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1084.9" y="723.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1084.9" y="707.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.9" y="718.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1084.9" y="691.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1089.7" y="755.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1089.7" y="739.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="723.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="707.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="691.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="675.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="659.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="643.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="627.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.40%)</title><rect x="1089.7" y="611.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.7" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="1094.5" y="755.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.5" y="766.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.40%)</title><rect x="1094.5" y="739.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.81%)</title><rect x="1099.2" y="755.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.81%)</title><rect x="1099.2" y="739.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.40%)</title><rect x="1104.0" y="723.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.81%)</title><rect x="1108.8" y="755.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.81%)</title><rect x="1108.8" y="739.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.40%)</title><rect x="1108.8" y="723.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.8" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1113.6" y="723.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1113.6" y="707.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.6" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1113.6" y="691.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.6" y="702.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1113.6" y="675.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.6" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.40%)</title><rect x="1118.3" y="755.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.3" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.40%)</title><rect x="1118.3" y="739.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1118.3" y="723.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.3" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1123.1" y="755.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1123.1" y="739.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1123.1" y="723.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.1" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1123.1" y="707.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1127.9" y="771.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.9" y="782.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.40%)</title><rect x="1127.9" y="755.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.43%)</title><rect x="1132.7" y="771.0" width="28.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.7" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.43%)</title><rect x="1132.7" y="755.0" width="28.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.7" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.43%)</title><rect x="1132.7" y="739.0" width="28.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.7" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.43%)</title><rect x="1132.7" y="723.0" width="28.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.7" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.43%)</title><rect x="1132.7" y="707.0" width="28.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.7" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.43%)</title><rect x="1132.7" y="691.0" width="28.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.7" y="702.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1132.7" y="675.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.7" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1132.7" y="659.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.7" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1132.7" y="643.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1132.7" y="627.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.7" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.40%)</title><rect x="1132.7" y="611.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.7" y="622.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.40%)</title><rect x="1132.7" y="595.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.7" y="606.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.40%)</title><rect x="1132.7" y="579.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.4" y="675.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.4" y="659.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.4" y="643.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.4" y="627.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.4" y="611.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.4" y="595.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.4" y="579.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.4" y="563.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.4" y="547.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.4" y="531.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.4" y="515.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.4" y="499.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.4" y="483.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.4" y="467.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.4" y="451.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.4" y="435.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.4" y="419.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.4" y="403.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.4" y="387.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.4" y="371.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.4" y="355.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1137.4" y="339.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1137.4" y="323.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1137.4" y="307.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.4" y="291.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1137.4" y="275.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.4" y="259.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1137.4" y="243.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.40%)</title><rect x="1142.2" y="355.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.2" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="1142.2" y="339.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.2" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1147.0" y="675.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1147.0" y="659.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.21%)</title><rect x="1147.0" y="643.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.21%)</title><rect x="1147.0" y="627.0" width="14.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.21%)</title><rect x="1147.0" y="611.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.21%)</title><rect x="1147.0" y="595.0" width="14.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.21%)</title><rect x="1147.0" y="579.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1147.0" y="563.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1147.0" y="547.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1147.0" y="531.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1147.0" y="515.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1147.0" y="499.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1147.0" y="483.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.0" y="467.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.0" y="451.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.0" y="435.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.0" y="419.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.0" y="403.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.0" y="387.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.0" y="371.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.0" y="355.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.40%)</title><rect x="1147.0" y="339.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.40%)</title><rect x="1147.0" y="323.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.40%)</title><rect x="1147.0" y="307.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="318.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="1147.0" y="291.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.8" y="467.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.8" y="451.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.8" y="435.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.8" y="419.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.8" y="403.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.8" y="387.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.8" y="371.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.8" y="355.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.8" y="339.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.8" y="323.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.8" y="307.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.8" y="291.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1151.8" y="275.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1151.8" y="259.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="270.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.40%)</title><rect x="1151.8" y="243.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="254.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.40%)</title><rect x="1151.8" y="227.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.8" y="238.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.40%)</title><rect x="1151.8" y="211.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="222.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.40%)</title><rect x="1151.8" y="195.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1151.8" y="179.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1151.8" y="163.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.8" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1151.8" y="147.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="158.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1151.8" y="131.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="142.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.147] (1 samples, 0.40%)</title><rect x="1151.8" y="115.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.8" y="126.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1151.8" y="99.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.8" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.40%)</title><rect x="1156.6" y="563.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1156.6" y="547.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="1156.6" y="531.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 2.43%)</title><rect x="1161.3" y="803.0" width="28.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="814.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (6 samples, 2.43%)</title><rect x="1161.3" y="787.0" width="28.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.3" y="798.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 2.43%)</title><rect x="1161.3" y="771.0" width="28.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="782.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 2.02%)</title><rect x="1161.3" y="755.0" width="23.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="766.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (3 samples, 1.21%)</title><rect x="1161.3" y="739.0" width="14.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.3" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 1.21%)</title><rect x="1161.3" y="723.0" width="14.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 1.21%)</title><rect x="1161.3" y="707.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 1.21%)</title><rect x="1161.3" y="691.0" width="14.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="702.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.40%)</title><rect x="1161.3" y="675.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="686.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.40%)</title><rect x="1161.3" y="659.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.81%)</title><rect x="1166.1" y="675.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.81%)</title><rect x="1166.1" y="659.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.81%)</title><rect x="1166.1" y="643.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="627.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="611.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1166.1" y="595.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1166.1" y="579.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1166.1" y="563.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="547.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="531.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1166.1" y="515.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.1" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1166.1" y="499.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.1" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1166.1" y="483.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="467.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="451.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1166.1" y="435.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.1" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1166.1" y="419.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1166.1" y="403.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="387.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1166.1" y="371.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.1" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1166.1" y="355.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1166.1" y="339.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1166.1" y="323.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1166.1" y="307.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1166.1" y="291.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1166.1" y="275.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.1" y="286.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1166.1" y="259.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1166.1" y="243.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.1" y="254.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.40%)</title><rect x="1166.1" y="227.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1170.9" y="627.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1170.9" y="611.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1170.9" y="595.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.9" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1170.9" y="579.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1170.9" y="563.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1170.9" y="547.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.40%)</title><rect x="1170.9" y="531.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="542.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.40%)</title><rect x="1170.9" y="515.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.81%)</title><rect x="1175.7" y="739.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.81%)</title><rect x="1175.7" y="723.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.40%)</title><rect x="1175.7" y="707.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="718.0"></text>
</g>
<g>
<title>LinearScan::init_compute_oop_maps() (1 samples, 0.40%)</title><rect x="1175.7" y="691.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.40%)</title><rect x="1175.7" y="675.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1175.7" y="659.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.40%)</title><rect x="1180.4" y="707.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>MoveResolver::MoveResolver(LinearScan*) (1 samples, 0.40%)</title><rect x="1180.4" y="691.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1180.4" y="675.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.40%)</title><rect x="1185.2" y="755.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>Dependencies::DepStream::context_type() (1 samples, 0.40%)</title><rect x="1185.2" y="739.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
</g>
</svg>
