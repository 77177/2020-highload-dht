<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (914 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.33%)</title><rect x="10.0" y="915.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.11%)</title><rect x="10.0" y="691.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.11%)</title><rect x="10.0" y="675.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="10.0" y="659.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="10.0" y="643.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="627.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="611.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="10.0" y="595.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="10.0" y="579.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="10.0" y="563.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="547.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="10.0" y="531.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.22%)</title><rect x="11.3" y="899.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (20 samples, 2.19%)</title><rect x="13.9" y="915.0" width="25.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="16.9" y="926.0">[..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (19 samples, 2.08%)</title><rect x="13.9" y="899.0" width="24.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="16.9" y="910.0">J..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (19 samples, 2.08%)</title><rect x="13.9" y="883.0" width="24.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.9" y="894.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (19 samples, 2.08%)</title><rect x="13.9" y="867.0" width="24.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.9" y="878.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (19 samples, 2.08%)</title><rect x="13.9" y="851.0" width="24.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.9" y="862.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (19 samples, 2.08%)</title><rect x="13.9" y="835.0" width="24.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.9" y="846.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (19 samples, 2.08%)</title><rect x="13.9" y="819.0" width="24.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.9" y="830.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (19 samples, 2.08%)</title><rect x="13.9" y="803.0" width="24.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.9" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.11%)</title><rect x="13.9" y="787.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.11%)</title><rect x="13.9" y="771.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="13.9" y="755.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="13.9" y="739.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.11%)</title><rect x="13.9" y="723.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.11%)</title><rect x="13.9" y="707.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.9" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.11%)</title><rect x="13.9" y="691.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.9" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="13.9" y="675.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="16.9" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="13.9" y="659.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="16.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="13.9" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="13.9" y="627.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.9" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="13.9" y="611.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.9" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.11%)</title><rect x="13.9" y="595.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.9" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="13.9" y="579.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="16.9" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="13.9" y="563.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (18 samples, 1.97%)</title><rect x="15.2" y="787.0" width="23.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.2" y="798.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 1.97%)</title><rect x="15.2" y="771.0" width="23.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.2" y="782.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (18 samples, 1.97%)</title><rect x="15.2" y="755.0" width="23.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.2" y="766.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (18 samples, 1.97%)</title><rect x="15.2" y="739.0" width="23.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.2" y="750.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (18 samples, 1.97%)</title><rect x="15.2" y="723.0" width="23.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.2" y="734.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (18 samples, 1.97%)</title><rect x="15.2" y="707.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.2" y="718.0">r..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (18 samples, 1.97%)</title><rect x="15.2" y="691.0" width="23.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.2" y="702.0">r..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (18 samples, 1.97%)</title><rect x="15.2" y="675.0" width="23.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.2" y="686.0">b..</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (18 samples, 1.97%)</title><rect x="15.2" y="659.0" width="23.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="18.2" y="670.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (18 samples, 1.97%)</title><rect x="15.2" y="643.0" width="23.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="18.2" y="654.0">/..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 1.97%)</title><rect x="15.2" y="627.0" width="23.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (18 samples, 1.97%)</title><rect x="15.2" y="611.0" width="23.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.2" y="622.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (6 samples, 0.66%)</title><rect x="15.2" y="595.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.2" y="606.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 0.66%)</title><rect x="15.2" y="579.0" width="7.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="18.2" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.66%)</title><rect x="15.2" y="563.0" width="7.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="18.2" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.66%)</title><rect x="15.2" y="547.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.2" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (5 samples, 0.55%)</title><rect x="15.2" y="531.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.2" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="21.6" y="531.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="24.6" y="542.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="21.6" y="515.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.6" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (12 samples, 1.31%)</title><rect x="22.9" y="595.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.9" y="606.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (12 samples, 1.31%)</title><rect x="22.9" y="579.0" width="15.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="25.9" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (12 samples, 1.31%)</title><rect x="22.9" y="563.0" width="15.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="25.9" y="574.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.33%)</title><rect x="22.9" y="547.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="25.9" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 0.98%)</title><rect x="26.8" y="547.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.8" y="558.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="30.7" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="33.7" y="542.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.44%)</title><rect x="31.9" y="531.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="34.9" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="37.1" y="531.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="40.1" y="542.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="37.1" y="515.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="40.1" y="526.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.11%)</title><rect x="38.4" y="899.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="41.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (830 samples, 90.81%)</title><rect x="39.7" y="915.0" width="1071.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.7" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (830 samples, 90.81%)</title><rect x="39.7" y="899.0" width="1071.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.7" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (830 samples, 90.81%)</title><rect x="39.7" y="883.0" width="1071.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.7" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.22%)</title><rect x="60.4" y="867.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.4" y="878.0"></text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.11%)</title><rect x="61.6" y="851.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="64.6" y="862.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.11%)</title><rect x="61.6" y="835.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="64.6" y="846.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.11%)</title><rect x="61.6" y="819.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="64.6" y="830.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.11%)</title><rect x="61.6" y="803.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="64.6" y="814.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.11%)</title><rect x="62.9" y="867.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.9" y="878.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="62.9" y="851.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="65.9" y="862.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.11%)</title><rect x="62.9" y="835.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="65.9" y="846.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.11%)</title><rect x="62.9" y="819.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="65.9" y="830.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.11%)</title><rect x="62.9" y="803.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="65.9" y="814.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.11%)</title><rect x="62.9" y="787.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="65.9" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.11%)</title><rect x="62.9" y="771.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="65.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.11%)</title><rect x="64.2" y="867.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 2.63%)</title><rect x="65.5" y="867.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.5" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (23 samples, 2.52%)</title><rect x="66.8" y="851.0" width="29.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.8" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 0.98%)</title><rect x="66.8" y="835.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.11%)</title><rect x="66.8" y="819.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="66.8" y="803.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.88%)</title><rect x="68.1" y="819.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.77%)</title><rect x="69.4" y="803.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.4" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.22%)</title><rect x="69.4" y="787.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="72.4" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.22%)</title><rect x="69.4" y="771.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="72.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.55%)</title><rect x="72.0" y="787.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="75.0" y="798.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (5 samples, 0.55%)</title><rect x="72.0" y="771.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="75.0" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.44%)</title><rect x="73.3" y="755.0" width="5.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="76.3" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.44%)</title><rect x="73.3" y="739.0" width="5.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="76.3" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.44%)</title><rect x="73.3" y="723.0" width="5.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="76.3" y="734.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.44%)</title><rect x="73.3" y="707.0" width="5.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="76.3" y="718.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.33%)</title><rect x="74.6" y="691.0" width="3.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="77.6" y="702.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.11%)</title><rect x="77.1" y="675.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="80.1" y="686.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.11%)</title><rect x="77.1" y="659.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="80.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.22%)</title><rect x="78.4" y="835.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.22%)</title><rect x="78.4" y="819.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.22%)</title><rect x="78.4" y="803.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.22%)</title><rect x="78.4" y="787.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.22%)</title><rect x="78.4" y="771.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.22%)</title><rect x="78.4" y="755.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.4" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.22%)</title><rect x="78.4" y="739.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="81.4" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.11%)</title><rect x="79.7" y="723.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="82.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.31%)</title><rect x="81.0" y="835.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.31%)</title><rect x="81.0" y="819.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.31%)</title><rect x="81.0" y="803.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.31%)</title><rect x="81.0" y="787.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.0" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.98%)</title><rect x="84.9" y="771.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.9" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.22%)</title><rect x="84.9" y="755.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="87.9" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.11%)</title><rect x="86.2" y="739.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="89.2" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.77%)</title><rect x="87.5" y="755.0" width="9.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="90.5" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.77%)</title><rect x="87.5" y="739.0" width="9.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="90.5" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.77%)</title><rect x="87.5" y="723.0" width="9.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="90.5" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.55%)</title><rect x="88.8" y="707.0" width="6.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="91.8" y="718.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.55%)</title><rect x="88.8" y="691.0" width="6.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="91.8" y="702.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.55%)</title><rect x="88.8" y="675.0" width="6.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="91.8" y="686.0"></text>
</g>
<g>
<title>wake_up_q (5 samples, 0.55%)</title><rect x="88.8" y="659.0" width="6.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="91.8" y="670.0"></text>
</g>
<g>
<title>try_to_wake_up (5 samples, 0.55%)</title><rect x="88.8" y="643.0" width="6.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="91.8" y="654.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.55%)</title><rect x="88.8" y="627.0" width="6.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="91.8" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="95.2" y="707.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="98.2" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.11%)</title><rect x="95.2" y="691.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="98.2" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.11%)</title><rect x="95.2" y="675.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="98.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/996278844.run (786 samples, 86.00%)</title><rect x="96.5" y="867.0" width="1014.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.5" y="878.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/996278844.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (786 samples, 86.00%)</title><rect x="96.5" y="851.0" width="1014.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.5" y="862.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.putInternal (786 samples, 86.00%)</title><rect x="96.5" y="835.0" width="1014.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.5" y="846.0">ru/mail/polis/service/stasyanoi/CustomServer.putInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (71 samples, 7.77%)</title><rect x="96.5" y="819.0" width="91.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.5" y="830.0">one/nio/htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.22%)</title><rect x="97.8" y="803.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.22%)</title><rect x="97.8" y="787.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.22%)</title><rect x="97.8" y="771.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.8" y="782.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="97.8" y="755.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="100.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="99.1" y="755.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.1" y="766.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="99.1" y="739.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="102.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="99.1" y="723.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="102.1" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.11%)</title><rect x="100.4" y="803.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.4" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="100.4" y="787.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.4" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="100.4" y="771.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="103.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (65 samples, 7.11%)</title><rect x="101.7" y="803.0" width="83.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.7" y="814.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.22%)</title><rect x="101.7" y="787.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (63 samples, 6.89%)</title><rect x="104.2" y="787.0" width="81.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.2" y="798.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (63 samples, 6.89%)</title><rect x="104.2" y="771.0" width="81.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.2" y="782.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.11%)</title><rect x="104.2" y="755.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.2" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (62 samples, 6.78%)</title><rect x="105.5" y="755.0" width="80.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.5" y="766.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (62 samples, 6.78%)</title><rect x="105.5" y="739.0" width="80.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.5" y="750.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.22%)</title><rect x="106.8" y="723.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="109.8" y="734.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.11%)</title><rect x="108.1" y="707.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="111.1" y="718.0"></text>
</g>
<g>
<title>__libc_send (59 samples, 6.46%)</title><rect x="109.4" y="723.0" width="76.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="112.4" y="734.0">__libc_s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (58 samples, 6.35%)</title><rect x="110.7" y="707.0" width="74.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="113.7" y="718.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (58 samples, 6.35%)</title><rect x="110.7" y="691.0" width="74.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="113.7" y="702.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_sendto (58 samples, 6.35%)</title><rect x="110.7" y="675.0" width="74.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="113.7" y="686.0">__x64_sy..</text>
</g>
<g>
<title>__sys_sendto (57 samples, 6.24%)</title><rect x="110.7" y="659.0" width="73.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="113.7" y="670.0">__sys_se..</text>
</g>
<g>
<title>fput_many (1 samples, 0.11%)</title><rect x="110.7" y="643.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="113.7" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (55 samples, 6.02%)</title><rect x="112.0" y="643.0" width="71.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="115.0" y="654.0">sock_sen..</text>
</g>
<g>
<title>inet6_sendmsg (51 samples, 5.58%)</title><rect x="112.0" y="627.0" width="65.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="115.0" y="638.0">inet6_s..</text>
</g>
<g>
<title>tcp_sendmsg (50 samples, 5.47%)</title><rect x="112.0" y="611.0" width="64.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="115.0" y="622.0">tcp_sen..</text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.11%)</title><rect x="113.3" y="595.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="116.3" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (48 samples, 5.25%)</title><rect x="114.6" y="595.0" width="61.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="117.6" y="606.0">tcp_se..</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.11%)</title><rect x="117.2" y="579.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="120.2" y="590.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.11%)</title><rect x="117.2" y="563.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="120.2" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (5 samples, 0.55%)</title><rect x="118.4" y="579.0" width="6.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="121.4" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.44%)</title><rect x="119.7" y="563.0" width="5.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="122.7" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.11%)</title><rect x="119.7" y="547.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="122.7" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.11%)</title><rect x="119.7" y="531.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="122.7" y="542.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.11%)</title><rect x="121.0" y="547.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="124.0" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.22%)</title><rect x="122.3" y="547.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="125.3" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.22%)</title><rect x="122.3" y="531.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="125.3" y="542.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.22%)</title><rect x="124.9" y="579.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.9" y="590.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.11%)</title><rect x="126.2" y="563.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="129.2" y="574.0"></text>
</g>
<g>
<title>tcp_push (38 samples, 4.16%)</title><rect x="127.5" y="579.0" width="49.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="130.5" y="590.0">tcp_p..</text>
</g>
<g>
<title>__tcp_push_pending_frames (38 samples, 4.16%)</title><rect x="127.5" y="563.0" width="49.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="130.5" y="574.0">__tcp..</text>
</g>
<g>
<title>tcp_write_xmit (38 samples, 4.16%)</title><rect x="127.5" y="547.0" width="49.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="130.5" y="558.0">tcp_w..</text>
</g>
<g>
<title>__tcp_transmit_skb (37 samples, 4.05%)</title><rect x="127.5" y="531.0" width="47.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="130.5" y="542.0">__tc..</text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.11%)</title><rect x="128.8" y="515.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="131.8" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (34 samples, 3.72%)</title><rect x="130.1" y="515.0" width="43.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="133.1" y="526.0">ip_q..</text>
</g>
<g>
<title>__ip_queue_xmit (34 samples, 3.72%)</title><rect x="130.1" y="499.0" width="43.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="133.1" y="510.0">__ip..</text>
</g>
<g>
<title>ip_local_out (34 samples, 3.72%)</title><rect x="130.1" y="483.0" width="43.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="133.1" y="494.0">ip_l..</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.33%)</title><rect x="130.1" y="467.0" width="3.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="133.1" y="478.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.11%)</title><rect x="130.1" y="451.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="133.1" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.22%)</title><rect x="131.4" y="451.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="134.4" y="462.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (2 samples, 0.22%)</title><rect x="131.4" y="435.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="134.4" y="446.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.22%)</title><rect x="131.4" y="419.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="134.4" y="430.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (2 samples, 0.22%)</title><rect x="131.4" y="403.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="134.4" y="414.0"></text>
</g>
<g>
<title>ip_output (30 samples, 3.28%)</title><rect x="133.9" y="467.0" width="38.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="136.9" y="478.0">ip_..</text>
</g>
<g>
<title>ip_finish_output (30 samples, 3.28%)</title><rect x="133.9" y="451.0" width="38.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="136.9" y="462.0">ip_..</text>
</g>
<g>
<title>__ip_finish_output (30 samples, 3.28%)</title><rect x="133.9" y="435.0" width="38.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="136.9" y="446.0">__i..</text>
</g>
<g>
<title>ip_finish_output2 (29 samples, 3.17%)</title><rect x="135.2" y="419.0" width="37.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="138.2" y="430.0">ip_..</text>
</g>
<g>
<title>__local_bh_enable_ip (26 samples, 2.84%)</title><rect x="135.2" y="403.0" width="33.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="138.2" y="414.0">__..</text>
</g>
<g>
<title>do_softirq.part.20 (26 samples, 2.84%)</title><rect x="135.2" y="387.0" width="33.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="138.2" y="398.0">do..</text>
</g>
<g>
<title>do_softirq_own_stack (26 samples, 2.84%)</title><rect x="135.2" y="371.0" width="33.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="138.2" y="382.0">do..</text>
</g>
<g>
<title>__softirqentry_text_start (26 samples, 2.84%)</title><rect x="135.2" y="355.0" width="33.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="138.2" y="366.0">__..</text>
</g>
<g>
<title>net_rx_action (23 samples, 2.52%)</title><rect x="139.1" y="339.0" width="29.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="142.1" y="350.0">ne..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.11%)</title><rect x="139.1" y="323.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="142.1" y="334.0"></text>
</g>
<g>
<title>process_backlog (22 samples, 2.41%)</title><rect x="140.4" y="323.0" width="28.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="143.4" y="334.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb (22 samples, 2.41%)</title><rect x="140.4" y="307.0" width="28.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="143.4" y="318.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (22 samples, 2.41%)</title><rect x="140.4" y="291.0" width="28.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="143.4" y="302.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.22%)</title><rect x="140.4" y="275.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="143.4" y="286.0"></text>
</g>
<g>
<title>ip_rcv (20 samples, 2.19%)</title><rect x="143.0" y="275.0" width="25.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="146.0" y="286.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (19 samples, 2.08%)</title><rect x="143.0" y="259.0" width="24.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="146.0" y="270.0">i..</text>
</g>
<g>
<title>ip_local_deliver (18 samples, 1.97%)</title><rect x="143.0" y="243.0" width="23.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="146.0" y="254.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (17 samples, 1.86%)</title><rect x="143.0" y="227.0" width="21.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="146.0" y="238.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (17 samples, 1.86%)</title><rect x="143.0" y="211.0" width="21.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="146.0" y="222.0">i..</text>
</g>
<g>
<title>tcp_v4_rcv (17 samples, 1.86%)</title><rect x="143.0" y="195.0" width="21.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.0" y="206.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.22%)</title><rect x="145.6" y="179.0" width="2.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="148.6" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.11%)</title><rect x="146.8" y="163.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="149.8" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.11%)</title><rect x="148.1" y="179.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="151.1" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.11%)</title><rect x="148.1" y="163.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="151.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (12 samples, 1.31%)</title><rect x="149.4" y="179.0" width="15.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="152.4" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (12 samples, 1.31%)</title><rect x="149.4" y="163.0" width="15.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="152.4" y="174.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.22%)</title><rect x="150.7" y="147.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="153.7" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.11%)</title><rect x="150.7" y="131.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="153.7" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.11%)</title><rect x="152.0" y="131.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="155.0" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.11%)</title><rect x="152.0" y="115.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="155.0" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.11%)</title><rect x="152.0" y="99.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="155.0" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.11%)</title><rect x="152.0" y="83.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="155.0" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.11%)</title><rect x="153.3" y="147.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="156.3" y="158.0"></text>
</g>
<g>
<title>tcp_ack (5 samples, 0.55%)</title><rect x="154.6" y="147.0" width="6.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="157.6" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (4 samples, 0.44%)</title><rect x="154.6" y="131.0" width="5.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="157.6" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.44%)</title><rect x="154.6" y="115.0" width="5.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="157.6" y="126.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.33%)</title><rect x="154.6" y="99.0" width="3.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="157.6" y="110.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.33%)</title><rect x="154.6" y="83.0" width="3.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="157.6" y="94.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.11%)</title><rect x="157.2" y="67.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="160.2" y="78.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.11%)</title><rect x="157.2" y="51.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="160.2" y="62.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.11%)</title><rect x="157.2" y="35.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="160.2" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.11%)</title><rect x="158.5" y="99.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="161.5" y="110.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.11%)</title><rect x="159.8" y="131.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="162.8" y="142.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.11%)</title><rect x="161.1" y="147.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="164.1" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.11%)</title><rect x="162.3" y="147.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="165.3" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.11%)</title><rect x="162.3" y="131.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="165.3" y="142.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.11%)</title><rect x="162.3" y="115.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="165.3" y="126.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.11%)</title><rect x="162.3" y="99.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="165.3" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.11%)</title><rect x="162.3" y="83.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="165.3" y="94.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.11%)</title><rect x="163.6" y="147.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="166.6" y="158.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.11%)</title><rect x="163.6" y="131.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="166.6" y="142.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.11%)</title><rect x="164.9" y="227.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="167.9" y="238.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.11%)</title><rect x="164.9" y="211.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="167.9" y="222.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.11%)</title><rect x="164.9" y="195.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="167.9" y="206.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.11%)</title><rect x="166.2" y="243.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="169.2" y="254.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack] (1 samples, 0.11%)</title><rect x="167.5" y="259.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="170.5" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (3 samples, 0.33%)</title><rect x="168.8" y="403.0" width="3.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="171.8" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (3 samples, 0.33%)</title><rect x="168.8" y="387.0" width="3.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="171.8" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.11%)</title><rect x="170.1" y="371.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="173.1" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.11%)</title><rect x="170.1" y="355.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="173.1" y="366.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.11%)</title><rect x="170.1" y="339.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="173.1" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.11%)</title><rect x="170.1" y="323.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="173.1" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.11%)</title><rect x="170.1" y="307.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="173.1" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.11%)</title><rect x="171.4" y="371.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="174.4" y="382.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.11%)</title><rect x="171.4" y="355.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="174.4" y="366.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.11%)</title><rect x="172.7" y="467.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="175.7" y="478.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.11%)</title><rect x="174.0" y="515.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="177.0" y="526.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.11%)</title><rect x="174.0" y="499.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="177.0" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.11%)</title><rect x="175.3" y="531.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="178.3" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.11%)</title><rect x="176.5" y="611.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="179.5" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.44%)</title><rect x="177.8" y="627.0" width="5.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="180.8" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.44%)</title><rect x="177.8" y="611.0" width="5.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="180.8" y="622.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.44%)</title><rect x="177.8" y="595.0" width="5.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="180.8" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.44%)</title><rect x="177.8" y="579.0" width="5.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.8" y="590.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.22%)</title><rect x="180.4" y="563.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="183.4" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.11%)</title><rect x="183.0" y="643.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="186.0" y="654.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.11%)</title><rect x="183.0" y="627.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="186.0" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.11%)</title><rect x="183.0" y="611.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="186.0" y="622.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.11%)</title><rect x="183.0" y="595.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="186.0" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.11%)</title><rect x="184.3" y="659.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="187.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.22%)</title><rect x="185.6" y="803.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (712 samples, 77.90%)</title><rect x="188.2" y="819.0" width="919.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.2" y="830.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (712 samples, 77.90%)</title><rect x="188.2" y="803.0" width="919.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.2" y="814.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (712 samples, 77.90%)</title><rect x="188.2" y="787.0" width="919.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.2" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.22%)</title><rect x="189.5" y="771.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.5" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (572 samples, 62.58%)</title><rect x="192.0" y="771.0" width="738.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="195.0" y="782.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__libc_free (1 samples, 0.11%)</title><rect x="192.0" y="755.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="195.0" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="193.3" y="755.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="196.3" y="766.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.11%)</title><rect x="194.6" y="755.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="197.6" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.11%)</title><rect x="195.9" y="755.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="198.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.11%)</title><rect x="197.2" y="755.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="200.2" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (567 samples, 62.04%)</title><rect x="198.5" y="755.0" width="732.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="201.5" y="766.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*,..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="198.5" y="739.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="201.5" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.11%)</title><rect x="199.8" y="739.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="202.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (565 samples, 61.82%)</title><rect x="201.1" y="739.0" width="729.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="204.1" y="750.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (564 samples, 61.71%)</title><rect x="202.4" y="723.0" width="728.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="205.4" y="734.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (563 samples, 61.60%)</title><rect x="202.4" y="707.0" width="726.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="205.4" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (556 samples, 60.83%)</title><rect x="202.4" y="691.0" width="717.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="205.4" y="702.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (1 samples, 0.11%)</title><rect x="202.4" y="675.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="205.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (553 samples, 60.50%)</title><rect x="203.7" y="675.0" width="713.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="206.7" y="686.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallba..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 0.44%)</title><rect x="206.2" y="659.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="209.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.11%)</title><rect x="206.2" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="209.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (3 samples, 0.33%)</title><rect x="207.5" y="643.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (3 samples, 0.33%)</title><rect x="207.5" y="627.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.5" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="207.5" y="611.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="210.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.11%)</title><rect x="208.8" y="611.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="211.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.11%)</title><rect x="208.8" y="595.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="211.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="208.8" y="579.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="211.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.11%)</title><rect x="210.1" y="611.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="213.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="210.1" y="595.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="213.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.77%)</title><rect x="211.4" y="659.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="214.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 0.77%)</title><rect x="211.4" y="643.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="214.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.77%)</title><rect x="211.4" y="627.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="214.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.77%)</title><rect x="211.4" y="611.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="214.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 0.77%)</title><rect x="211.4" y="595.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="214.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.66%)</title><rect x="212.7" y="579.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="215.7" y="590.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (5 samples, 0.55%)</title><rect x="214.0" y="563.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.0" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (4 samples, 0.44%)</title><rect x="215.3" y="547.0" width="5.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="218.3" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (3 samples, 0.33%)</title><rect x="215.3" y="531.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="218.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.33%)</title><rect x="215.3" y="515.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="218.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.33%)</title><rect x="215.3" y="499.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="218.3" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="215.3" y="483.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="218.3" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="215.3" y="467.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="218.3" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="215.3" y="451.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="218.3" y="462.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="215.3" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="218.3" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="216.6" y="483.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="219.6" y="494.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="217.9" y="483.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="220.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="219.1" y="531.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="219.1" y="515.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="222.1" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="219.1" y="499.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="222.1" y="510.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.11%)</title><rect x="219.1" y="483.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="222.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (434 samples, 47.48%)</title><rect x="220.4" y="659.0" width="560.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="223.4" y="670.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigne..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (432 samples, 47.26%)</title><rect x="221.7" y="643.0" width="557.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="224.7" y="654.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (431 samples, 47.16%)</title><rect x="223.0" y="627.0" width="556.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="226.0" y="638.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (429 samples, 46.94%)</title><rect x="224.3" y="611.0" width="553.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="227.3" y="622.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb..</text>
</g>
<g>
<title>__malloc (1 samples, 0.11%)</title><rect x="224.3" y="595.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="227.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.11%)</title><rect x="225.6" y="595.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="228.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (427 samples, 46.72%)</title><rect x="226.9" y="595.0" width="551.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.9" y="606.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, ro..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.11%)</title><rect x="230.8" y="579.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="233.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.11%)</title><rect x="232.1" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="235.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (422 samples, 46.17%)</title><rect x="233.3" y="579.0" width="544.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="236.3" y="590.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice co..</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="237.2" y="563.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="240.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.11%)</title><rect x="237.2" y="547.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="240.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (418 samples, 45.73%)</title><rect x="238.5" y="563.0" width="539.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="241.5" y="574.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (415 samples, 45.40%)</title><rect x="238.5" y="547.0" width="535.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="241.5" y="558.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::..</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (398 samples, 43.54%)</title><rect x="241.1" y="531.0" width="513.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="244.1" y="542.0">/tmp/librocksdbjni6799845474915841813.so</text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (387 samples, 42.34%)</title><rect x="254.0" y="515.0" width="499.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="257.0" y="526.0">/tmp/librocksdbjni6799845474915841813.so</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="255.3" y="499.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="258.3" y="510.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="256.6" y="499.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="259.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (384 samples, 42.01%)</title><rect x="257.9" y="499.0" width="495.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="260.9" y="510.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::S..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="259.2" y="483.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="262.2" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.22%)</title><rect x="260.5" y="483.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="263.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (372 samples, 40.70%)</title><rect x="263.0" y="483.0" width="480.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="266.0" y="494.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;,..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (26 samples, 2.84%)</title><rect x="268.2" y="467.0" width="33.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="271.2" y="478.0">JN..</text>
</g>
<g>
<title>jni_CallIntMethodV (26 samples, 2.84%)</title><rect x="268.2" y="451.0" width="33.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="271.2" y="462.0">jn..</text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.11%)</title><rect x="270.8" y="435.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="273.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="272.1" y="435.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="275.1" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (22 samples, 2.41%)</title><rect x="273.4" y="435.0" width="28.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="276.4" y="446.0">jn..</text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.11%)</title><rect x="281.1" y="419.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="284.1" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.33%)</title><rect x="282.4" y="419.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="285.4" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.66%)</title><rect x="286.3" y="419.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.3" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.11%)</title><rect x="288.9" y="403.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="291.9" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.33%)</title><rect x="290.2" y="403.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="293.2" y="414.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.22%)</title><rect x="294.0" y="419.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.0" y="430.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.33%)</title><rect x="296.6" y="419.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="299.6" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="300.5" y="419.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.5" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (70 samples, 7.66%)</title><rect x="301.8" y="467.0" width="90.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.8" y="478.0">JNIEnv_::C..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.22%)</title><rect x="301.8" y="451.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.8" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (68 samples, 7.44%)</title><rect x="304.4" y="451.0" width="87.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="307.4" y="462.0">jni_CallVo..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.22%)</title><rect x="308.2" y="435.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="311.2" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="310.8" y="435.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="313.8" y="446.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.11%)</title><rect x="312.1" y="435.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="315.1" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (6 samples, 0.66%)</title><rect x="313.4" y="435.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="316.4" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.44%)</title><rect x="321.1" y="435.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.33%)</title><rect x="326.3" y="435.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="329.3" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (45 samples, 4.92%)</title><rect x="330.2" y="435.0" width="58.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="333.2" y="446.0">jni_in..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="340.5" y="419.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="343.5" y="430.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.33%)</title><rect x="341.8" y="419.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="344.8" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (11 samples, 1.20%)</title><rect x="345.7" y="419.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="348.7" y="430.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.33%)</title><rect x="359.9" y="419.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.9" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples, 1.64%)</title><rect x="363.7" y="419.0" width="19.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="366.7" y="430.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="366.3" y="403.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="369.3" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.88%)</title><rect x="367.6" y="403.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="370.6" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.44%)</title><rect x="372.8" y="387.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="375.8" y="398.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.11%)</title><rect x="377.9" y="403.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.9" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="379.2" y="403.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="382.2" y="414.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.22%)</title><rect x="380.5" y="403.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.5" y="414.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="381.8" y="387.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.8" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.44%)</title><rect x="383.1" y="419.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="386.1" y="430.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.11%)</title><rect x="388.3" y="435.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="391.3" y="446.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="389.6" y="435.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="392.6" y="446.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="390.9" y="435.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="393.9" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (75 samples, 8.21%)</title><rect x="392.1" y="467.0" width="96.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="395.1" y="478.0">__lll_lock_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (61 samples, 6.67%)</title><rect x="410.2" y="451.0" width="78.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="413.2" y="462.0">entry_SYS..</text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.33%)</title><rect x="410.2" y="435.0" width="3.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="413.2" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (58 samples, 6.35%)</title><rect x="414.1" y="435.0" width="74.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="417.1" y="446.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_futex (40 samples, 4.38%)</title><rect x="419.3" y="419.0" width="51.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="422.3" y="430.0">__x64..</text>
</g>
<g>
<title>do_futex (36 samples, 3.94%)</title><rect x="424.4" y="403.0" width="46.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="427.4" y="414.0">do_f..</text>
</g>
<g>
<title>futex_wait (35 samples, 3.83%)</title><rect x="425.7" y="387.0" width="45.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="428.7" y="398.0">fute..</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.11%)</title><rect x="433.5" y="371.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="436.5" y="382.0"></text>
</g>
<g>
<title>futex_wait_queue_me (9 samples, 0.98%)</title><rect x="434.7" y="371.0" width="11.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="437.7" y="382.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.88%)</title><rect x="436.0" y="355.0" width="10.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="439.0" y="366.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.55%)</title><rect x="439.9" y="339.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="442.9" y="350.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.33%)</title><rect x="442.5" y="323.0" width="3.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="445.5" y="334.0"></text>
</g>
<g>
<title>futex_wait_setup (18 samples, 1.97%)</title><rect x="446.4" y="371.0" width="23.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="449.4" y="382.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.33%)</title><rect x="452.8" y="355.0" width="3.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="455.8" y="366.0"></text>
</g>
<g>
<title>get_futex_key (6 samples, 0.66%)</title><rect x="456.7" y="355.0" width="7.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="459.7" y="366.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (6 samples, 0.66%)</title><rect x="456.7" y="339.0" width="7.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="459.7" y="350.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.11%)</title><rect x="464.4" y="355.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="467.4" y="366.0"></text>
</g>
<g>
<title>get_futex_value_locked (3 samples, 0.33%)</title><rect x="465.7" y="355.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="468.7" y="366.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.11%)</title><rect x="469.6" y="371.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="472.6" y="382.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (11 samples, 1.20%)</title><rect x="470.9" y="419.0" width="14.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="473.9" y="430.0"></text>
</g>
<g>
<title>__audit_syscall_exit (9 samples, 0.98%)</title><rect x="472.2" y="403.0" width="11.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="475.2" y="414.0"></text>
</g>
<g>
<title>dput (1 samples, 0.11%)</title><rect x="479.9" y="387.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="482.9" y="398.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.22%)</title><rect x="481.2" y="387.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="484.2" y="398.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.11%)</title><rect x="483.8" y="403.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="486.8" y="414.0"></text>
</g>
<g>
<title>syscall_trace_enter (3 samples, 0.33%)</title><rect x="485.1" y="419.0" width="3.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="488.1" y="430.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.11%)</title><rect x="485.1" y="403.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="488.1" y="414.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (2 samples, 0.22%)</title><rect x="486.4" y="403.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="489.4" y="414.0"></text>
</g>
<g>
<title>__lll_unlock_wake (161 samples, 17.61%)</title><rect x="489.0" y="467.0" width="207.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="492.0" y="478.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (154 samples, 16.85%)</title><rect x="498.0" y="451.0" width="198.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="501.0" y="462.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.11%)</title><rect x="498.0" y="435.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="501.0" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (153 samples, 16.74%)</title><rect x="499.3" y="435.0" width="197.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="502.3" y="446.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (142 samples, 15.54%)</title><rect x="512.2" y="419.0" width="183.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="515.2" y="430.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (141 samples, 15.43%)</title><rect x="513.5" y="403.0" width="182.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="516.5" y="414.0">do_futex</text>
</g>
<g>
<title>futex_wake (139 samples, 15.21%)</title><rect x="516.1" y="387.0" width="179.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="519.1" y="398.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.33%)</title><rect x="529.0" y="371.0" width="3.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="532.0" y="382.0"></text>
</g>
<g>
<title>get_futex_key (6 samples, 0.66%)</title><rect x="532.9" y="371.0" width="7.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="535.9" y="382.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (4 samples, 0.44%)</title><rect x="535.4" y="355.0" width="5.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="538.4" y="366.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.11%)</title><rect x="540.6" y="371.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="543.6" y="382.0"></text>
</g>
<g>
<title>mark_wake_futex (10 samples, 1.09%)</title><rect x="541.9" y="371.0" width="12.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="544.9" y="382.0"></text>
</g>
<g>
<title>__unqueue_futex (3 samples, 0.33%)</title><rect x="549.6" y="355.0" width="3.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="552.6" y="366.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.11%)</title><rect x="553.5" y="355.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="556.5" y="366.0"></text>
</g>
<g>
<title>wake_up_q (109 samples, 11.93%)</title><rect x="554.8" y="371.0" width="140.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="557.8" y="382.0">wake_up_q</text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.11%)</title><rect x="557.4" y="355.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="560.4" y="366.0"></text>
</g>
<g>
<title>try_to_wake_up (106 samples, 11.60%)</title><rect x="558.7" y="355.0" width="136.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="561.7" y="366.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (106 samples, 11.60%)</title><rect x="558.7" y="339.0" width="136.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="561.7" y="350.0">__lock_text_start</text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="695.5" y="419.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="698.5" y="430.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="695.5" y="403.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="698.5" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (14 samples, 1.53%)</title><rect x="696.8" y="467.0" width="18.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="699.8" y="478.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.11%)</title><rect x="696.8" y="451.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.8" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.66%)</title><rect x="698.1" y="451.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="701.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (7 samples, 0.77%)</title><rect x="705.9" y="451.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="708.9" y="462.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="714.9" y="467.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="717.9" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.09%)</title><rect x="716.2" y="467.0" width="12.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="719.2" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.98%)</title><rect x="729.1" y="467.0" width="11.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="732.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.22%)</title><rect x="740.7" y="467.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="743.7" y="478.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="742.0" y="451.0" width="1.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="745.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (4 samples, 0.44%)</title><rect x="743.3" y="483.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="746.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.11%)</title><rect x="748.5" y="483.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="751.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.33%)</title><rect x="749.8" y="483.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="752.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="753.6" y="515.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="756.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (14 samples, 1.53%)</title><rect x="754.9" y="531.0" width="18.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="757.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (13 samples, 1.42%)</title><rect x="756.2" y="515.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="759.2" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="758.8" y="499.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.8" y="510.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.11%)</title><rect x="758.8" y="483.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="761.8" y="494.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="758.8" y="467.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="761.8" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.22%)</title><rect x="760.1" y="499.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="763.1" y="510.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.22%)</title><rect x="760.1" y="483.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="763.1" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="760.1" y="467.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="763.1" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="761.4" y="467.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="764.4" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="761.4" y="451.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.4" y="462.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="761.4" y="435.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="764.4" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.22%)</title><rect x="762.7" y="499.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="765.7" y="510.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.22%)</title><rect x="762.7" y="483.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="765.7" y="494.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.22%)</title><rect x="762.7" y="467.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="765.7" y="478.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.22%)</title><rect x="762.7" y="451.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="765.7" y="462.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.22%)</title><rect x="762.7" y="435.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="765.7" y="446.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.22%)</title><rect x="762.7" y="419.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="765.7" y="430.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.11%)</title><rect x="762.7" y="403.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="765.7" y="414.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.11%)</title><rect x="764.0" y="403.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="767.0" y="414.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.11%)</title><rect x="764.0" y="387.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="767.0" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.55%)</title><rect x="765.3" y="499.0" width="6.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="768.3" y="510.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.55%)</title><rect x="765.3" y="483.0" width="6.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="768.3" y="494.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.55%)</title><rect x="765.3" y="467.0" width="6.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="768.3" y="478.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.55%)</title><rect x="765.3" y="451.0" width="6.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="768.3" y="462.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.55%)</title><rect x="765.3" y="435.0" width="6.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="768.3" y="446.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.55%)</title><rect x="765.3" y="419.0" width="6.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="768.3" y="430.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.11%)</title><rect x="766.5" y="403.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="769.5" y="414.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.33%)</title><rect x="767.8" y="403.0" width="3.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="770.8" y="414.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.33%)</title><rect x="767.8" y="387.0" width="3.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="770.8" y="398.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.33%)</title><rect x="767.8" y="371.0" width="3.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="770.8" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="771.7" y="499.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="774.7" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="771.7" y="483.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="774.7" y="494.0"></text>
</g>
<g>
<title>void rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindSpliceForLevel&lt;false&gt;(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, int, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**) (1 samples, 0.11%)</title><rect x="773.0" y="531.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.0" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6799845474915841813.so (1 samples, 0.11%)</title><rect x="773.0" y="515.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="776.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="773.0" y="499.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="773.0" y="483.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.0" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="773.0" y="467.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="776.0" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="773.0" y="451.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="776.0" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="773.0" y="435.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="776.0" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="773.0" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="776.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.33%)</title><rect x="774.3" y="547.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.11%)</title><rect x="778.2" y="611.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.2" y="622.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.11%)</title><rect x="779.5" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="782.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (59 samples, 6.46%)</title><rect x="780.7" y="659.0" width="76.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="783.7" y="670.0">rocksdb:..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.33%)</title><rect x="849.2" y="643.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="852.2" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.33%)</title><rect x="849.2" y="627.0" width="3.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="852.2" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.33%)</title><rect x="849.2" y="611.0" width="3.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="852.2" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.11%)</title><rect x="849.2" y="595.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="852.2" y="606.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.11%)</title><rect x="849.2" y="579.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="852.2" y="590.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.11%)</title><rect x="849.2" y="563.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="852.2" y="574.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="850.5" y="595.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="853.5" y="606.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="850.5" y="579.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="853.5" y="590.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.11%)</title><rect x="850.5" y="563.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="853.5" y="574.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.11%)</title><rect x="851.8" y="595.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="854.8" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.22%)</title><rect x="853.0" y="643.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.0" y="654.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.11%)</title><rect x="855.6" y="643.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="858.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.11%)</title><rect x="856.9" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (42 samples, 4.60%)</title><rect x="858.2" y="659.0" width="54.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.2" y="670.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (25 samples, 2.74%)</title><rect x="858.2" y="643.0" width="32.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.2" y="654.0">ro..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="887.9" y="627.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.9" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.11%)</title><rect x="889.2" y="627.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="892.2" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="889.2" y="611.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="892.2" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.11%)</title><rect x="889.2" y="595.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="892.2" y="606.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="889.2" y="579.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="892.2" y="590.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="889.2" y="563.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="892.2" y="574.0"></text>
</g>
<g>
<title>sched_yield (17 samples, 1.86%)</title><rect x="890.5" y="643.0" width="21.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="893.5" y="654.0">s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 1.42%)</title><rect x="895.6" y="627.0" width="16.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="898.6" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 1.42%)</title><rect x="895.6" y="611.0" width="16.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="898.6" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (10 samples, 1.09%)</title><rect x="898.2" y="595.0" width="12.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="901.2" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (10 samples, 1.09%)</title><rect x="898.2" y="579.0" width="12.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="901.2" y="590.0"></text>
</g>
<g>
<title>schedule (10 samples, 1.09%)</title><rect x="898.2" y="563.0" width="12.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="901.2" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (10 samples, 1.09%)</title><rect x="898.2" y="547.0" width="12.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="901.2" y="558.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="911.1" y="595.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="914.1" y="606.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.11%)</title><rect x="911.1" y="579.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="914.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.11%)</title><rect x="912.4" y="659.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.11%)</title><rect x="913.7" y="659.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.7" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.11%)</title><rect x="913.7" y="643.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="916.7" y="654.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.11%)</title><rect x="915.0" y="659.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="918.0" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="915.0" y="643.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="918.0" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.11%)</title><rect x="915.0" y="627.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="918.0" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="915.0" y="611.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="918.0" y="622.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) (1 samples, 0.11%)</title><rect x="916.3" y="659.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.11%)</title><rect x="917.6" y="675.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.11%)</title><rect x="918.9" y="675.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="920.2" y="691.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="923.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="920.2" y="675.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="923.2" y="686.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.11%)</title><rect x="920.2" y="659.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="921.5" y="691.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.5" y="702.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.11%)</title><rect x="922.8" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.8" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (4 samples, 0.44%)</title><rect x="924.0" y="691.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="929.2" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 2.52%)</title><rect x="930.5" y="771.0" width="29.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="933.5" y="782.0">[u..</text>
</g>
<g>
<title>__GI_write (11 samples, 1.20%)</title><rect x="930.5" y="755.0" width="14.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="933.5" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.20%)</title><rect x="930.5" y="739.0" width="14.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="933.5" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.20%)</title><rect x="930.5" y="723.0" width="14.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="933.5" y="734.0"></text>
</g>
<g>
<title>__x64_sys_write (11 samples, 1.20%)</title><rect x="930.5" y="707.0" width="14.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="933.5" y="718.0"></text>
</g>
<g>
<title>ksys_write (11 samples, 1.20%)</title><rect x="930.5" y="691.0" width="14.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="933.5" y="702.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.11%)</title><rect x="930.5" y="675.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="933.5" y="686.0"></text>
</g>
<g>
<title>vfs_write (10 samples, 1.09%)</title><rect x="931.8" y="675.0" width="12.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="934.8" y="686.0"></text>
</g>
<g>
<title>__vfs_write (10 samples, 1.09%)</title><rect x="931.8" y="659.0" width="12.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="934.8" y="670.0"></text>
</g>
<g>
<title>new_sync_write (10 samples, 1.09%)</title><rect x="931.8" y="643.0" width="12.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="934.8" y="654.0"></text>
</g>
<g>
<title>ext4_file_write_iter (10 samples, 1.09%)</title><rect x="931.8" y="627.0" width="12.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="934.8" y="638.0"></text>
</g>
<g>
<title>__generic_file_write_iter (8 samples, 0.88%)</title><rect x="931.8" y="611.0" width="10.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="934.8" y="622.0"></text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.11%)</title><rect x="931.8" y="595.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="934.8" y="606.0"></text>
</g>
<g>
<title>file_update_time (2 samples, 0.22%)</title><rect x="933.1" y="595.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="936.1" y="606.0"></text>
</g>
<g>
<title>generic_update_time (2 samples, 0.22%)</title><rect x="933.1" y="579.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="936.1" y="590.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.11%)</title><rect x="933.1" y="563.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="936.1" y="574.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.11%)</title><rect x="933.1" y="547.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="936.1" y="558.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.11%)</title><rect x="933.1" y="531.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="936.1" y="542.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.11%)</title><rect x="933.1" y="515.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="936.1" y="526.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.11%)</title><rect x="934.4" y="563.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="937.4" y="574.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 0.55%)</title><rect x="935.7" y="595.0" width="6.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="938.7" y="606.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.11%)</title><rect x="935.7" y="579.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="938.7" y="590.0"></text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.11%)</title><rect x="937.0" y="579.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="940.0" y="590.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.11%)</title><rect x="937.0" y="563.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="940.0" y="574.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.11%)</title><rect x="937.0" y="547.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="940.0" y="558.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.11%)</title><rect x="937.0" y="531.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="940.0" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_end (3 samples, 0.33%)</title><rect x="938.2" y="579.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="941.2" y="590.0"></text>
</g>
<g>
<title>generic_write_end (3 samples, 0.33%)</title><rect x="938.2" y="563.0" width="3.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="941.2" y="574.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.22%)</title><rect x="938.2" y="547.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="941.2" y="558.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.22%)</title><rect x="938.2" y="531.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="941.2" y="542.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.11%)</title><rect x="939.5" y="515.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="942.5" y="526.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.11%)</title><rect x="939.5" y="499.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="942.5" y="510.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.11%)</title><rect x="939.5" y="483.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="942.5" y="494.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.11%)</title><rect x="939.5" y="467.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="942.5" y="478.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.11%)</title><rect x="939.5" y="451.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="942.5" y="462.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.11%)</title><rect x="940.8" y="547.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="943.8" y="558.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.11%)</title><rect x="942.1" y="611.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="945.1" y="622.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.11%)</title><rect x="943.4" y="611.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="946.4" y="622.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.11%)</title><rect x="943.4" y="595.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="946.4" y="606.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.54 (1 samples, 0.11%)</title><rect x="943.4" y="579.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="946.4" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="944.7" y="755.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="947.7" y="766.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (11 samples, 1.20%)</title><rect x="946.0" y="755.0" width="14.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="949.0" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.66%)</title><rect x="952.5" y="739.0" width="7.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="955.5" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.66%)</title><rect x="952.5" y="723.0" width="7.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="955.5" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.55%)</title><rect x="953.7" y="707.0" width="6.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="956.7" y="718.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.55%)</title><rect x="953.7" y="691.0" width="6.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="956.7" y="702.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.33%)</title><rect x="955.0" y="675.0" width="3.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="958.0" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.22%)</title><rect x="956.3" y="659.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="959.3" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.11%)</title><rect x="957.6" y="643.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="960.6" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.11%)</title><rect x="957.6" y="627.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="960.6" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.11%)</title><rect x="957.6" y="611.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="960.6" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.11%)</title><rect x="958.9" y="675.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="961.9" y="686.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.22%)</title><rect x="960.2" y="771.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="963.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (15 samples, 1.64%)</title><rect x="962.8" y="771.0" width="19.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="965.8" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 1.42%)</title><rect x="965.4" y="755.0" width="16.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="968.4" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 1.42%)</title><rect x="965.4" y="739.0" width="16.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="968.4" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 1.31%)</title><rect x="966.7" y="723.0" width="15.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="969.7" y="734.0"></text>
</g>
<g>
<title>do_futex (12 samples, 1.31%)</title><rect x="966.7" y="707.0" width="15.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="969.7" y="718.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 1.31%)</title><rect x="966.7" y="691.0" width="15.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="969.7" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.11%)</title><rect x="966.7" y="675.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="969.7" y="686.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 1.20%)</title><rect x="967.9" y="675.0" width="14.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="970.9" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (11 samples, 1.20%)</title><rect x="967.9" y="659.0" width="14.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="970.9" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 1.20%)</title><rect x="967.9" y="643.0" width="14.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="970.9" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (17 samples, 1.86%)</title><rect x="982.1" y="771.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="985.1" y="782.0">o..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.11%)</title><rect x="1004.1" y="771.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (79 samples, 8.64%)</title><rect x="1005.4" y="771.0" width="102.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1008.4" y="782.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (79 samples, 8.64%)</title><rect x="1005.4" y="755.0" width="102.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1008.4" y="766.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (78 samples, 8.53%)</title><rect x="1006.7" y="739.0" width="100.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.7" y="750.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (8 samples, 0.88%)</title><rect x="1006.7" y="723.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.7" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (70 samples, 7.66%)</title><rect x="1017.0" y="723.0" width="90.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1020.0" y="734.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (69 samples, 7.55%)</title><rect x="1018.3" y="707.0" width="89.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1021.3" y="718.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (59 samples, 6.46%)</title><rect x="1027.3" y="691.0" width="76.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1030.3" y="702.0">Java_org..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.11%)</title><rect x="1028.6" y="675.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.6" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.22%)</title><rect x="1029.9" y="675.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.22%)</title><rect x="1032.5" y="675.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.5" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="1035.1" y="675.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.1" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="1036.4" y="675.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1039.4" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.66%)</title><rect x="1037.7" y="675.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1040.7" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.44%)</title><rect x="1038.9" y="659.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1041.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="1044.1" y="659.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.1" y="670.0"></text>
</g>
<g>
<title>jni_NewByteArray (27 samples, 2.95%)</title><rect x="1045.4" y="675.0" width="34.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1048.4" y="686.0">jn..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="1048.0" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.0" y="670.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.22%)</title><rect x="1049.3" y="659.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.3" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.22%)</title><rect x="1051.9" y="659.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.66%)</title><rect x="1054.4" y="659.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.4" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 1.53%)</title><rect x="1062.2" y="659.0" width="18.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 1.53%)</title><rect x="1062.2" y="643.0" width="18.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.2" y="654.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.11%)</title><rect x="1063.5" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.5" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.77%)</title><rect x="1064.8" y="627.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.8" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.22%)</title><rect x="1069.9" y="611.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.9" y="622.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.11%)</title><rect x="1072.5" y="611.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1075.5" y="622.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.11%)</title><rect x="1073.8" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.44%)</title><rect x="1075.1" y="627.0" width="5.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1078.1" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 1.97%)</title><rect x="1080.3" y="675.0" width="23.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1083.3" y="686.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.22%)</title><rect x="1085.4" y="659.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.4" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.11%)</title><rect x="1088.0" y="659.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.0" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.33%)</title><rect x="1089.3" y="659.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.66%)</title><rect x="1093.2" y="659.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.2" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.22%)</title><rect x="1100.9" y="659.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1103.9" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.11%)</title><rect x="1102.2" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.2" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1103.5" y="691.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1106.5" y="702.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.22%)</title><rect x="1104.8" y="691.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1107.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (2 samples, 0.22%)</title><rect x="1107.4" y="819.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.22%)</title><rect x="1107.4" y="803.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1110.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.22%)</title><rect x="1107.4" y="787.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1110.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="1107.4" y="771.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="1107.4" y="755.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.4" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="1107.4" y="739.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.22%)</title><rect x="1107.4" y="723.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.22%)</title><rect x="1107.4" y="707.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1110.4" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="1107.4" y="691.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1110.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.getResponseWithNoBody (1 samples, 0.11%)</title><rect x="1110.0" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1113.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.11%)</title><rect x="1110.0" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1113.0" y="814.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (50 samples, 5.47%)</title><rect x="1111.2" y="915.0" width="64.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1114.2" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (14 samples, 1.53%)</title><rect x="1113.8" y="899.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.8" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (13 samples, 1.42%)</title><rect x="1115.1" y="883.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 1.42%)</title><rect x="1115.1" y="867.0" width="16.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1118.1" y="878.0"></text>
</g>
<g>
<title>epoll_wait (13 samples, 1.42%)</title><rect x="1115.1" y="851.0" width="16.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1118.1" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.09%)</title><rect x="1119.0" y="835.0" width="12.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1122.0" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 1.09%)</title><rect x="1119.0" y="819.0" width="12.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1122.0" y="830.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (8 samples, 0.88%)</title><rect x="1120.3" y="803.0" width="10.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1123.3" y="814.0"></text>
</g>
<g>
<title>do_epoll_wait (8 samples, 0.88%)</title><rect x="1120.3" y="787.0" width="10.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1123.3" y="798.0"></text>
</g>
<g>
<title>ep_poll (8 samples, 0.88%)</title><rect x="1120.3" y="771.0" width="10.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1123.3" y="782.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (4 samples, 0.44%)</title><rect x="1122.9" y="755.0" width="5.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1125.9" y="766.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.11%)</title><rect x="1124.2" y="739.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1127.2" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.22%)</title><rect x="1125.4" y="739.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1128.4" y="750.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.11%)</title><rect x="1125.4" y="723.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1128.4" y="734.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.11%)</title><rect x="1125.4" y="707.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1128.4" y="718.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.11%)</title><rect x="1125.4" y="691.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1128.4" y="702.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.11%)</title><rect x="1126.7" y="723.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1129.7" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.22%)</title><rect x="1128.0" y="755.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1131.0" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.22%)</title><rect x="1128.0" y="739.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1131.0" y="750.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.11%)</title><rect x="1129.3" y="723.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1132.3" y="734.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.11%)</title><rect x="1129.3" y="707.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1132.3" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.11%)</title><rect x="1129.3" y="691.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1132.3" y="702.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="1130.6" y="803.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1133.6" y="814.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="1130.6" y="787.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1133.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (34 samples, 3.72%)</title><rect x="1131.9" y="899.0" width="43.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.9" y="910.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34 samples, 3.72%)</title><rect x="1131.9" y="883.0" width="43.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1134.9" y="894.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (22 samples, 2.41%)</title><rect x="1133.2" y="867.0" width="28.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1136.2" y="878.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (14 samples, 1.53%)</title><rect x="1134.5" y="851.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1137.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (14 samples, 1.53%)</title><rect x="1134.5" y="835.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1137.5" y="846.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (10 samples, 1.09%)</title><rect x="1134.5" y="819.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1137.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.22%)</title><rect x="1134.5" y="803.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1137.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="1134.5" y="787.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="1134.5" y="771.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1137.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="1135.8" y="787.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (1 samples, 0.11%)</title><rect x="1135.8" y="771.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1138.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (8 samples, 0.88%)</title><rect x="1137.1" y="803.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1140.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.55%)</title><rect x="1139.6" y="787.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 0.55%)</title><rect x="1139.6" y="771.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1142.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.44%)</title><rect x="1139.6" y="755.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1142.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.44%)</title><rect x="1139.6" y="739.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1142.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.44%)</title><rect x="1139.6" y="723.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.44%)</title><rect x="1139.6" y="707.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1142.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.44%)</title><rect x="1139.6" y="691.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1142.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.44%)</title><rect x="1139.6" y="675.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1142.6" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.11%)</title><rect x="1139.6" y="659.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1142.6" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="1139.6" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.33%)</title><rect x="1140.9" y="659.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1143.9" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.33%)</title><rect x="1140.9" y="643.0" width="3.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1143.9" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.33%)</title><rect x="1140.9" y="627.0" width="3.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1143.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.22%)</title><rect x="1142.2" y="611.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1145.2" y="622.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.22%)</title><rect x="1142.2" y="595.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1145.2" y="606.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.22%)</title><rect x="1142.2" y="579.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1145.2" y="590.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.22%)</title><rect x="1142.2" y="563.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1145.2" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.22%)</title><rect x="1142.2" y="547.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1145.2" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.22%)</title><rect x="1142.2" y="531.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1145.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="1144.8" y="755.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1147.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="1144.8" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1147.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="1144.8" y="723.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1147.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="1144.8" y="707.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.11%)</title><rect x="1146.1" y="787.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1149.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.11%)</title><rect x="1147.4" y="819.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.22%)</title><rect x="1148.7" y="819.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1151.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.22%)</title><rect x="1148.7" y="803.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1151.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="1148.7" y="787.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="1150.0" y="787.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1153.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="1150.0" y="771.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1153.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="1150.0" y="755.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.11%)</title><rect x="1151.3" y="819.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1154.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="1151.3" y="803.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1154.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.11%)</title><rect x="1151.3" y="787.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.3" y="798.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.11%)</title><rect x="1151.3" y="771.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1154.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.33%)</title><rect x="1152.6" y="851.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1155.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1152.6" y="835.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="1152.6" y="819.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1155.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="1152.6" y="803.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1155.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="1152.6" y="787.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1155.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.22%)</title><rect x="1153.9" y="835.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.11%)</title><rect x="1156.4" y="851.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1159.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.11%)</title><rect x="1156.4" y="835.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1159.4" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="1156.4" y="819.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1159.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.33%)</title><rect x="1157.7" y="851.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1160.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.11%)</title><rect x="1160.3" y="835.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1163.3" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 1.20%)</title><rect x="1161.6" y="867.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1164.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (10 samples, 1.09%)</title><rect x="1162.9" y="851.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1165.9" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.11%)</title><rect x="1162.9" y="835.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1165.9" y="846.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="1162.9" y="819.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1165.9" y="830.0"></text>
</g>
<g>
<title>__GI___recv (8 samples, 0.88%)</title><rect x="1164.2" y="835.0" width="10.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1167.2" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.88%)</title><rect x="1164.2" y="819.0" width="10.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.2" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 0.88%)</title><rect x="1164.2" y="803.0" width="10.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1167.2" y="814.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 0.66%)</title><rect x="1164.2" y="787.0" width="7.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1167.2" y="798.0"></text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 0.66%)</title><rect x="1164.2" y="771.0" width="7.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1167.2" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.66%)</title><rect x="1164.2" y="755.0" width="7.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1167.2" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (4 samples, 0.44%)</title><rect x="1164.2" y="739.0" width="5.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 0.44%)</title><rect x="1164.2" y="723.0" width="5.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.11%)</title><rect x="1165.5" y="707.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1168.5" y="718.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.11%)</title><rect x="1165.5" y="691.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1168.5" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.11%)</title><rect x="1165.5" y="675.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1168.5" y="686.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.11%)</title><rect x="1165.5" y="659.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.11%)</title><rect x="1166.8" y="707.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.11%)</title><rect x="1166.8" y="691.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.11%)</title><rect x="1166.8" y="675.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.11%)</title><rect x="1166.8" y="659.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.11%)</title><rect x="1168.1" y="707.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1171.1" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.11%)</title><rect x="1168.1" y="691.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1171.1" y="702.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.11%)</title><rect x="1168.1" y="675.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1171.1" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.22%)</title><rect x="1169.3" y="739.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1172.3" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.22%)</title><rect x="1169.3" y="723.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.22%)</title><rect x="1169.3" y="707.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.22%)</title><rect x="1169.3" y="691.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.22%)</title><rect x="1169.3" y="675.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.22%)</title><rect x="1169.3" y="659.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.11%)</title><rect x="1171.9" y="787.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1174.9" y="798.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="1171.9" y="771.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1174.9" y="782.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.11%)</title><rect x="1171.9" y="755.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1174.9" y="766.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.11%)</title><rect x="1173.2" y="787.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1176.2" y="798.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.11%)</title><rect x="1173.2" y="771.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.11%)</title><rect x="1173.2" y="755.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1176.2" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.11%)</title><rect x="1174.5" y="835.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>start_thread (11 samples, 1.20%)</title><rect x="1175.8" y="915.0" width="14.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 1.20%)</title><rect x="1175.8" y="899.0" width="14.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (11 samples, 1.20%)</title><rect x="1175.8" y="883.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.88%)</title><rect x="1175.8" y="867.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.88%)</title><rect x="1175.8" y="851.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.77%)</title><rect x="1175.8" y="835.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.77%)</title><rect x="1175.8" y="819.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (7 samples, 0.77%)</title><rect x="1175.8" y="803.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (7 samples, 0.77%)</title><rect x="1175.8" y="787.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.77%)</title><rect x="1175.8" y="771.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.22%)</title><rect x="1175.8" y="755.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.22%)</title><rect x="1175.8" y="739.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.11%)</title><rect x="1177.1" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (5 samples, 0.55%)</title><rect x="1178.4" y="755.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.55%)</title><rect x="1178.4" y="739.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWord**, unsigned long*, HeapWord*, HeapWord*) (2 samples, 0.22%)</title><rect x="1178.4" y="723.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.33%)</title><rect x="1181.0" y="723.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1182.3" y="707.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.11%)</title><rect x="1183.5" y="707.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.11%)</title><rect x="1184.8" y="835.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.11%)</title><rect x="1184.8" y="819.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.11%)</title><rect x="1184.8" y="803.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.11%)</title><rect x="1184.8" y="787.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.11%)</title><rect x="1184.8" y="771.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.11%)</title><rect x="1184.8" y="755.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.11%)</title><rect x="1184.8" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceMirrorKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.11%)</title><rect x="1184.8" y="723.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.33%)</title><rect x="1186.1" y="867.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.33%)</title><rect x="1186.1" y="851.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="862.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.33%)</title><rect x="1186.1" y="835.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.1" y="846.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.33%)</title><rect x="1186.1" y="819.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="830.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.33%)</title><rect x="1186.1" y="803.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.22%)</title><rect x="1186.1" y="787.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="798.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.11%)</title><rect x="1186.1" y="771.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="1186.1" y="755.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.11%)</title><rect x="1186.1" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.11%)</title><rect x="1186.1" y="723.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.11%)</title><rect x="1186.1" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.11%)</title><rect x="1187.4" y="771.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.11%)</title><rect x="1187.4" y="755.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.4" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1187.4" y="739.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.4" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1187.4" y="723.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.11%)</title><rect x="1188.7" y="787.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.11%)</title><rect x="1188.7" y="771.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="755.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1188.7" y="739.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
</g>
</svg>
