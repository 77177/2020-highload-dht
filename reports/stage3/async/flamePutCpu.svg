<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (271 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.37%)</title><rect x="10.0" y="1059.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.37%)</title><rect x="10.0" y="1043.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.37%)</title><rect x="14.4" y="1059.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.4" y="1070.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.37%)</title><rect x="14.4" y="1043.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="17.4" y="1054.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.37%)</title><rect x="14.4" y="1027.0" width="4.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="17.4" y="1038.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.37%)</title><rect x="14.4" y="1011.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="17.4" y="1022.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.37%)</title><rect x="14.4" y="995.0" width="4.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="17.4" y="1006.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.37%)</title><rect x="14.4" y="979.0" width="4.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="17.4" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (170 samples, 62.73%)</title><rect x="18.7" y="1059.0" width="740.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.7" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (170 samples, 62.73%)</title><rect x="18.7" y="1043.0" width="740.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.7" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (169 samples, 62.36%)</title><rect x="18.7" y="1027.0" width="735.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.7" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.37%)</title><rect x="23.1" y="1011.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 8.86%)</title><rect x="27.4" y="1011.0" width="104.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="1022.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (24 samples, 8.86%)</title><rect x="27.4" y="995.0" width="104.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="1006.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 6.27%)</title><rect x="27.4" y="979.0" width="74.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.37%)</title><rect x="31.8" y="963.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.37%)</title><rect x="31.8" y="947.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.37%)</title><rect x="31.8" y="931.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 1.11%)</title><rect x="36.1" y="963.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.37%)</title><rect x="44.8" y="947.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.37%)</title><rect x="44.8" y="931.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.37%)</title><rect x="44.8" y="915.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.8" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.37%)</title><rect x="44.8" y="899.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.8" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.37%)</title><rect x="44.8" y="883.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.74%)</title><rect x="49.2" y="963.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.74%)</title><rect x="49.2" y="947.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.37%)</title><rect x="53.5" y="931.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 3.69%)</title><rect x="57.9" y="963.0" width="43.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.9" y="974.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 3.69%)</title><rect x="57.9" y="947.0" width="43.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.9" y="958.0">jdk/..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.37%)</title><rect x="57.9" y="931.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.9" y="942.0"></text>
</g>
<g>
<title>Unsafe_Park (6 samples, 2.21%)</title><rect x="62.3" y="931.0" width="26.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="65.3" y="942.0">U..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.37%)</title><rect x="62.3" y="915.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="65.3" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.74%)</title><rect x="66.6" y="915.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="69.6" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.74%)</title><rect x="75.3" y="915.0" width="8.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="78.3" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.37%)</title><rect x="79.7" y="899.0" width="4.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="82.7" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.37%)</title><rect x="79.7" y="883.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="82.7" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.37%)</title><rect x="79.7" y="867.0" width="4.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="82.7" y="878.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.37%)</title><rect x="79.7" y="851.0" width="4.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="82.7" y="862.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.37%)</title><rect x="79.7" y="835.0" width="4.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="82.7" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.37%)</title><rect x="84.0" y="915.0" width="4.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="87.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 1.11%)</title><rect x="88.4" y="931.0" width="13.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="91.4" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.37%)</title><rect x="88.4" y="915.0" width="4.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="91.4" y="926.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.74%)</title><rect x="92.7" y="915.0" width="8.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="95.7" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.37%)</title><rect x="97.1" y="899.0" width="4.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="100.1" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.37%)</title><rect x="97.1" y="883.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="100.1" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.37%)</title><rect x="97.1" y="867.0" width="4.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="100.1" y="878.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.37%)</title><rect x="97.1" y="851.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="100.1" y="862.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.37%)</title><rect x="97.1" y="835.0" width="4.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="100.1" y="846.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.37%)</title><rect x="97.1" y="819.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="100.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.37%)</title><rect x="101.4" y="979.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.37%)</title><rect x="101.4" y="963.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.74%)</title><rect x="105.8" y="979.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.74%)</title><rect x="105.8" y="963.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.37%)</title><rect x="105.8" y="947.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.37%)</title><rect x="110.1" y="947.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.37%)</title><rect x="110.1" y="931.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.37%)</title><rect x="110.1" y="915.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.1" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.37%)</title><rect x="110.1" y="899.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.1" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.37%)</title><rect x="110.1" y="883.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.37%)</title><rect x="110.1" y="867.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.48%)</title><rect x="114.5" y="979.0" width="17.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.11%)</title><rect x="118.9" y="963.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.11%)</title><rect x="118.9" y="947.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.11%)</title><rect x="118.9" y="931.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.9" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 1.11%)</title><rect x="118.9" y="915.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.9" y="926.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.37%)</title><rect x="118.9" y="899.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="121.9" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.37%)</title><rect x="118.9" y="883.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="121.9" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.74%)</title><rect x="123.2" y="899.0" width="8.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="126.2" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.37%)</title><rect x="127.6" y="883.0" width="4.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="130.6" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.37%)</title><rect x="127.6" y="867.0" width="4.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="130.6" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.37%)</title><rect x="127.6" y="851.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="130.6" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.37%)</title><rect x="127.6" y="835.0" width="4.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="130.6" y="846.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.37%)</title><rect x="127.6" y="819.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="130.6" y="830.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.37%)</title><rect x="127.6" y="803.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="130.6" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.37%)</title><rect x="127.6" y="787.0" width="4.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="130.6" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.37%)</title><rect x="127.6" y="771.0" width="4.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="130.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.37%)</title><rect x="131.9" y="1011.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/1779536030.run (142 samples, 52.40%)</title><rect x="136.3" y="1011.0" width="618.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.3" y="1022.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/1779536030.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (142 samples, 52.40%)</title><rect x="136.3" y="995.0" width="618.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.3" y="1006.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.putInternal (141 samples, 52.03%)</title><rect x="140.6" y="979.0" width="614.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.6" y="990.0">ru/mail/polis/service/stasyanoi/CustomServer.putInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27 samples, 9.96%)</title><rect x="145.0" y="963.0" width="117.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.0" y="974.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (26 samples, 9.59%)</title><rect x="149.3" y="947.0" width="113.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.3" y="958.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 9.59%)</title><rect x="149.3" y="931.0" width="113.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.3" y="942.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 9.59%)</title><rect x="149.3" y="915.0" width="113.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.3" y="926.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 9.59%)</title><rect x="149.3" y="899.0" width="113.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.3" y="910.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (26 samples, 9.59%)</title><rect x="149.3" y="883.0" width="113.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.3" y="894.0">one/nio/net/Na..</text>
</g>
<g>
<title>__libc_send (26 samples, 9.59%)</title><rect x="149.3" y="867.0" width="113.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="152.3" y="878.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (24 samples, 8.86%)</title><rect x="158.0" y="851.0" width="104.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="161.0" y="862.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (24 samples, 8.86%)</title><rect x="158.0" y="835.0" width="104.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="161.0" y="846.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (24 samples, 8.86%)</title><rect x="158.0" y="819.0" width="104.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="161.0" y="830.0">__x64_sys_se..</text>
</g>
<g>
<title>__sys_sendto (24 samples, 8.86%)</title><rect x="158.0" y="803.0" width="104.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="161.0" y="814.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (23 samples, 8.49%)</title><rect x="158.0" y="787.0" width="100.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="161.0" y="798.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (23 samples, 8.49%)</title><rect x="158.0" y="771.0" width="100.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="161.0" y="782.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (23 samples, 8.49%)</title><rect x="158.0" y="755.0" width="100.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="161.0" y="766.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (23 samples, 8.49%)</title><rect x="158.0" y="739.0" width="100.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="161.0" y="750.0">tcp_sendmsg_..</text>
</g>
<g>
<title>tcp_push (23 samples, 8.49%)</title><rect x="158.0" y="723.0" width="100.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="161.0" y="734.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (23 samples, 8.49%)</title><rect x="158.0" y="707.0" width="100.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="161.0" y="718.0">__tcp_push_p..</text>
</g>
<g>
<title>tcp_write_xmit (23 samples, 8.49%)</title><rect x="158.0" y="691.0" width="100.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="161.0" y="702.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 7.38%)</title><rect x="166.8" y="675.0" width="87.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="169.8" y="686.0">__tcp_tran..</text>
</g>
<g>
<title>ip_queue_xmit (19 samples, 7.01%)</title><rect x="171.1" y="659.0" width="82.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="174.1" y="670.0">ip_queue_..</text>
</g>
<g>
<title>__ip_queue_xmit (19 samples, 7.01%)</title><rect x="171.1" y="643.0" width="82.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="174.1" y="654.0">__ip_queu..</text>
</g>
<g>
<title>ip_local_out (19 samples, 7.01%)</title><rect x="171.1" y="627.0" width="82.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="174.1" y="638.0">ip_local_..</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.74%)</title><rect x="171.1" y="611.0" width="8.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.1" y="622.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.37%)</title><rect x="171.1" y="595.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="174.1" y="606.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.37%)</title><rect x="175.5" y="595.0" width="4.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="178.5" y="606.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.37%)</title><rect x="175.5" y="579.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="178.5" y="590.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.37%)</title><rect x="175.5" y="563.0" width="4.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="178.5" y="574.0"></text>
</g>
<g>
<title>ip_output (17 samples, 6.27%)</title><rect x="179.8" y="611.0" width="74.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="182.8" y="622.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (17 samples, 6.27%)</title><rect x="179.8" y="595.0" width="74.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="182.8" y="606.0">ip_finis..</text>
</g>
<g>
<title>__ip_finish_output (17 samples, 6.27%)</title><rect x="179.8" y="579.0" width="74.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="182.8" y="590.0">__ip_fin..</text>
</g>
<g>
<title>ip_finish_output2 (16 samples, 5.90%)</title><rect x="184.2" y="563.0" width="69.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="187.2" y="574.0">ip_fini..</text>
</g>
<g>
<title>__local_bh_enable_ip (11 samples, 4.06%)</title><rect x="188.5" y="547.0" width="47.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="191.5" y="558.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.20 (11 samples, 4.06%)</title><rect x="188.5" y="531.0" width="47.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="191.5" y="542.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (11 samples, 4.06%)</title><rect x="188.5" y="515.0" width="47.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="191.5" y="526.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 4.06%)</title><rect x="188.5" y="499.0" width="47.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="191.5" y="510.0">__so..</text>
</g>
<g>
<title>net_rx_action (10 samples, 3.69%)</title><rect x="192.9" y="483.0" width="43.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="195.9" y="494.0">net_..</text>
</g>
<g>
<title>process_backlog (10 samples, 3.69%)</title><rect x="192.9" y="467.0" width="43.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="195.9" y="478.0">proc..</text>
</g>
<g>
<title>__netif_receive_skb (9 samples, 3.32%)</title><rect x="197.2" y="451.0" width="39.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="200.2" y="462.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (9 samples, 3.32%)</title><rect x="197.2" y="435.0" width="39.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="200.2" y="446.0">__n..</text>
</g>
<g>
<title>ip_rcv (8 samples, 2.95%)</title><rect x="201.6" y="419.0" width="34.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.6" y="430.0">ip..</text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.37%)</title><rect x="201.6" y="403.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.6" y="414.0"></text>
</g>
<g>
<title>ip_rcv_finish (7 samples, 2.58%)</title><rect x="205.9" y="403.0" width="30.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="208.9" y="414.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (7 samples, 2.58%)</title><rect x="205.9" y="387.0" width="30.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="208.9" y="398.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (7 samples, 2.58%)</title><rect x="205.9" y="371.0" width="30.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="208.9" y="382.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (7 samples, 2.58%)</title><rect x="205.9" y="355.0" width="30.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="208.9" y="366.0">ip..</text>
</g>
<g>
<title>tcp_v4_rcv (6 samples, 2.21%)</title><rect x="210.3" y="339.0" width="26.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="213.3" y="350.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.37%)</title><rect x="214.6" y="323.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="217.6" y="334.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (4 samples, 1.48%)</title><rect x="219.0" y="323.0" width="17.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="222.0" y="334.0"></text>
</g>
<g>
<title>tcp_rcv_established (4 samples, 1.48%)</title><rect x="219.0" y="307.0" width="17.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="222.0" y="318.0"></text>
</g>
<g>
<title>tcp_data_ready (4 samples, 1.48%)</title><rect x="219.0" y="291.0" width="17.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="222.0" y="302.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 1.48%)</title><rect x="219.0" y="275.0" width="17.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="222.0" y="286.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 1.48%)</title><rect x="219.0" y="259.0" width="17.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="222.0" y="270.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 1.48%)</title><rect x="219.0" y="243.0" width="17.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="222.0" y="254.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 1.48%)</title><rect x="219.0" y="227.0" width="17.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="222.0" y="238.0"></text>
</g>
<g>
<title>dev_queue_xmit (4 samples, 1.48%)</title><rect x="236.4" y="547.0" width="17.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="239.4" y="558.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 1.48%)</title><rect x="236.4" y="531.0" width="17.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="239.4" y="542.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (4 samples, 1.48%)</title><rect x="236.4" y="515.0" width="17.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="239.4" y="526.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.74%)</title><rect x="236.4" y="499.0" width="8.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="239.4" y="510.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.37%)</title><rect x="236.4" y="483.0" width="4.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="239.4" y="494.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.37%)</title><rect x="240.8" y="483.0" width="4.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="243.8" y="494.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.37%)</title><rect x="240.8" y="467.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="243.8" y="478.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.37%)</title><rect x="240.8" y="451.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="243.8" y="462.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.74%)</title><rect x="245.1" y="499.0" width="8.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="248.1" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.37%)</title><rect x="253.8" y="675.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="256.8" y="686.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.37%)</title><rect x="253.8" y="659.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="256.8" y="670.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.37%)</title><rect x="253.8" y="643.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="256.8" y="654.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.37%)</title><rect x="253.8" y="627.0" width="4.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="256.8" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.37%)</title><rect x="253.8" y="611.0" width="4.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="256.8" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.37%)</title><rect x="258.2" y="787.0" width="4.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="261.2" y="798.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.37%)</title><rect x="258.2" y="771.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="261.2" y="782.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.37%)</title><rect x="258.2" y="755.0" width="4.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="261.2" y="766.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.37%)</title><rect x="258.2" y="739.0" width="4.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="261.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.37%)</title><rect x="262.5" y="963.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.5" y="974.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.37%)</title><rect x="262.5" y="947.0" width="4.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="265.5" y="958.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.37%)</title><rect x="262.5" y="931.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="265.5" y="942.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.37%)</title><rect x="262.5" y="915.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="265.5" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (109 samples, 40.22%)</title><rect x="266.9" y="963.0" width="474.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.9" y="974.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (109 samples, 40.22%)</title><rect x="266.9" y="947.0" width="474.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.9" y="958.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (109 samples, 40.22%)</title><rect x="266.9" y="931.0" width="474.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.9" y="942.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.37%)</title><rect x="266.9" y="915.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.9" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (82 samples, 30.26%)</title><rect x="271.3" y="915.0" width="357.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="274.3" y="926.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.37%)</title><rect x="271.3" y="899.0" width="4.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="274.3" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (81 samples, 29.89%)</title><rect x="275.6" y="899.0" width="352.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="278.6" y="910.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocks..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (80 samples, 29.52%)</title><rect x="280.0" y="883.0" width="348.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="283.0" y="894.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (80 samples, 29.52%)</title><rect x="280.0" y="867.0" width="348.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.0" y="878.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions cons..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (80 samples, 29.52%)</title><rect x="280.0" y="851.0" width="348.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.0" y="862.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (75 samples, 27.68%)</title><rect x="280.0" y="835.0" width="326.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="283.0" y="846.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.37%)</title><rect x="280.0" y="819.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="283.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (71 samples, 26.20%)</title><rect x="284.3" y="819.0" width="309.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.3" y="830.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteO..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (5 samples, 1.85%)</title><rect x="284.3" y="803.0" width="21.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="287.3" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.37%)</title><rect x="284.3" y="787.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="287.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (3 samples, 1.11%)</title><rect x="288.7" y="787.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="291.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (3 samples, 1.11%)</title><rect x="288.7" y="771.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="291.7" y="782.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (1 samples, 0.37%)</title><rect x="288.7" y="755.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="291.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.37%)</title><rect x="293.0" y="755.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.37%)</title><rect x="293.0" y="739.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="296.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.37%)</title><rect x="297.4" y="755.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="300.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.37%)</title><rect x="297.4" y="739.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="300.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.37%)</title><rect x="301.7" y="787.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="304.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (15 samples, 5.54%)</title><rect x="306.1" y="803.0" width="65.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="309.1" y="814.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (15 samples, 5.54%)</title><rect x="306.1" y="787.0" width="65.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="309.1" y="798.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (15 samples, 5.54%)</title><rect x="306.1" y="771.0" width="65.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="309.1" y="782.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 5.54%)</title><rect x="306.1" y="755.0" width="65.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="309.1" y="766.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (15 samples, 5.54%)</title><rect x="306.1" y="739.0" width="65.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="309.1" y="750.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (14 samples, 5.17%)</title><rect x="310.4" y="723.0" width="61.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="313.4" y="734.0">rocksd..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (13 samples, 4.80%)</title><rect x="310.4" y="707.0" width="56.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="313.4" y="718.0">bool r..</text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (11 samples, 4.06%)</title><rect x="310.4" y="691.0" width="47.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="313.4" y="702.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (8 samples, 2.95%)</title><rect x="310.4" y="675.0" width="34.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="313.4" y="686.0">/t..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 2.95%)</title><rect x="310.4" y="659.0" width="34.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="313.4" y="670.0">ro..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 2.95%)</title><rect x="310.4" y="643.0" width="34.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="313.4" y="654.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.37%)</title><rect x="310.4" y="627.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.4" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.37%)</title><rect x="310.4" y="611.0" width="4.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="313.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="310.4" y="595.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="313.4" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (5 samples, 1.85%)</title><rect x="314.8" y="627.0" width="21.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="317.8" y="638.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (5 samples, 1.85%)</title><rect x="314.8" y="611.0" width="21.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="317.8" y="622.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.37%)</title><rect x="314.8" y="595.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="317.8" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="319.2" y="595.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="322.2" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 1.11%)</title><rect x="323.5" y="595.0" width="13.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="326.5" y="606.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.37%)</title><rect x="323.5" y="579.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.5" y="590.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.37%)</title><rect x="327.9" y="579.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="330.9" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.37%)</title><rect x="332.2" y="579.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="335.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.37%)</title><rect x="336.6" y="627.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="339.6" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.37%)</title><rect x="340.9" y="627.0" width="4.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="343.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="340.9" y="611.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 1.11%)</title><rect x="345.3" y="675.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="348.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 1.11%)</title><rect x="345.3" y="659.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="348.3" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 1.11%)</title><rect x="345.3" y="643.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="348.3" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 1.11%)</title><rect x="345.3" y="627.0" width="13.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="348.3" y="638.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.74%)</title><rect x="349.6" y="611.0" width="8.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="352.6" y="622.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.37%)</title><rect x="349.6" y="595.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="352.6" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.37%)</title><rect x="354.0" y="595.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="357.0" y="606.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.37%)</title><rect x="354.0" y="579.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="357.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.74%)</title><rect x="358.3" y="691.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="361.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.74%)</title><rect x="358.3" y="675.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="361.3" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.74%)</title><rect x="358.3" y="659.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="361.3" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="358.3" y="643.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="361.3" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.37%)</title><rect x="362.7" y="643.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="365.7" y="654.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.37%)</title><rect x="362.7" y="627.0" width="4.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="365.7" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.37%)</title><rect x="362.7" y="611.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="365.7" y="622.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.37%)</title><rect x="362.7" y="595.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() [clone .plt] (1 samples, 0.37%)</title><rect x="367.0" y="707.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="370.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (24 samples, 8.86%)</title><rect x="371.4" y="803.0" width="104.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="374.4" y="814.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.37%)</title><rect x="371.4" y="787.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="374.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.37%)</title><rect x="371.4" y="771.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="374.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (23 samples, 8.49%)</title><rect x="375.8" y="787.0" width="100.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="378.8" y="798.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (23 samples, 8.49%)</title><rect x="375.8" y="771.0" width="100.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="378.8" y="782.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (22 samples, 8.12%)</title><rect x="375.8" y="755.0" width="95.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="378.8" y="766.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (22 samples, 8.12%)</title><rect x="375.8" y="739.0" width="95.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="378.8" y="750.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (22 samples, 8.12%)</title><rect x="375.8" y="723.0" width="95.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="378.8" y="734.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (21 samples, 7.75%)</title><rect x="375.8" y="707.0" width="91.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="378.8" y="718.0">rocksdb::In..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (21 samples, 7.75%)</title><rect x="375.8" y="691.0" width="91.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="378.8" y="702.0">bool rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (19 samples, 7.01%)</title><rect x="375.8" y="675.0" width="82.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="378.8" y="686.0">/tmp/libr..</text>
</g>
<g>
<title>/tmp/librocksdbjni140960535519854539.so (19 samples, 7.01%)</title><rect x="375.8" y="659.0" width="82.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="378.8" y="670.0">/tmp/libr..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.37%)</title><rect x="375.8" y="643.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="378.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 6.64%)</title><rect x="380.1" y="643.0" width="78.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="383.1" y="654.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (17 samples, 6.27%)</title><rect x="384.5" y="627.0" width="74.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="387.5" y="638.0">rocksdb:..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.37%)</title><rect x="384.5" y="611.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.5" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.37%)</title><rect x="384.5" y="595.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="387.5" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.37%)</title><rect x="384.5" y="579.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="387.5" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.37%)</title><rect x="384.5" y="563.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="387.5" y="574.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.37%)</title><rect x="384.5" y="547.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.5" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 1.48%)</title><rect x="388.8" y="611.0" width="17.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="391.8" y="622.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.37%)</title><rect x="388.8" y="595.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="391.8" y="606.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 1.11%)</title><rect x="393.2" y="595.0" width="13.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="396.2" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.74%)</title><rect x="393.2" y="579.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="396.2" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.37%)</title><rect x="401.9" y="579.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="404.9" y="590.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.37%)</title><rect x="401.9" y="563.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="404.9" y="574.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.74%)</title><rect x="406.2" y="611.0" width="8.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="409.2" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.74%)</title><rect x="406.2" y="595.0" width="8.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="409.2" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.74%)</title><rect x="406.2" y="579.0" width="8.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="409.2" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.74%)</title><rect x="406.2" y="563.0" width="8.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="409.2" y="574.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.74%)</title><rect x="406.2" y="547.0" width="8.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="409.2" y="558.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.74%)</title><rect x="406.2" y="531.0" width="8.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="409.2" y="542.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.37%)</title><rect x="410.6" y="515.0" width="4.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="413.6" y="526.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.37%)</title><rect x="410.6" y="499.0" width="4.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="413.6" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (10 samples, 3.69%)</title><rect x="414.9" y="611.0" width="43.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="417.9" y="622.0">__ll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 3.69%)</title><rect x="414.9" y="595.0" width="43.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="417.9" y="606.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (10 samples, 3.69%)</title><rect x="414.9" y="579.0" width="43.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="417.9" y="590.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 3.69%)</title><rect x="414.9" y="563.0" width="43.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="417.9" y="574.0">__x6..</text>
</g>
<g>
<title>do_futex (10 samples, 3.69%)</title><rect x="414.9" y="547.0" width="43.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="417.9" y="558.0">do_f..</text>
</g>
<g>
<title>futex_wake (10 samples, 3.69%)</title><rect x="414.9" y="531.0" width="43.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="417.9" y="542.0">fute..</text>
</g>
<g>
<title>wake_up_q (10 samples, 3.69%)</title><rect x="414.9" y="515.0" width="43.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="417.9" y="526.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (10 samples, 3.69%)</title><rect x="414.9" y="499.0" width="43.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="417.9" y="510.0">try_..</text>
</g>
<g>
<title>__lock_text_start (10 samples, 3.69%)</title><rect x="414.9" y="483.0" width="43.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="417.9" y="494.0">__lo..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.74%)</title><rect x="458.5" y="675.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="461.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.74%)</title><rect x="458.5" y="659.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.5" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.37%)</title><rect x="458.5" y="643.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="461.5" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.37%)</title><rect x="458.5" y="627.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="461.5" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="458.5" y="611.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="461.5" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.37%)</title><rect x="462.8" y="643.0" width="4.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="465.8" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="462.8" y="627.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="465.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.37%)</title><rect x="467.2" y="707.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="470.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.37%)</title><rect x="471.5" y="755.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="474.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 2.95%)</title><rect x="475.9" y="803.0" width="34.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="478.9" y="814.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (8 samples, 2.95%)</title><rect x="510.7" y="803.0" width="34.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="513.7" y="814.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.74%)</title><rect x="510.7" y="787.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="513.7" y="798.0"></text>
</g>
<g>
<title>sched_yield (6 samples, 2.21%)</title><rect x="519.4" y="787.0" width="26.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="522.4" y="798.0">s..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 1.85%)</title><rect x="523.8" y="771.0" width="21.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="526.8" y="782.0">e..</text>
</g>
<g>
<title>do_syscall_64 (5 samples, 1.85%)</title><rect x="523.8" y="755.0" width="21.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="526.8" y="766.0">d..</text>
</g>
<g>
<title>__x64_sys_sched_yield (5 samples, 1.85%)</title><rect x="523.8" y="739.0" width="21.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="526.8" y="750.0">_..</text>
</g>
<g>
<title>do_sched_yield (5 samples, 1.85%)</title><rect x="523.8" y="723.0" width="21.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="526.8" y="734.0">d..</text>
</g>
<g>
<title>schedule (5 samples, 1.85%)</title><rect x="523.8" y="707.0" width="21.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="526.8" y="718.0">s..</text>
</g>
<g>
<title>__sched_text_start (5 samples, 1.85%)</title><rect x="523.8" y="691.0" width="21.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="526.8" y="702.0">_..</text>
</g>
<g>
<title>sched_yield (11 samples, 4.06%)</title><rect x="545.6" y="803.0" width="47.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="548.6" y="814.0">sche..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 3.32%)</title><rect x="554.3" y="787.0" width="39.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="557.3" y="798.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 3.32%)</title><rect x="554.3" y="771.0" width="39.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="557.3" y="782.0">do_..</text>
</g>
<g>
<title>__x64_sys_sched_yield (6 samples, 2.21%)</title><rect x="563.0" y="755.0" width="26.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="566.0" y="766.0">_..</text>
</g>
<g>
<title>do_sched_yield (6 samples, 2.21%)</title><rect x="563.0" y="739.0" width="26.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="566.0" y="750.0">d..</text>
</g>
<g>
<title>schedule (6 samples, 2.21%)</title><rect x="563.0" y="723.0" width="26.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="566.0" y="734.0">s..</text>
</g>
<g>
<title>__sched_text_start (6 samples, 2.21%)</title><rect x="563.0" y="707.0" width="26.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="566.0" y="718.0">_..</text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.37%)</title><rect x="589.1" y="755.0" width="4.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="592.1" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.37%)</title><rect x="589.1" y="739.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="592.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) [clone .plt] (1 samples, 0.37%)</title><rect x="593.5" y="819.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="596.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.37%)</title><rect x="597.8" y="819.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="600.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.37%)</title><rect x="602.2" y="819.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 1.85%)</title><rect x="606.5" y="835.0" width="21.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="609.5" y="846.0">r..</text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.37%)</title><rect x="606.5" y="819.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="609.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.74%)</title><rect x="610.9" y="819.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="613.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.37%)</title><rect x="619.6" y="819.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="622.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (1 samples, 0.37%)</title><rect x="623.9" y="819.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="626.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 4.06%)</title><rect x="628.3" y="915.0" width="47.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="631.3" y="926.0">[unk..</text>
</g>
<g>
<title>__GI_write (9 samples, 3.32%)</title><rect x="628.3" y="899.0" width="39.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="631.3" y="910.0">__G..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 3.32%)</title><rect x="628.3" y="883.0" width="39.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="631.3" y="894.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 3.32%)</title><rect x="628.3" y="867.0" width="39.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="631.3" y="878.0">do_..</text>
</g>
<g>
<title>__x64_sys_write (8 samples, 2.95%)</title><rect x="628.3" y="851.0" width="34.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="631.3" y="862.0">__..</text>
</g>
<g>
<title>ksys_write (8 samples, 2.95%)</title><rect x="628.3" y="835.0" width="34.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="631.3" y="846.0">ks..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.37%)</title><rect x="628.3" y="819.0" width="4.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="631.3" y="830.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.37%)</title><rect x="628.3" y="803.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="631.3" y="814.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.37%)</title><rect x="628.3" y="787.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="631.3" y="798.0"></text>
</g>
<g>
<title>vfs_write (7 samples, 2.58%)</title><rect x="632.7" y="819.0" width="30.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="635.7" y="830.0">vf..</text>
</g>
<g>
<title>__vfs_write (7 samples, 2.58%)</title><rect x="632.7" y="803.0" width="30.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="635.7" y="814.0">__..</text>
</g>
<g>
<title>new_sync_write (7 samples, 2.58%)</title><rect x="632.7" y="787.0" width="30.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="635.7" y="798.0">ne..</text>
</g>
<g>
<title>ext4_file_write_iter (7 samples, 2.58%)</title><rect x="632.7" y="771.0" width="30.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="635.7" y="782.0">ex..</text>
</g>
<g>
<title>__generic_file_write_iter (6 samples, 2.21%)</title><rect x="632.7" y="755.0" width="26.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="635.7" y="766.0">_..</text>
</g>
<g>
<title>file_update_time (1 samples, 0.37%)</title><rect x="632.7" y="739.0" width="4.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="635.7" y="750.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 1.85%)</title><rect x="637.0" y="739.0" width="21.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="640.0" y="750.0">g..</text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.37%)</title><rect x="637.0" y="723.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="640.0" y="734.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.37%)</title><rect x="637.0" y="707.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="640.0" y="718.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.37%)</title><rect x="637.0" y="691.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="640.0" y="702.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.37%)</title><rect x="637.0" y="675.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="640.0" y="686.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.37%)</title><rect x="637.0" y="659.0" width="4.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="640.0" y="670.0"></text>
</g>
<g>
<title>ext4_da_write_end (4 samples, 1.48%)</title><rect x="641.4" y="723.0" width="17.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="644.4" y="734.0"></text>
</g>
<g>
<title>generic_write_end (4 samples, 1.48%)</title><rect x="641.4" y="707.0" width="17.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="644.4" y="718.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.74%)</title><rect x="641.4" y="691.0" width="8.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="644.4" y="702.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.37%)</title><rect x="645.7" y="675.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="648.7" y="686.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.37%)</title><rect x="645.7" y="659.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="648.7" y="670.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.37%)</title><rect x="645.7" y="643.0" width="4.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="648.7" y="654.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.37%)</title><rect x="645.7" y="627.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="648.7" y="638.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.37%)</title><rect x="650.1" y="691.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="653.1" y="702.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.37%)</title><rect x="650.1" y="675.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="653.1" y="686.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.37%)</title><rect x="654.4" y="691.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="657.4" y="702.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.37%)</title><rect x="658.8" y="755.0" width="4.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="661.8" y="766.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.37%)</title><rect x="658.8" y="739.0" width="4.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="661.8" y="750.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.37%)</title><rect x="663.1" y="851.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="666.1" y="862.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.37%)</title><rect x="667.5" y="899.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="670.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="667.5" y="883.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="670.5" y="894.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.37%)</title><rect x="671.8" y="899.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="674.8" y="910.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.37%)</title><rect x="676.2" y="915.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="679.2" y="926.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.37%)</title><rect x="680.6" y="915.0" width="4.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="683.6" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.37%)</title><rect x="684.9" y="915.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.9" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (12 samples, 4.43%)</title><rect x="689.3" y="915.0" width="52.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.3" y="926.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (10 samples, 3.69%)</title><rect x="698.0" y="899.0" width="43.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="701.0" y="910.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (10 samples, 3.69%)</title><rect x="698.0" y="883.0" width="43.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.0" y="894.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.37%)</title><rect x="698.0" y="867.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.0" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (9 samples, 3.32%)</title><rect x="702.3" y="867.0" width="39.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.3" y="878.0">org..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (9 samples, 3.32%)</title><rect x="702.3" y="851.0" width="39.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.3" y="862.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (9 samples, 3.32%)</title><rect x="702.3" y="835.0" width="39.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="705.3" y="846.0">Jav..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.37%)</title><rect x="702.3" y="819.0" width="4.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="705.3" y="830.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.74%)</title><rect x="706.7" y="819.0" width="8.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="709.7" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.37%)</title><rect x="706.7" y="803.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="709.7" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="711.0" y="803.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.0" y="814.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 2.21%)</title><rect x="715.4" y="819.0" width="26.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="718.4" y="830.0">j..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.37%)</title><rect x="715.4" y="803.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="718.4" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.74%)</title><rect x="719.7" y="803.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="722.7" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.11%)</title><rect x="728.5" y="803.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 1.11%)</title><rect x="728.5" y="787.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="731.5" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.37%)</title><rect x="728.5" y="771.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="731.5" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.37%)</title><rect x="732.8" y="771.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="735.8" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.37%)</title><rect x="737.2" y="771.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="740.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (3 samples, 1.11%)</title><rect x="741.5" y="963.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.5" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 1.11%)</title><rect x="741.5" y="947.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="744.5" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 1.11%)</title><rect x="741.5" y="931.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.5" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.74%)</title><rect x="745.9" y="915.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.74%)</title><rect x="745.9" y="899.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.9" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.37%)</title><rect x="745.9" y="883.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="748.9" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="745.9" y="867.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="748.9" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.37%)</title><rect x="745.9" y="851.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="748.9" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.37%)</title><rect x="745.9" y="835.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="748.9" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.37%)</title><rect x="745.9" y="819.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="748.9" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.37%)</title><rect x="745.9" y="803.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="748.9" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.37%)</title><rect x="750.2" y="883.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.2" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="754.6" y="1027.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (30 samples, 11.07%)</title><rect x="758.9" y="1059.0" width="130.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.9" y="1070.0">one/nio/server/S..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.37%)</title><rect x="785.1" y="1043.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.37%)</title><rect x="789.4" y="1043.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (6 samples, 2.21%)</title><rect x="793.8" y="1043.0" width="26.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.8" y="1054.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (6 samples, 2.21%)</title><rect x="793.8" y="1027.0" width="26.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.8" y="1038.0">o..</text>
</g>
<g>
<title>[unknown] (6 samples, 2.21%)</title><rect x="793.8" y="1011.0" width="26.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="796.8" y="1022.0">[..</text>
</g>
<g>
<title>epoll_wait (6 samples, 2.21%)</title><rect x="793.8" y="995.0" width="26.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="796.8" y="1006.0">e..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.21%)</title><rect x="793.8" y="979.0" width="26.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="796.8" y="990.0">e..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.21%)</title><rect x="793.8" y="963.0" width="26.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="796.8" y="974.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (6 samples, 2.21%)</title><rect x="793.8" y="947.0" width="26.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="796.8" y="958.0">_..</text>
</g>
<g>
<title>do_epoll_wait (6 samples, 2.21%)</title><rect x="793.8" y="931.0" width="26.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="796.8" y="942.0">d..</text>
</g>
<g>
<title>__fdget (1 samples, 0.37%)</title><rect x="793.8" y="915.0" width="4.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="796.8" y="926.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.37%)</title><rect x="793.8" y="899.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="796.8" y="910.0"></text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.37%)</title><rect x="798.1" y="915.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="801.1" y="926.0"></text>
</g>
<g>
<title>ep_poll (3 samples, 1.11%)</title><rect x="802.5" y="915.0" width="13.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="805.5" y="926.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.74%)</title><rect x="802.5" y="899.0" width="8.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="805.5" y="910.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.37%)</title><rect x="802.5" y="883.0" width="4.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="805.5" y="894.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.37%)</title><rect x="802.5" y="867.0" width="4.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="805.5" y="878.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.37%)</title><rect x="802.5" y="851.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="805.5" y="862.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.37%)</title><rect x="806.8" y="883.0" width="4.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="809.8" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.37%)</title><rect x="811.2" y="899.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="814.2" y="910.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.37%)</title><rect x="811.2" y="883.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="814.2" y="894.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.37%)</title><rect x="811.2" y="867.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="814.2" y="878.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.37%)</title><rect x="811.2" y="851.0" width="4.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="814.2" y="862.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.37%)</title><rect x="811.2" y="835.0" width="4.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="814.2" y="846.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.37%)</title><rect x="815.5" y="915.0" width="4.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="818.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (16 samples, 5.90%)</title><rect x="819.9" y="1043.0" width="69.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.9" y="1054.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (16 samples, 5.90%)</title><rect x="819.9" y="1027.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.9" y="1038.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 3.32%)</title><rect x="819.9" y="1011.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.9" y="1022.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 2.95%)</title><rect x="824.2" y="995.0" width="34.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.2" y="1006.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 2.95%)</title><rect x="824.2" y="979.0" width="34.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.2" y="990.0">on..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (7 samples, 2.58%)</title><rect x="824.2" y="963.0" width="30.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.2" y="974.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.74%)</title><rect x="824.2" y="947.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="827.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.37%)</title><rect x="824.2" y="931.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.2" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.37%)</title><rect x="824.2" y="915.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.37%)</title><rect x="828.6" y="931.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="831.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (5 samples, 1.85%)</title><rect x="833.0" y="947.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.0" y="958.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.48%)</title><rect x="837.3" y="931.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.48%)</title><rect x="837.3" y="915.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 1.48%)</title><rect x="837.3" y="899.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.48%)</title><rect x="837.3" y="883.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="840.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.48%)</title><rect x="837.3" y="867.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.48%)</title><rect x="837.3" y="851.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.48%)</title><rect x="837.3" y="835.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 1.48%)</title><rect x="837.3" y="819.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.3" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.48%)</title><rect x="837.3" y="803.0" width="17.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="840.3" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.48%)</title><rect x="837.3" y="787.0" width="17.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="840.3" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.48%)</title><rect x="837.3" y="771.0" width="17.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="840.3" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 1.48%)</title><rect x="837.3" y="755.0" width="17.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="840.3" y="766.0"></text>
</g>
<g>
<title>do_futex (4 samples, 1.48%)</title><rect x="837.3" y="739.0" width="17.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="840.3" y="750.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 1.48%)</title><rect x="837.3" y="723.0" width="17.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="840.3" y="734.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.37%)</title><rect x="841.7" y="707.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="844.7" y="718.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.74%)</title><rect x="846.0" y="707.0" width="8.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="849.0" y="718.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.74%)</title><rect x="846.0" y="691.0" width="8.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="849.0" y="702.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.74%)</title><rect x="846.0" y="675.0" width="8.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="849.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.37%)</title><rect x="854.7" y="963.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.37%)</title><rect x="854.7" y="947.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="857.7" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 2.58%)</title><rect x="859.1" y="1011.0" width="30.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.1" y="1022.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 2.58%)</title><rect x="859.1" y="995.0" width="30.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.1" y="1006.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 1.11%)</title><rect x="859.1" y="979.0" width="13.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="862.1" y="990.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.37%)</title><rect x="859.1" y="963.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="862.1" y="974.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.74%)</title><rect x="863.4" y="963.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="866.4" y="974.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.37%)</title><rect x="863.4" y="947.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.4" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.37%)</title><rect x="867.8" y="947.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.8" y="958.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 1.48%)</title><rect x="872.1" y="979.0" width="17.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="875.1" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.48%)</title><rect x="872.1" y="963.0" width="17.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="875.1" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.48%)</title><rect x="872.1" y="947.0" width="17.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="875.1" y="958.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 1.11%)</title><rect x="872.1" y="931.0" width="13.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="875.1" y="942.0"></text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 1.11%)</title><rect x="872.1" y="915.0" width="13.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="875.1" y="926.0"></text>
</g>
<g>
<title>sock_recvmsg (3 samples, 1.11%)</title><rect x="872.1" y="899.0" width="13.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="875.1" y="910.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.37%)</title><rect x="872.1" y="883.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="875.1" y="894.0"></text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 0.74%)</title><rect x="876.5" y="883.0" width="8.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="879.5" y="894.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.74%)</title><rect x="876.5" y="867.0" width="8.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="879.5" y="878.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.74%)</title><rect x="876.5" y="851.0" width="8.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="879.5" y="862.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 0.74%)</title><rect x="876.5" y="835.0" width="8.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="879.5" y="846.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.74%)</title><rect x="876.5" y="819.0" width="8.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="879.5" y="830.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.37%)</title><rect x="876.5" y="803.0" width="4.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="879.5" y="814.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.37%)</title><rect x="880.8" y="803.0" width="4.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="883.8" y="814.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.37%)</title><rect x="885.2" y="931.0" width="4.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="888.2" y="942.0"></text>
</g>
<g>
<title>start_thread (69 samples, 25.46%)</title><rect x="889.6" y="1059.0" width="300.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.6" y="1070.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (69 samples, 25.46%)</title><rect x="889.6" y="1043.0" width="300.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.6" y="1054.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (69 samples, 25.46%)</title><rect x="889.6" y="1027.0" width="300.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.6" y="1038.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.37%)</title><rect x="889.6" y="1011.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.6" y="1022.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.37%)</title><rect x="889.6" y="995.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.6" y="1006.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.37%)</title><rect x="889.6" y="979.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.6" y="990.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.37%)</title><rect x="889.6" y="963.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="892.6" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (68 samples, 25.09%)</title><rect x="893.9" y="1011.0" width="296.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="896.9" y="1022.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 25.09%)</title><rect x="893.9" y="995.0" width="296.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.9" y="1006.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (68 samples, 25.09%)</title><rect x="893.9" y="979.0" width="296.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.9" y="990.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (65 samples, 23.99%)</title><rect x="893.9" y="963.0" width="283.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.9" y="974.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (65 samples, 23.99%)</title><rect x="893.9" y="947.0" width="283.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="896.9" y="958.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 12.92%)</title><rect x="893.9" y="931.0" width="152.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.9" y="942.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.74%)</title><rect x="893.9" y="915.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="896.9" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.74%)</title><rect x="893.9" y="899.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.9" y="910.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.37%)</title><rect x="898.3" y="883.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.3" y="894.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.37%)</title><rect x="898.3" y="867.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.3" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.37%)</title><rect x="902.6" y="915.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.6" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.11%)</title><rect x="907.0" y="915.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.0" y="926.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.37%)</title><rect x="907.0" y="899.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="910.0" y="910.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.37%)</title><rect x="911.3" y="899.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="914.3" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.37%)</title><rect x="915.7" y="899.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.7" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.37%)</title><rect x="915.7" y="883.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.7" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.37%)</title><rect x="915.7" y="867.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.7" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.37%)</title><rect x="915.7" y="851.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="918.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.11%)</title><rect x="920.0" y="915.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.11%)</title><rect x="920.0" y="899.0" width="13.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="923.0" y="910.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.37%)</title><rect x="920.0" y="883.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="923.0" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="924.4" y="883.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.4" y="894.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.37%)</title><rect x="924.4" y="867.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.37%)</title><rect x="928.7" y="883.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 9.23%)</title><rect x="933.1" y="915.0" width="108.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.1" y="926.0">PhaseChaitin:..</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.37%)</title><rect x="933.1" y="899.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="936.1" y="910.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.37%)</title><rect x="937.5" y="899.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.48%)</title><rect x="941.8" y="899.0" width="17.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.8" y="910.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.37%)</title><rect x="954.9" y="883.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.9" y="894.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.37%)</title><rect x="954.9" y="867.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.48%)</title><rect x="959.2" y="899.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.74%)</title><rect x="959.2" y="883.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.37%)</title><rect x="967.9" y="883.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="970.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="967.9" y="867.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.37%)</title><rect x="972.3" y="883.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 1.85%)</title><rect x="976.6" y="899.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="910.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.74%)</title><rect x="981.0" y="883.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.0" y="894.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.37%)</title><rect x="989.7" y="883.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.7" y="894.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.37%)</title><rect x="994.1" y="883.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.1" y="894.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.37%)</title><rect x="994.1" y="867.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="997.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.37%)</title><rect x="998.4" y="899.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.4" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="998.4" y="883.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.74%)</title><rect x="1002.8" y="899.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.8" y="910.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.37%)</title><rect x="1007.1" y="883.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1010.1" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.37%)</title><rect x="1011.5" y="899.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.5" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="1011.5" y="883.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1014.5" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.74%)</title><rect x="1015.8" y="899.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.8" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="1020.2" y="883.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.2" y="894.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.37%)</title><rect x="1020.2" y="867.0" width="4.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1023.2" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="1024.5" y="899.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1027.5" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.11%)</title><rect x="1028.9" y="899.0" width="13.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.9" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="1037.6" y="883.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.6" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="1037.6" y="867.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.6" y="878.0"></text>
</g>
<g>
<title>compI_rRegNode::ideal_Opcode() const (1 samples, 0.37%)</title><rect x="1042.0" y="915.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.0" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 7.75%)</title><rect x="1046.3" y="931.0" width="91.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.3" y="942.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.37%)</title><rect x="1046.3" y="915.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.3" y="926.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.37%)</title><rect x="1046.3" y="899.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.3" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.255] (1 samples, 0.37%)</title><rect x="1046.3" y="883.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.3" y="894.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.37%)</title><rect x="1046.3" y="867.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.3" y="878.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (9 samples, 3.32%)</title><rect x="1050.7" y="915.0" width="39.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.7" y="926.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (9 samples, 3.32%)</title><rect x="1050.7" y="899.0" width="39.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.7" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.37%)</title><rect x="1050.7" y="883.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1055.0" y="883.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.0" y="894.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.37%)</title><rect x="1059.4" y="867.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1063.7" y="883.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.37%)</title><rect x="1068.1" y="867.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.37%)</title><rect x="1068.1" y="851.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.74%)</title><rect x="1072.4" y="883.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.37%)</title><rect x="1081.1" y="883.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.37%)</title><rect x="1081.1" y="867.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.37%)</title><rect x="1081.1" y="851.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.37%)</title><rect x="1081.1" y="835.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.1" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.37%)</title><rect x="1085.5" y="883.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.37%)</title><rect x="1089.9" y="915.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.37%)</title><rect x="1089.9" y="899.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1089.9" y="883.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1089.9" y="867.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1089.9" y="851.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.37%)</title><rect x="1089.9" y="835.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 2.95%)</title><rect x="1094.2" y="915.0" width="34.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.2" y="926.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.37%)</title><rect x="1094.2" y="899.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.2" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.37%)</title><rect x="1094.2" y="883.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.2" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::split_outer_loop(PhaseIdealLoop*) (1 samples, 0.37%)</title><rect x="1094.2" y="867.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.2" y="878.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.37%)</title><rect x="1094.2" y="851.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.11%)</title><rect x="1098.6" y="899.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1111.6" y="899.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.37%)</title><rect x="1116.0" y="883.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.37%)</title><rect x="1116.0" y="867.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.37%)</title><rect x="1116.0" y="851.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1116.0" y="835.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.74%)</title><rect x="1120.3" y="899.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.37%)</title><rect x="1124.7" y="883.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.37%)</title><rect x="1124.7" y="867.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.74%)</title><rect x="1129.0" y="915.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.0" y="926.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.37%)</title><rect x="1129.0" y="899.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1133.4" y="899.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.4" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.37%)</title><rect x="1133.4" y="883.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.4" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.74%)</title><rect x="1137.7" y="931.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.85%)</title><rect x="1146.5" y="931.0" width="21.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.85%)</title><rect x="1146.5" y="915.0" width="21.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.85%)</title><rect x="1146.5" y="899.0" width="21.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.85%)</title><rect x="1146.5" y="883.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.85%)</title><rect x="1146.5" y="867.0" width="21.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.48%)</title><rect x="1146.5" y="851.0" width="17.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.48%)</title><rect x="1146.5" y="835.0" width="17.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.48%)</title><rect x="1146.5" y="819.0" width="17.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.48%)</title><rect x="1146.5" y="803.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.48%)</title><rect x="1146.5" y="787.0" width="17.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.48%)</title><rect x="1146.5" y="771.0" width="17.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.11%)</title><rect x="1146.5" y="755.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1146.5" y="739.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.11%)</title><rect x="1146.5" y="723.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.11%)</title><rect x="1146.5" y="707.0" width="13.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.11%)</title><rect x="1146.5" y="691.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.11%)</title><rect x="1146.5" y="675.0" width="13.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.11%)</title><rect x="1146.5" y="659.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.5" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1146.5" y="643.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.5" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1146.5" y="627.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1146.5" y="611.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1146.5" y="595.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.5" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="579.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="590.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.37%)</title><rect x="1146.5" y="563.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="574.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.37%)</title><rect x="1146.5" y="547.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.5" y="558.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.37%)</title><rect x="1146.5" y="531.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="542.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.37%)</title><rect x="1146.5" y="515.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1150.8" y="643.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1150.8" y="627.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1150.8" y="611.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1150.8" y="595.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1150.8" y="579.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1150.8" y="563.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1150.8" y="547.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1150.8" y="531.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1150.8" y="515.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1150.8" y="499.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1150.8" y="483.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1150.8" y="467.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="451.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.8" y="435.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1150.8" y="419.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1150.8" y="403.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1150.8" y="387.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1150.8" y="371.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="355.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.8" y="339.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1150.8" y="323.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1150.8" y="307.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1150.8" y="291.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1150.8" y="275.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="259.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.8" y="243.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1150.8" y="227.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1150.8" y="211.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1150.8" y="195.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="179.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="163.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.8" y="174.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.37%)</title><rect x="1150.8" y="147.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.8" y="158.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.37%)</title><rect x="1150.8" y="131.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.8" y="142.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.37%)</title><rect x="1150.8" y="115.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="126.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.37%)</title><rect x="1150.8" y="99.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="110.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="83.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="94.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.37%)</title><rect x="1150.8" y="67.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.37%)</title><rect x="1150.8" y="51.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.37%)</title><rect x="1150.8" y="35.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1155.2" y="467.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="478.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.37%)</title><rect x="1155.2" y="451.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.37%)</title><rect x="1159.5" y="755.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.37%)</title><rect x="1159.5" y="739.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.37%)</title><rect x="1159.5" y="723.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.37%)</title><rect x="1159.5" y="707.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.37%)</title><rect x="1163.9" y="851.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="835.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="846.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.37%)</title><rect x="1163.9" y="819.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="830.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.37%)</title><rect x="1163.9" y="803.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="814.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.37%)</title><rect x="1163.9" y="787.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.37%)</title><rect x="1163.9" y="771.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="782.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.74%)</title><rect x="1168.2" y="931.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="942.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.37%)</title><rect x="1168.2" y="915.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.37%)</title><rect x="1172.6" y="915.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.11%)</title><rect x="1176.9" y="963.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 1.11%)</title><rect x="1176.9" y="947.0" width="13.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.11%)</title><rect x="1176.9" y="931.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.74%)</title><rect x="1176.9" y="915.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.37%)</title><rect x="1176.9" y="899.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1176.9" y="883.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="867.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.37%)</title><rect x="1176.9" y="851.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="835.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="819.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="803.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.37%)</title><rect x="1176.9" y="787.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1176.9" y="771.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="782.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1176.9" y="755.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1176.9" y="739.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="723.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1176.9" y="707.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1176.9" y="691.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.37%)</title><rect x="1176.9" y="675.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.37%)</title><rect x="1181.3" y="899.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.37%)</title><rect x="1181.3" y="883.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_before_allocation() (1 samples, 0.37%)</title><rect x="1181.3" y="867.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1185.6" y="915.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.6" y="926.0"></text>
</g>
<g>
<title>Dependencies::DepStream::context_type() (1 samples, 0.37%)</title><rect x="1185.6" y="899.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="910.0"></text>
</g>
</g>
</svg>
