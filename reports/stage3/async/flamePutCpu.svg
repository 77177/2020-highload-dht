<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (357 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.28%)</title><rect x="10.0" y="1171.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.28%)</title><rect x="10.0" y="1155.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="13.3" y="1171.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.3" y="1182.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.28%)</title><rect x="13.3" y="1155.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.3" y="1166.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.28%)</title><rect x="16.6" y="1171.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="19.6" y="1182.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.28%)</title><rect x="16.6" y="1155.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.6" y="1166.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.28%)</title><rect x="16.6" y="1139.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.6" y="1150.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="16.6" y="1123.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.6" y="1134.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="16.6" y="1107.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.6" y="1118.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="16.6" y="1091.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.6" y="1102.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.28%)</title><rect x="16.6" y="1075.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.6" y="1086.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.28%)</title><rect x="16.6" y="1059.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.6" y="1070.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.28%)</title><rect x="16.6" y="1043.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.6" y="1054.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.28%)</title><rect x="16.6" y="1027.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.6" y="1038.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.28%)</title><rect x="16.6" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.6" y="1022.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="16.6" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.6" y="1006.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.28%)</title><rect x="16.6" y="979.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.6" y="990.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.28%)</title><rect x="16.6" y="963.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.6" y="974.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.28%)</title><rect x="16.6" y="947.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.6" y="958.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (1 samples, 0.28%)</title><rect x="16.6" y="931.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="19.6" y="942.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.28%)</title><rect x="16.6" y="915.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.6" y="926.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.28%)</title><rect x="16.6" y="899.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.6" y="910.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.28%)</title><rect x="16.6" y="883.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.6" y="894.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.28%)</title><rect x="16.6" y="867.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="19.6" y="878.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="16.6" y="851.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.6" y="862.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.28%)</title><rect x="16.6" y="835.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.6" y="846.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.28%)</title><rect x="16.6" y="819.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.6" y="830.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.28%)</title><rect x="16.6" y="803.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (94 samples, 26.33%)</title><rect x="19.9" y="1171.0" width="310.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.9" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (94 samples, 26.33%)</title><rect x="19.9" y="1155.0" width="310.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Wo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (94 samples, 26.33%)</title><rect x="19.9" y="1139.0" width="310.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="1150.0">java/util/concurrent/ThreadPoolExecutor.ru..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.28%)</title><rect x="23.2" y="1123.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (69 samples, 19.33%)</title><rect x="26.5" y="1123.0" width="228.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.5" y="1134.0">java/util/concurrent/FutureTas..</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (68 samples, 19.05%)</title><rect x="26.5" y="1107.0" width="224.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.5" y="1118.0">java/util/concurrent/Executors..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/1889641177.run (68 samples, 19.05%)</title><rect x="26.5" y="1091.0" width="224.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="1102.0">ru/mail/polis/service/stasyano..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (68 samples, 19.05%)</title><rect x="26.5" y="1075.0" width="224.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.5" y="1086.0">ru/mail/polis/service/stasyano..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (68 samples, 19.05%)</title><rect x="26.5" y="1059.0" width="224.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.5" y="1070.0">ru/mail/polis/dao/stasyanoi/DA..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (67 samples, 18.77%)</title><rect x="26.5" y="1043.0" width="221.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.5" y="1054.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (67 samples, 18.77%)</title><rect x="26.5" y="1027.0" width="221.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.5" y="1038.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (47 samples, 13.17%)</title><rect x="26.5" y="1011.0" width="155.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="29.5" y="1022.0">Java_org_rocksdb_Roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (47 samples, 13.17%)</title><rect x="26.5" y="995.0" width="155.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.5" y="1006.0">rocksdb_put_helper(J..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 13.17%)</title><rect x="26.5" y="979.0" width="155.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="29.5" y="990.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 13.17%)</title><rect x="26.5" y="963.0" width="155.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.5" y="974.0">rocksdb::DBImpl::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 13.17%)</title><rect x="26.5" y="947.0" width="155.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.5" y="958.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.56%)</title><rect x="26.5" y="931.0" width="6.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="29.5" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (42 samples, 11.76%)</title><rect x="33.1" y="931.0" width="138.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="36.1" y="942.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.28%)</title><rect x="33.1" y="915.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="36.1" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (40 samples, 11.20%)</title><rect x="36.4" y="915.0" width="132.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="39.4" y="926.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (1 samples, 0.28%)</title><rect x="43.1" y="899.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="46.1" y="910.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.28%)</title><rect x="43.1" y="883.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.1" y="894.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="43.1" y="867.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="46.1" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (20 samples, 5.60%)</title><rect x="46.4" y="899.0" width="66.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="49.4" y="910.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (20 samples, 5.60%)</title><rect x="46.4" y="883.0" width="66.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="49.4" y="894.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (20 samples, 5.60%)</title><rect x="46.4" y="867.0" width="66.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="49.4" y="878.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (20 samples, 5.60%)</title><rect x="46.4" y="851.0" width="66.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.4" y="862.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (20 samples, 5.60%)</title><rect x="46.4" y="835.0" width="66.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.4" y="846.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (19 samples, 5.32%)</title><rect x="46.4" y="819.0" width="62.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="49.4" y="830.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (1 samples, 0.28%)</title><rect x="49.7" y="803.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="52.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.28%)</title><rect x="49.7" y="787.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="52.7" y="798.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (17 samples, 4.76%)</title><rect x="53.0" y="803.0" width="56.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="56.0" y="814.0">bool r..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (12 samples, 3.36%)</title><rect x="56.3" y="787.0" width="39.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="59.3" y="798.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (10 samples, 2.80%)</title><rect x="56.3" y="771.0" width="33.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="59.3" y="782.0">/t..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 2.80%)</title><rect x="56.3" y="755.0" width="33.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="59.3" y="766.0">ro..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 2.24%)</title><rect x="62.9" y="739.0" width="26.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="65.9" y="750.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.84%)</title><rect x="62.9" y="723.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.9" y="734.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.84%)</title><rect x="62.9" y="707.0" width="9.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="65.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="66.2" y="691.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="69.2" y="702.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="69.5" y="691.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="72.5" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.28%)</title><rect x="69.5" y="675.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="72.5" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 1.12%)</title><rect x="72.8" y="723.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="75.8" y="734.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (4 samples, 1.12%)</title><rect x="72.8" y="707.0" width="13.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="75.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="76.1" y="691.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.1" y="702.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.56%)</title><rect x="79.4" y="691.0" width="6.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="82.4" y="702.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.28%)</title><rect x="79.4" y="675.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="82.4" y="686.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.28%)</title><rect x="82.7" y="675.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.7" y="686.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.28%)</title><rect x="82.7" y="659.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="85.7" y="670.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.28%)</title><rect x="82.7" y="643.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="85.7" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="86.0" y="723.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="89.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.56%)</title><rect x="89.3" y="771.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="92.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.56%)</title><rect x="89.3" y="755.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.3" y="766.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.28%)</title><rect x="89.3" y="739.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.3" y="750.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.28%)</title><rect x="89.3" y="723.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="92.3" y="734.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="89.3" y="707.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="92.3" y="718.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.28%)</title><rect x="89.3" y="691.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="92.3" y="702.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.28%)</title><rect x="92.6" y="739.0" width="3.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="95.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 1.12%)</title><rect x="95.9" y="787.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="98.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.84%)</title><rect x="99.2" y="771.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="102.2" y="782.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.28%)</title><rect x="99.2" y="755.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="102.2" y="766.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.28%)</title><rect x="99.2" y="739.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="102.2" y="750.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="99.2" y="723.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="102.2" y="734.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.28%)</title><rect x="99.2" y="707.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="102.2" y="718.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.56%)</title><rect x="102.5" y="755.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="105.5" y="766.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.56%)</title><rect x="102.5" y="739.0" width="6.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="105.5" y="750.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.56%)</title><rect x="102.5" y="723.0" width="6.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="105.5" y="734.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.28%)</title><rect x="102.5" y="707.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="105.5" y="718.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.28%)</title><rect x="105.9" y="707.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="108.9" y="718.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.28%)</title><rect x="105.9" y="691.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.28%)</title><rect x="109.2" y="819.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="112.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (8 samples, 2.24%)</title><rect x="112.5" y="899.0" width="26.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.5" y="910.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (8 samples, 2.24%)</title><rect x="112.5" y="883.0" width="26.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="115.5" y="894.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 2.24%)</title><rect x="112.5" y="867.0" width="26.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="115.5" y="878.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 2.24%)</title><rect x="112.5" y="851.0" width="26.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="115.5" y="862.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (8 samples, 2.24%)</title><rect x="112.5" y="835.0" width="26.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.5" y="846.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 2.24%)</title><rect x="112.5" y="819.0" width="26.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="115.5" y="830.0">r..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (8 samples, 2.24%)</title><rect x="112.5" y="803.0" width="26.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="115.5" y="814.0">r..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (8 samples, 2.24%)</title><rect x="112.5" y="787.0" width="26.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.5" y="798.0">b..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (7 samples, 1.96%)</title><rect x="112.5" y="771.0" width="23.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="115.5" y="782.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni14898690506153603787.so (7 samples, 1.96%)</title><rect x="112.5" y="755.0" width="23.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="115.5" y="766.0">/..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 1.96%)</title><rect x="112.5" y="739.0" width="23.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="115.5" y="750.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 1.96%)</title><rect x="112.5" y="723.0" width="23.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="115.5" y="734.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.56%)</title><rect x="112.5" y="707.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="115.5" y="718.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.56%)</title><rect x="112.5" y="691.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="115.5" y="702.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.28%)</title><rect x="112.5" y="675.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="115.5" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="115.8" y="675.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="118.8" y="686.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.28%)</title><rect x="115.8" y="659.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.8" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.56%)</title><rect x="119.1" y="707.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="122.1" y="718.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.56%)</title><rect x="119.1" y="691.0" width="6.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="122.1" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="119.1" y="675.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="122.1" y="686.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.28%)</title><rect x="122.4" y="675.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="125.4" y="686.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.28%)</title><rect x="122.4" y="659.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="125.4" y="670.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.28%)</title><rect x="122.4" y="643.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="125.4" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.28%)</title><rect x="125.7" y="707.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="128.7" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.56%)</title><rect x="129.0" y="707.0" width="6.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="132.0" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.56%)</title><rect x="129.0" y="691.0" width="6.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="132.0" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.56%)</title><rect x="129.0" y="675.0" width="6.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="132.0" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.56%)</title><rect x="129.0" y="659.0" width="6.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="132.0" y="670.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.56%)</title><rect x="129.0" y="643.0" width="6.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="132.0" y="654.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.56%)</title><rect x="129.0" y="627.0" width="6.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="132.0" y="638.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.56%)</title><rect x="129.0" y="611.0" width="6.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="132.0" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.56%)</title><rect x="129.0" y="595.0" width="6.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="132.0" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.56%)</title><rect x="129.0" y="579.0" width="6.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="132.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.28%)</title><rect x="135.6" y="771.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="138.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.28%)</title><rect x="135.6" y="755.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="138.6" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.28%)</title><rect x="135.6" y="739.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="138.6" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.28%)</title><rect x="135.6" y="723.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="138.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.28%)</title><rect x="135.6" y="707.0" width="3.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="138.6" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.28%)</title><rect x="135.6" y="691.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="138.6" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.28%)</title><rect x="135.6" y="675.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="138.6" y="686.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.28%)</title><rect x="135.6" y="659.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="138.6" y="670.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.28%)</title><rect x="135.6" y="643.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="138.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 1.12%)</title><rect x="138.9" y="899.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="141.9" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (3 samples, 0.84%)</title><rect x="152.1" y="899.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="155.1" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.28%)</title><rect x="152.1" y="883.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="155.1" y="894.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.56%)</title><rect x="155.4" y="883.0" width="6.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="158.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.56%)</title><rect x="155.4" y="867.0" width="6.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="158.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.56%)</title><rect x="155.4" y="851.0" width="6.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="158.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (2 samples, 0.56%)</title><rect x="155.4" y="835.0" width="6.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="158.4" y="846.0"></text>
</g>
<g>
<title>do_sched_yield (2 samples, 0.56%)</title><rect x="155.4" y="819.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="158.4" y="830.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.56%)</title><rect x="155.4" y="803.0" width="6.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="158.4" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.56%)</title><rect x="155.4" y="787.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="158.4" y="798.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.56%)</title><rect x="162.0" y="899.0" width="6.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="165.0" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.56%)</title><rect x="162.0" y="883.0" width="6.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="165.0" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.56%)</title><rect x="162.0" y="867.0" width="6.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="165.0" y="878.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.28%)</title><rect x="165.4" y="851.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="168.4" y="862.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.28%)</title><rect x="165.4" y="835.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="168.4" y="846.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.28%)</title><rect x="165.4" y="819.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="168.4" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.28%)</title><rect x="165.4" y="803.0" width="3.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="168.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.28%)</title><rect x="168.7" y="915.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="171.7" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.28%)</title><rect x="172.0" y="931.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="175.0" y="942.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.28%)</title><rect x="172.0" y="915.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="175.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.28%)</title><rect x="175.3" y="931.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="178.3" y="942.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.28%)</title><rect x="178.6" y="931.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="181.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 1.96%)</title><rect x="181.9" y="1011.0" width="23.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="184.9" y="1022.0">[..</text>
</g>
<g>
<title>__GI_write (7 samples, 1.96%)</title><rect x="181.9" y="995.0" width="23.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="184.9" y="1006.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.96%)</title><rect x="181.9" y="979.0" width="23.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="184.9" y="990.0">e..</text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.96%)</title><rect x="181.9" y="963.0" width="23.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="184.9" y="974.0">d..</text>
</g>
<g>
<title>__x64_sys_write (6 samples, 1.68%)</title><rect x="185.2" y="947.0" width="19.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="188.2" y="958.0"></text>
</g>
<g>
<title>ksys_write (6 samples, 1.68%)</title><rect x="185.2" y="931.0" width="19.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.2" y="942.0"></text>
</g>
<g>
<title>vfs_write (6 samples, 1.68%)</title><rect x="185.2" y="915.0" width="19.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="188.2" y="926.0"></text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.28%)</title><rect x="185.2" y="899.0" width="3.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="188.2" y="910.0"></text>
</g>
<g>
<title>__vfs_write (5 samples, 1.40%)</title><rect x="188.5" y="899.0" width="16.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="191.5" y="910.0"></text>
</g>
<g>
<title>new_sync_write (5 samples, 1.40%)</title><rect x="188.5" y="883.0" width="16.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="191.5" y="894.0"></text>
</g>
<g>
<title>ext4_file_write_iter (5 samples, 1.40%)</title><rect x="188.5" y="867.0" width="16.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="191.5" y="878.0"></text>
</g>
<g>
<title>__generic_file_write_iter (5 samples, 1.40%)</title><rect x="188.5" y="851.0" width="16.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="191.5" y="862.0"></text>
</g>
<g>
<title>generic_perform_write (4 samples, 1.12%)</title><rect x="191.8" y="835.0" width="13.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="194.8" y="846.0"></text>
</g>
<g>
<title>ext4_da_write_end (3 samples, 0.84%)</title><rect x="191.8" y="819.0" width="9.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="194.8" y="830.0"></text>
</g>
<g>
<title>generic_write_end (3 samples, 0.84%)</title><rect x="191.8" y="803.0" width="9.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="194.8" y="814.0"></text>
</g>
<g>
<title>__mark_inode_dirty (3 samples, 0.84%)</title><rect x="191.8" y="787.0" width="9.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="194.8" y="798.0"></text>
</g>
<g>
<title>ext4_dirty_inode (3 samples, 0.84%)</title><rect x="191.8" y="771.0" width="9.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="194.8" y="782.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (3 samples, 0.84%)</title><rect x="191.8" y="755.0" width="9.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="194.8" y="766.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.56%)</title><rect x="191.8" y="739.0" width="6.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="194.8" y="750.0"></text>
</g>
<g>
<title>ext4_do_update_inode (2 samples, 0.56%)</title><rect x="191.8" y="723.0" width="6.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="194.8" y="734.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.28%)</title><rect x="195.1" y="707.0" width="3.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="198.1" y="718.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.28%)</title><rect x="195.1" y="691.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="198.1" y="702.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.28%)</title><rect x="195.1" y="675.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="198.1" y="686.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.28%)</title><rect x="195.1" y="659.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="198.1" y="670.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.28%)</title><rect x="198.4" y="739.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="201.4" y="750.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.28%)</title><rect x="198.4" y="723.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="201.4" y="734.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.28%)</title><rect x="201.7" y="819.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="204.7" y="830.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (1 samples, 0.28%)</title><rect x="201.7" y="803.0" width="3.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="204.7" y="814.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.28%)</title><rect x="205.0" y="1011.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="208.0" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (12 samples, 3.36%)</title><rect x="208.3" y="1011.0" width="39.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.3" y="1022.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (12 samples, 3.36%)</title><rect x="208.3" y="995.0" width="39.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.3" y="1006.0">ru/..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.28%)</title><rect x="208.3" y="979.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.3" y="990.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.28%)</title><rect x="208.3" y="963.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.3" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (11 samples, 3.08%)</title><rect x="211.6" y="979.0" width="36.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.6" y="990.0">org..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (11 samples, 3.08%)</title><rect x="211.6" y="963.0" width="36.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.6" y="974.0">org..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (11 samples, 3.08%)</title><rect x="211.6" y="947.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.6" y="958.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (11 samples, 3.08%)</title><rect x="211.6" y="931.0" width="36.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="214.6" y="942.0">Jav..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.56%)</title><rect x="214.9" y="915.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="217.9" y="926.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.56%)</title><rect x="221.5" y="915.0" width="6.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="224.5" y="926.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.56%)</title><rect x="221.5" y="899.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.5" y="910.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 1.40%)</title><rect x="228.2" y="915.0" width="16.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="231.2" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.84%)</title><rect x="234.8" y="899.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="237.8" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.84%)</title><rect x="234.8" y="883.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="237.8" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.84%)</title><rect x="234.8" y="867.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="237.8" y="878.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.28%)</title><rect x="234.8" y="851.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.8" y="862.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.28%)</title><rect x="238.1" y="851.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="241.1" y="862.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.28%)</title><rect x="241.4" y="851.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="244.4" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.28%)</title><rect x="244.7" y="915.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="247.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.toBytes (1 samples, 0.28%)</title><rect x="248.0" y="1043.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.0" y="1054.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.28%)</title><rect x="248.0" y="1027.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="251.0" y="1038.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.28%)</title><rect x="248.0" y="1011.0" width="3.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="251.0" y="1022.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.28%)</title><rect x="248.0" y="995.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="251.0" y="1006.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.28%)</title><rect x="248.0" y="979.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="251.0" y="990.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="248.0" y="963.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="251.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (1 samples, 0.28%)</title><rect x="251.3" y="1107.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.28%)</title><rect x="251.3" y="1091.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.28%)</title><rect x="251.3" y="1075.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 6.44%)</title><rect x="254.6" y="1123.0" width="76.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.6" y="1134.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (22 samples, 6.16%)</title><rect x="257.9" y="1107.0" width="72.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.9" y="1118.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 4.48%)</title><rect x="261.2" y="1091.0" width="52.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.2" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.28%)</title><rect x="264.5" y="1075.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.56%)</title><rect x="267.8" y="1075.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.56%)</title><rect x="267.8" y="1059.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.56%)</title><rect x="267.8" y="1043.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.8" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.28%)</title><rect x="267.8" y="1027.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="270.8" y="1038.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="271.1" y="1027.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="274.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.28%)</title><rect x="274.4" y="1075.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.28%)</title><rect x="274.4" y="1059.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.28%)</title><rect x="277.7" y="1075.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="277.7" y="1059.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="277.7" y="1043.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="277.7" y="1027.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.7" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.28%)</title><rect x="277.7" y="1011.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.7" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.28%)</title><rect x="277.7" y="995.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="280.7" y="1006.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.28%)</title><rect x="277.7" y="979.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 2.80%)</title><rect x="281.0" y="1075.0" width="33.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="1086.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 2.80%)</title><rect x="281.0" y="1059.0" width="33.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.0" y="1070.0">jd..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.28%)</title><rect x="281.0" y="1043.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="284.0" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 1.12%)</title><rect x="284.3" y="1043.0" width="13.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="287.3" y="1054.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.28%)</title><rect x="287.6" y="1027.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="290.6" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.56%)</title><rect x="291.0" y="1027.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="294.0" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.28%)</title><rect x="294.3" y="1011.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="297.3" y="1022.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.28%)</title><rect x="294.3" y="995.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="297.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.40%)</title><rect x="297.6" y="1043.0" width="16.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="300.6" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (5 samples, 1.40%)</title><rect x="297.6" y="1027.0" width="16.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="300.6" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.84%)</title><rect x="304.2" y="1011.0" width="9.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="307.2" y="1022.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.84%)</title><rect x="304.2" y="995.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="307.2" y="1006.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.84%)</title><rect x="304.2" y="979.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="307.2" y="990.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.84%)</title><rect x="304.2" y="963.0" width="9.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="307.2" y="974.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.84%)</title><rect x="304.2" y="947.0" width="9.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="307.2" y="958.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.84%)</title><rect x="304.2" y="931.0" width="9.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="307.2" y="942.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.56%)</title><rect x="307.5" y="915.0" width="6.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.5" y="926.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.28%)</title><rect x="310.8" y="899.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="313.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="314.1" y="1091.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.28%)</title><rect x="314.1" y="1075.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.56%)</title><rect x="317.4" y="1091.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.56%)</title><rect x="317.4" y="1075.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.28%)</title><rect x="317.4" y="1059.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.28%)</title><rect x="317.4" y="1043.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.4" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.205] (1 samples, 0.28%)</title><rect x="317.4" y="1027.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="320.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.28%)</title><rect x="320.7" y="1059.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.28%)</title><rect x="320.7" y="1043.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.28%)</title><rect x="320.7" y="1027.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.56%)</title><rect x="324.0" y="1091.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.56%)</title><rect x="324.0" y="1075.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.56%)</title><rect x="324.0" y="1059.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.56%)</title><rect x="324.0" y="1043.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.0" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.56%)</title><rect x="324.0" y="1027.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.0" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.56%)</title><rect x="324.0" y="1011.0" width="6.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="327.0" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.56%)</title><rect x="324.0" y="995.0" width="6.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="327.0" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.56%)</title><rect x="324.0" y="979.0" width="6.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="327.0" y="990.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.56%)</title><rect x="324.0" y="963.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="327.0" y="974.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.56%)</title><rect x="324.0" y="947.0" width="6.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="327.0" y="958.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.56%)</title><rect x="324.0" y="931.0" width="6.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="327.0" y="942.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.56%)</title><rect x="324.0" y="915.0" width="6.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="327.0" y="926.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.56%)</title><rect x="324.0" y="899.0" width="6.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="327.0" y="910.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.56%)</title><rect x="324.0" y="883.0" width="6.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="327.0" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (181 samples, 50.70%)</title><rect x="330.6" y="1171.0" width="598.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.6" y="1182.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7 samples, 1.96%)</title><rect x="337.2" y="1155.0" width="23.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.2" y="1166.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (6 samples, 1.68%)</title><rect x="337.2" y="1139.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.40%)</title><rect x="337.2" y="1123.0" width="16.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="340.2" y="1134.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.28%)</title><rect x="337.2" y="1107.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="340.2" y="1118.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 1.12%)</title><rect x="340.5" y="1107.0" width="13.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="343.5" y="1118.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.12%)</title><rect x="340.5" y="1091.0" width="13.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="343.5" y="1102.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.12%)</title><rect x="340.5" y="1075.0" width="13.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="343.5" y="1086.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.84%)</title><rect x="340.5" y="1059.0" width="9.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="343.5" y="1070.0"></text>
</g>
<g>
<title>do_epoll_wait (3 samples, 0.84%)</title><rect x="340.5" y="1043.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="343.5" y="1054.0"></text>
</g>
<g>
<title>ep_poll (3 samples, 0.84%)</title><rect x="340.5" y="1027.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="343.5" y="1038.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.56%)</title><rect x="340.5" y="1011.0" width="6.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="343.5" y="1022.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.56%)</title><rect x="340.5" y="995.0" width="6.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="343.5" y="1006.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.28%)</title><rect x="340.5" y="979.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="343.5" y="990.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.28%)</title><rect x="343.8" y="979.0" width="3.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="346.8" y="990.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.28%)</title><rect x="347.1" y="1011.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="350.1" y="1022.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.28%)</title><rect x="347.1" y="995.0" width="3.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="350.1" y="1006.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.28%)</title><rect x="347.1" y="979.0" width="3.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="350.1" y="990.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.28%)</title><rect x="350.4" y="1059.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="353.4" y="1070.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.28%)</title><rect x="350.4" y="1043.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="353.4" y="1054.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.28%)</title><rect x="353.8" y="1123.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="356.8" y="1134.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.28%)</title><rect x="357.1" y="1139.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="360.1" y="1150.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.28%)</title><rect x="357.1" y="1123.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="360.1" y="1134.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.28%)</title><rect x="357.1" y="1107.0" width="3.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="360.1" y="1118.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.28%)</title><rect x="357.1" y="1091.0" width="3.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="360.1" y="1102.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="357.1" y="1075.0" width="3.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="360.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (172 samples, 48.18%)</title><rect x="360.4" y="1155.0" width="568.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.4" y="1166.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (172 samples, 48.18%)</title><rect x="360.4" y="1139.0" width="568.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.4" y="1150.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (163 samples, 45.66%)</title><rect x="360.4" y="1123.0" width="538.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.4" y="1134.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (160 samples, 44.82%)</title><rect x="360.4" y="1107.0" width="528.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.4" y="1118.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (160 samples, 44.82%)</title><rect x="360.4" y="1091.0" width="528.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.4" y="1102.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (158 samples, 44.26%)</title><rect x="363.7" y="1075.0" width="522.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.7" y="1086.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (26 samples, 7.28%)</title><rect x="363.7" y="1059.0" width="85.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.7" y="1070.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (26 samples, 7.28%)</title><rect x="363.7" y="1043.0" width="85.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.7" y="1054.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 7.28%)</title><rect x="363.7" y="1027.0" width="85.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.7" y="1038.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 7.28%)</title><rect x="363.7" y="1011.0" width="85.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.7" y="1022.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 7.28%)</title><rect x="363.7" y="995.0" width="85.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.7" y="1006.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (26 samples, 7.28%)</title><rect x="363.7" y="979.0" width="85.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.7" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.28%)</title><rect x="363.7" y="963.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="366.7" y="974.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.28%)</title><rect x="363.7" y="947.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="366.7" y="958.0"></text>
</g>
<g>
<title>__libc_send (25 samples, 7.00%)</title><rect x="367.0" y="963.0" width="82.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="370.0" y="974.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 7.00%)</title><rect x="367.0" y="947.0" width="82.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="370.0" y="958.0">entry_SYS..</text>
</g>
<g>
<title>do_syscall_64 (25 samples, 7.00%)</title><rect x="367.0" y="931.0" width="82.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="370.0" y="942.0">do_syscal..</text>
</g>
<g>
<title>__x64_sys_sendto (25 samples, 7.00%)</title><rect x="367.0" y="915.0" width="82.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="370.0" y="926.0">__x64_sys..</text>
</g>
<g>
<title>__sys_sendto (24 samples, 6.72%)</title><rect x="367.0" y="899.0" width="79.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="370.0" y="910.0">__sys_sen..</text>
</g>
<g>
<title>sock_sendmsg (24 samples, 6.72%)</title><rect x="367.0" y="883.0" width="79.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.0" y="894.0">sock_send..</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.28%)</title><rect x="367.0" y="867.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="370.0" y="878.0"></text>
</g>
<g>
<title>inet6_sendmsg (23 samples, 6.44%)</title><rect x="370.3" y="867.0" width="76.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="373.3" y="878.0">inet6_se..</text>
</g>
<g>
<title>tcp_sendmsg (23 samples, 6.44%)</title><rect x="370.3" y="851.0" width="76.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="373.3" y="862.0">tcp_send..</text>
</g>
<g>
<title>tcp_sendmsg_locked (23 samples, 6.44%)</title><rect x="370.3" y="835.0" width="76.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="373.3" y="846.0">tcp_send..</text>
</g>
<g>
<title>check_stack_object (1 samples, 0.28%)</title><rect x="373.6" y="819.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="376.6" y="830.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.28%)</title><rect x="376.9" y="819.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="379.9" y="830.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.28%)</title><rect x="376.9" y="803.0" width="3.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="379.9" y="814.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.28%)</title><rect x="380.2" y="819.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="383.2" y="830.0"></text>
</g>
<g>
<title>tcp_push (18 samples, 5.04%)</title><rect x="383.5" y="819.0" width="59.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.5" y="830.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (17 samples, 4.76%)</title><rect x="383.5" y="803.0" width="56.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="386.5" y="814.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (17 samples, 4.76%)</title><rect x="383.5" y="787.0" width="56.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="386.5" y="798.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (16 samples, 4.48%)</title><rect x="383.5" y="771.0" width="52.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="386.5" y="782.0">__tcp..</text>
</g>
<g>
<title>ip_queue_xmit (14 samples, 3.92%)</title><rect x="390.1" y="755.0" width="46.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="393.1" y="766.0">ip_q..</text>
</g>
<g>
<title>__ip_queue_xmit (14 samples, 3.92%)</title><rect x="390.1" y="739.0" width="46.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="393.1" y="750.0">__ip..</text>
</g>
<g>
<title>ip_local_out (14 samples, 3.92%)</title><rect x="390.1" y="723.0" width="46.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="393.1" y="734.0">ip_l..</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.56%)</title><rect x="390.1" y="707.0" width="6.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="393.1" y="718.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.56%)</title><rect x="390.1" y="691.0" width="6.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="393.1" y="702.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (2 samples, 0.56%)</title><rect x="390.1" y="675.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="393.1" y="686.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.56%)</title><rect x="390.1" y="659.0" width="6.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="393.1" y="670.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.28%)</title><rect x="393.4" y="643.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="396.4" y="654.0"></text>
</g>
<g>
<title>ip_output (12 samples, 3.36%)</title><rect x="396.7" y="707.0" width="39.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="399.7" y="718.0">ip_..</text>
</g>
<g>
<title>ip_finish_output (11 samples, 3.08%)</title><rect x="396.7" y="691.0" width="36.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="399.7" y="702.0">ip_..</text>
</g>
<g>
<title>__ip_finish_output (11 samples, 3.08%)</title><rect x="396.7" y="675.0" width="36.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="399.7" y="686.0">__i..</text>
</g>
<g>
<title>ip_finish_output2 (11 samples, 3.08%)</title><rect x="396.7" y="659.0" width="36.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="399.7" y="670.0">ip_..</text>
</g>
<g>
<title>__local_bh_enable_ip (10 samples, 2.80%)</title><rect x="396.7" y="643.0" width="33.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="399.7" y="654.0">__..</text>
</g>
<g>
<title>do_softirq.part.20 (10 samples, 2.80%)</title><rect x="396.7" y="627.0" width="33.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="399.7" y="638.0">do..</text>
</g>
<g>
<title>do_softirq_own_stack (10 samples, 2.80%)</title><rect x="396.7" y="611.0" width="33.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="399.7" y="622.0">do..</text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 2.80%)</title><rect x="396.7" y="595.0" width="33.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="399.7" y="606.0">__..</text>
</g>
<g>
<title>net_rx_action (10 samples, 2.80%)</title><rect x="396.7" y="579.0" width="33.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="399.7" y="590.0">ne..</text>
</g>
<g>
<title>process_backlog (10 samples, 2.80%)</title><rect x="396.7" y="563.0" width="33.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="399.7" y="574.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb (10 samples, 2.80%)</title><rect x="396.7" y="547.0" width="33.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="399.7" y="558.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (10 samples, 2.80%)</title><rect x="396.7" y="531.0" width="33.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="399.7" y="542.0">__..</text>
</g>
<g>
<title>ip_rcv (10 samples, 2.80%)</title><rect x="396.7" y="515.0" width="33.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="399.7" y="526.0">ip..</text>
</g>
<g>
<title>ip_rcv_finish (10 samples, 2.80%)</title><rect x="396.7" y="499.0" width="33.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="399.7" y="510.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (10 samples, 2.80%)</title><rect x="396.7" y="483.0" width="33.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="399.7" y="494.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (10 samples, 2.80%)</title><rect x="396.7" y="467.0" width="33.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="399.7" y="478.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (10 samples, 2.80%)</title><rect x="396.7" y="451.0" width="33.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="399.7" y="462.0">ip..</text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 2.80%)</title><rect x="396.7" y="435.0" width="33.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="399.7" y="446.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.28%)</title><rect x="396.7" y="419.0" width="3.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="399.7" y="430.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (9 samples, 2.52%)</title><rect x="400.0" y="419.0" width="29.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="403.0" y="430.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (9 samples, 2.52%)</title><rect x="400.0" y="403.0" width="29.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="403.0" y="414.0">tc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.28%)</title><rect x="400.0" y="387.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="403.0" y="398.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.28%)</title><rect x="400.0" y="371.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="403.0" y="382.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.28%)</title><rect x="400.0" y="355.0" width="3.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="403.0" y="366.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.28%)</title><rect x="400.0" y="339.0" width="3.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="403.0" y="350.0"></text>
</g>
<g>
<title>tcp_ack (4 samples, 1.12%)</title><rect x="403.3" y="387.0" width="13.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="406.3" y="398.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.56%)</title><rect x="409.9" y="371.0" width="6.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="412.9" y="382.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.56%)</title><rect x="409.9" y="355.0" width="6.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="412.9" y="366.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.56%)</title><rect x="409.9" y="339.0" width="6.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="412.9" y="350.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.56%)</title><rect x="409.9" y="323.0" width="6.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="412.9" y="334.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.28%)</title><rect x="416.6" y="387.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="419.6" y="398.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.84%)</title><rect x="419.9" y="387.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="422.9" y="398.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.84%)</title><rect x="419.9" y="371.0" width="9.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="422.9" y="382.0"></text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.84%)</title><rect x="419.9" y="355.0" width="9.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="422.9" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.84%)</title><rect x="419.9" y="339.0" width="9.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="422.9" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.84%)</title><rect x="419.9" y="323.0" width="9.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="422.9" y="334.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.28%)</title><rect x="429.8" y="643.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="432.8" y="654.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.28%)</title><rect x="429.8" y="627.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="432.8" y="638.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.28%)</title><rect x="433.1" y="691.0" width="3.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="436.1" y="702.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.28%)</title><rect x="433.1" y="675.0" width="3.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="436.1" y="686.0"></text>
</g>
<g>
<title>nf_confirm?[nf_conntrack] (1 samples, 0.28%)</title><rect x="433.1" y="659.0" width="3.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="436.1" y="670.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (1 samples, 0.28%)</title><rect x="433.1" y="643.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="436.1" y="654.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.28%)</title><rect x="436.4" y="771.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="439.4" y="782.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.28%)</title><rect x="439.7" y="803.0" width="3.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="442.7" y="814.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.28%)</title><rect x="443.0" y="819.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="446.0" y="830.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.28%)</title><rect x="443.0" y="803.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="446.0" y="814.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.28%)</title><rect x="446.3" y="899.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="449.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (132 samples, 36.97%)</title><rect x="449.6" y="1059.0" width="436.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="452.6" y="1070.0">ru/mail/polis/service/stasyanoi/CustomServer.put</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.28%)</title><rect x="452.9" y="1043.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.28%)</title><rect x="452.9" y="1027.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (40 samples, 11.20%)</title><rect x="456.2" y="1043.0" width="132.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.2" y="1054.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (40 samples, 11.20%)</title><rect x="456.2" y="1027.0" width="132.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.2" y="1038.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (40 samples, 11.20%)</title><rect x="456.2" y="1011.0" width="132.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.2" y="1022.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (40 samples, 11.20%)</title><rect x="456.2" y="995.0" width="132.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.2" y="1006.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="456.2" y="979.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.28%)</title><rect x="456.2" y="963.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (39 samples, 10.92%)</title><rect x="459.5" y="979.0" width="128.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.5" y="990.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (39 samples, 10.92%)</title><rect x="459.5" y="963.0" width="128.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.5" y="974.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (39 samples, 10.92%)</title><rect x="459.5" y="947.0" width="128.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.5" y="958.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (36 samples, 10.08%)</title><rect x="459.5" y="931.0" width="119.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.5" y="942.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.84%)</title><rect x="578.5" y="931.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.5" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.84%)</title><rect x="578.5" y="915.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.5" y="926.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.28%)</title><rect x="578.5" y="899.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="581.5" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.28%)</title><rect x="578.5" y="883.0" width="3.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="581.5" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.56%)</title><rect x="581.8" y="899.0" width="6.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="584.8" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.56%)</title><rect x="581.8" y="883.0" width="6.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="584.8" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.56%)</title><rect x="581.8" y="867.0" width="6.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="584.8" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.28%)</title><rect x="585.1" y="851.0" width="3.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="588.1" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.28%)</title><rect x="585.1" y="835.0" width="3.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="588.1" y="846.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.28%)</title><rect x="585.1" y="819.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="588.1" y="830.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.28%)</title><rect x="585.1" y="803.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="588.1" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.28%)</title><rect x="585.1" y="787.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="588.1" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.28%)</title><rect x="585.1" y="771.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="588.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.awaitUntilReady (90 samples, 25.21%)</title><rect x="588.4" y="1043.0" width="297.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.4" y="1054.0">ru/mail/polis/service/stasyanoi/CustomSe..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.28%)</title><rect x="885.9" y="1075.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="885.9" y="1059.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="888.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="885.9" y="1043.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.56%)</title><rect x="889.2" y="1107.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.28%)</title><rect x="889.2" y="1091.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="892.2" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.28%)</title><rect x="892.5" y="1091.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (1 samples, 0.28%)</title><rect x="895.8" y="1107.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.8" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 2.52%)</title><rect x="899.1" y="1123.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="902.1" y="1134.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 2.52%)</title><rect x="899.1" y="1107.0" width="29.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="902.1" y="1118.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.28%)</title><rect x="899.1" y="1091.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="902.1" y="1102.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.28%)</title><rect x="899.1" y="1075.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="902.1" y="1086.0"></text>
</g>
<g>
<title>__GI___recv (7 samples, 1.96%)</title><rect x="902.4" y="1091.0" width="23.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="905.4" y="1102.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.68%)</title><rect x="905.7" y="1075.0" width="19.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="908.7" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 1.68%)</title><rect x="905.7" y="1059.0" width="19.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="908.7" y="1070.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 1.68%)</title><rect x="905.7" y="1043.0" width="19.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="908.7" y="1054.0"></text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 1.68%)</title><rect x="905.7" y="1027.0" width="19.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="908.7" y="1038.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 1.40%)</title><rect x="905.7" y="1011.0" width="16.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="908.7" y="1022.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.28%)</title><rect x="905.7" y="995.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="908.7" y="1006.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.28%)</title><rect x="905.7" y="979.0" width="3.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="908.7" y="990.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.28%)</title><rect x="905.7" y="963.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="908.7" y="974.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 1.12%)</title><rect x="909.0" y="995.0" width="13.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="912.0" y="1006.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.84%)</title><rect x="912.4" y="979.0" width="9.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="915.4" y="990.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.84%)</title><rect x="912.4" y="963.0" width="9.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="915.4" y="974.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.84%)</title><rect x="912.4" y="947.0" width="9.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="915.4" y="958.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.56%)</title><rect x="915.7" y="931.0" width="6.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="918.7" y="942.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.56%)</title><rect x="915.7" y="915.0" width="6.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="918.7" y="926.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.28%)</title><rect x="922.3" y="1011.0" width="3.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="925.3" y="1022.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.28%)</title><rect x="922.3" y="995.0" width="3.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="925.3" y="1006.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.28%)</title><rect x="922.3" y="979.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="925.3" y="990.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.28%)</title><rect x="922.3" y="963.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="925.3" y="974.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.28%)</title><rect x="925.6" y="1091.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="928.6" y="1102.0"></text>
</g>
<g>
<title>start_thread (79 samples, 22.13%)</title><rect x="928.9" y="1171.0" width="261.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="931.9" y="1182.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (79 samples, 22.13%)</title><rect x="928.9" y="1155.0" width="261.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="931.9" y="1166.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (79 samples, 22.13%)</title><rect x="928.9" y="1139.0" width="261.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.9" y="1150.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.28%)</title><rect x="928.9" y="1123.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.9" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.28%)</title><rect x="928.9" y="1107.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.9" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.28%)</title><rect x="928.9" y="1091.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.9" y="1102.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.28%)</title><rect x="928.9" y="1075.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="931.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 21.85%)</title><rect x="932.2" y="1123.0" width="257.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.2" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (77 samples, 21.57%)</title><rect x="932.2" y="1107.0" width="254.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.2" y="1118.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 21.01%)</title><rect x="935.5" y="1091.0" width="247.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.5" y="1102.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (70 samples, 19.61%)</title><rect x="935.5" y="1075.0" width="231.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.5" y="1086.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (70 samples, 19.61%)</title><rect x="935.5" y="1059.0" width="231.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.5" y="1070.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 11.20%)</title><rect x="935.5" y="1043.0" width="132.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.5" y="1054.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.56%)</title><rect x="935.5" y="1027.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.5" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.56%)</title><rect x="935.5" y="1011.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.5" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.56%)</title><rect x="935.5" y="995.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.5" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.28%)</title><rect x="938.8" y="979.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.8" y="990.0"></text>
</g>
<g>
<title>immPOper::constant_reloc() const (1 samples, 0.28%)</title><rect x="938.8" y="963.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.8" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.56%)</title><rect x="942.1" y="1027.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.56%)</title><rect x="942.1" y="1011.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.28%)</title><rect x="945.4" y="995.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.28%)</title><rect x="945.4" y="979.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.4" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.28%)</title><rect x="945.4" y="963.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="948.4" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.28%)</title><rect x="948.7" y="1027.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.7" y="1038.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.28%)</title><rect x="948.7" y="1011.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.12%)</title><rect x="952.0" y="1027.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.12%)</title><rect x="952.0" y="1011.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="955.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.84%)</title><rect x="952.0" y="995.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="955.0" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.28%)</title><rect x="955.3" y="979.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.28%)</title><rect x="958.6" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.6" y="990.0"></text>
</g>
<g>
<title>TypeKlassPtr::make(TypePtr::PTR, ciKlass*, int) (1 samples, 0.28%)</title><rect x="958.6" y="963.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.6" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.28%)</title><rect x="958.6" y="947.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="961.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.28%)</title><rect x="961.9" y="995.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.9" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.28%)</title><rect x="961.9" y="979.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 8.68%)</title><rect x="965.2" y="1027.0" width="102.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="968.2" y="1038.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="965.2" y="1011.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="968.5" y="1011.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="968.5" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="971.8" y="1011.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="971.8" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.40%)</title><rect x="975.2" y="1011.0" width="16.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.2" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.28%)</title><rect x="988.4" y="995.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.24%)</title><rect x="991.7" y="1011.0" width="26.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.7" y="1022.0">P..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.28%)</title><rect x="998.3" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.28%)</title><rect x="1001.6" y="995.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.6" y="1006.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.28%)</title><rect x="1001.6" y="979.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.84%)</title><rect x="1004.9" y="995.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.56%)</title><rect x="1008.2" y="979.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.2" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.28%)</title><rect x="1014.8" y="995.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1017.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.28%)</title><rect x="1018.1" y="1011.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.28%)</title><rect x="1021.4" y="1011.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 1.96%)</title><rect x="1024.7" y="1011.0" width="23.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.7" y="1022.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 1.40%)</title><rect x="1031.3" y="995.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1044.6" y="979.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.6" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.28%)</title><rect x="1044.6" y="963.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.6" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.56%)</title><rect x="1047.9" y="1011.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.9" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.28%)</title><rect x="1047.9" y="995.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.28%)</title><rect x="1047.9" y="979.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.9" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.28%)</title><rect x="1051.2" y="995.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.2" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.28%)</title><rect x="1051.2" y="979.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.28%)</title><rect x="1054.5" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1054.5" y="995.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.5" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.84%)</title><rect x="1057.8" y="1011.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.8" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.28%)</title><rect x="1057.8" y="995.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.8" y="1006.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.28%)</title><rect x="1057.8" y="979.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1060.8" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.56%)</title><rect x="1061.1" y="995.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1064.4" y="979.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.4" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 5.32%)</title><rect x="1067.7" y="1043.0" width="62.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.7" y="1054.0">Compil..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1067.7" y="1027.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.7" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1067.7" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.7" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.28%)</title><rect x="1067.7" y="995.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.7" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.28%)</title><rect x="1067.7" y="979.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.7" y="990.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (9 samples, 2.52%)</title><rect x="1071.0" y="1027.0" width="29.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.0" y="1038.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (9 samples, 2.52%)</title><rect x="1071.0" y="1011.0" width="29.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.0" y="1022.0">Ph..</text>
</g>
<g>
<title>Compile::cleanup_loop_predicates(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1071.0" y="995.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1071.0" y="979.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.28%)</title><rect x="1071.0" y="963.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.0" y="974.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.28%)</title><rect x="1074.3" y="995.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.56%)</title><rect x="1077.6" y="995.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.120] (1 samples, 0.28%)</title><rect x="1080.9" y="979.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.84%)</title><rect x="1084.2" y="995.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.2" y="1006.0"></text>
</g>
<g>
<title>MinINode::Opcode() const (1 samples, 0.28%)</title><rect x="1084.2" y="979.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.28%)</title><rect x="1087.5" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.28%)</title><rect x="1090.8" y="979.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.28%)</title><rect x="1090.8" y="963.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.28%)</title><rect x="1090.8" y="947.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.28%)</title><rect x="1094.1" y="995.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1097.5" y="995.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1097.5" y="979.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.5" y="990.0"></text>
</g>
<g>
<title>CastIINode::Opcode() const (1 samples, 0.28%)</title><rect x="1097.5" y="963.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.5" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.56%)</title><rect x="1100.8" y="1027.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.8" y="1038.0"></text>
</g>
<g>
<title>HaltNode::Opcode() const (1 samples, 0.28%)</title><rect x="1104.1" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 1.12%)</title><rect x="1107.4" y="1027.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1107.4" y="1011.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1110.7" y="1011.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.28%)</title><rect x="1114.0" y="1011.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1117.3" y="1011.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1117.3" y="995.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.3" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1117.3" y="979.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1117.3" y="963.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.28%)</title><rect x="1120.6" y="1027.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.28%)</title><rect x="1120.6" y="1011.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1123.9" y="1027.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1123.9" y="1011.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.9" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1123.9" y="995.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.155] (1 samples, 0.28%)</title><rect x="1123.9" y="979.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="963.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="947.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="931.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="915.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="899.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="883.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="867.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="851.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="835.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="819.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="803.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="787.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="771.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="755.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="739.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="723.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="707.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.147] (1 samples, 0.28%)</title><rect x="1123.9" y="691.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.9" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1123.9" y="675.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.9" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.28%)</title><rect x="1127.2" y="1027.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1127.2" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1127.2" y="995.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1127.2" y="979.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="990.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.28%)</title><rect x="1130.5" y="1043.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.5" y="1054.0"></text>
</g>
<g>
<title>Dependencies::initialize(ciEnv*) (1 samples, 0.28%)</title><rect x="1133.8" y="1043.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.24%)</title><rect x="1137.1" y="1043.0" width="26.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1054.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.24%)</title><rect x="1137.1" y="1027.0" width="26.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1038.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.24%)</title><rect x="1137.1" y="1011.0" width="26.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.24%)</title><rect x="1137.1" y="995.0" width="26.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.24%)</title><rect x="1137.1" y="979.0" width="26.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.24%)</title><rect x="1137.1" y="963.0" width="26.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="974.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1137.1" y="947.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.12%)</title><rect x="1137.1" y="931.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.12%)</title><rect x="1137.1" y="915.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.12%)</title><rect x="1137.1" y="899.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.12%)</title><rect x="1137.1" y="883.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.12%)</title><rect x="1137.1" y="867.0" width="13.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1137.1" y="851.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.12%)</title><rect x="1137.1" y="835.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.12%)</title><rect x="1137.1" y="819.0" width="13.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.12%)</title><rect x="1137.1" y="803.0" width="13.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.12%)</title><rect x="1137.1" y="787.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1137.1" y="771.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.84%)</title><rect x="1137.1" y="755.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.84%)</title><rect x="1137.1" y="739.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.84%)</title><rect x="1137.1" y="723.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.84%)</title><rect x="1137.1" y="707.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.84%)</title><rect x="1137.1" y="691.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1137.1" y="675.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1137.1" y="659.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1137.1" y="643.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1137.1" y="627.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1137.1" y="611.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1137.1" y="595.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1137.1" y="579.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1137.1" y="563.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1137.1" y="547.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1137.1" y="531.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1137.1" y="515.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1137.1" y="499.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1137.1" y="483.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1137.1" y="467.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1137.1" y="451.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1137.1" y="435.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1137.1" y="419.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1137.1" y="403.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1137.1" y="387.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1137.1" y="371.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1137.1" y="355.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1137.1" y="339.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1137.1" y="323.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1137.1" y="307.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1137.1" y="291.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1137.1" y="275.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1137.1" y="259.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1137.1" y="243.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1137.1" y="227.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1137.1" y="211.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="222.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.28%)</title><rect x="1137.1" y="195.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="206.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.28%)</title><rect x="1137.1" y="179.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1140.4" y="579.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1140.4" y="563.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.4" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1140.4" y="547.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.4" y="558.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1140.4" y="531.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.28%)</title><rect x="1140.4" y="515.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.28%)</title><rect x="1140.4" y="499.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.4" y="510.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.28%)</title><rect x="1140.4" y="483.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1143.7" y="675.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.7" y="686.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.28%)</title><rect x="1143.7" y="659.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.7" y="670.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.28%)</title><rect x="1143.7" y="643.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.7" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.28%)</title><rect x="1143.7" y="627.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.7" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.28%)</title><rect x="1143.7" y="611.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.7" y="622.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.28%)</title><rect x="1143.7" y="595.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.7" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.28%)</title><rect x="1143.7" y="579.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1146.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1147.0" y="771.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1147.0" y="755.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.0" y="766.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.28%)</title><rect x="1147.0" y="739.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1150.3" y="947.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1150.3" y="931.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.12%)</title><rect x="1150.3" y="915.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.12%)</title><rect x="1150.3" y="899.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.12%)</title><rect x="1150.3" y="883.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.12%)</title><rect x="1150.3" y="867.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.12%)</title><rect x="1150.3" y="851.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.12%)</title><rect x="1150.3" y="835.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.12%)</title><rect x="1150.3" y="819.0" width="13.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.12%)</title><rect x="1150.3" y="803.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.12%)</title><rect x="1150.3" y="787.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.12%)</title><rect x="1150.3" y="771.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.84%)</title><rect x="1150.3" y="755.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1150.3" y="739.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1150.3" y="723.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1150.3" y="707.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1150.3" y="691.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1150.3" y="675.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.3" y="686.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.28%)</title><rect x="1150.3" y="659.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.3" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.28%)</title><rect x="1150.3" y="643.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.3" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.28%)</title><rect x="1150.3" y="627.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.3" y="638.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.28%)</title><rect x="1150.3" y="611.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="622.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.28%)</title><rect x="1150.3" y="595.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.3" y="606.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.28%)</title><rect x="1150.3" y="579.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.28%)</title><rect x="1150.3" y="563.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.3" y="574.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.28%)</title><rect x="1150.3" y="547.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1153.6" y="659.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1153.6" y="643.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1153.6" y="627.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1153.6" y="611.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1153.6" y="595.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1153.6" y="579.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1153.6" y="563.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1153.6" y="547.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1153.6" y="531.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1153.6" y="515.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1153.6" y="499.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1153.6" y="483.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1153.6" y="467.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1153.6" y="451.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1153.6" y="435.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="446.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.28%)</title><rect x="1153.6" y="419.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.28%)</title><rect x="1153.6" y="403.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.28%)</title><rect x="1153.6" y="387.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.28%)</title><rect x="1153.6" y="371.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="382.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1153.6" y="355.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="366.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.28%)</title><rect x="1153.6" y="339.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="350.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="1153.6" y="323.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1156.6" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="739.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="723.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="707.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="691.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="675.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="659.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="643.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="611.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="595.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="579.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="563.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="547.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="531.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="515.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="499.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="483.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="467.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="451.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="435.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="419.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="403.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="387.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="371.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="355.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="339.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="323.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="307.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="291.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="275.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="259.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="243.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="227.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="211.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1156.9" y="195.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.9" y="179.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.9" y="163.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1156.9" y="147.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1156.9" y="131.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1156.9" y="115.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="126.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.84] (1 samples, 0.28%)</title><rect x="1156.9" y="99.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.9" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1156.9" y="83.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.9" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1156.9" y="67.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.9" y="78.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.28%)</title><rect x="1156.9" y="51.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.9" y="62.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.28%)</title><rect x="1156.9" y="35.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1159.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1160.3" y="755.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.28%)</title><rect x="1163.6" y="1043.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="1054.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.28%)</title><rect x="1163.6" y="1027.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1163.6" y="1011.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1163.6" y="995.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="1006.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.28%)</title><rect x="1163.6" y="979.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="990.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.28%)</title><rect x="1163.6" y="963.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1166.6" y="974.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 1.40%)</title><rect x="1166.9" y="1075.0" width="16.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 1.40%)</title><rect x="1166.9" y="1059.0" width="16.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 1.40%)</title><rect x="1166.9" y="1043.0" width="16.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 1.40%)</title><rect x="1166.9" y="1027.0" width="16.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.28%)</title><rect x="1166.9" y="1011.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1166.9" y="995.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1166.9" y="979.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1166.9" y="963.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1166.9" y="947.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1166.9" y="931.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1166.9" y="915.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1166.9" y="899.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1166.9" y="883.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1166.9" y="867.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1166.9" y="851.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1166.9" y="835.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>ValueStack::push(ValueType*, Instruction*) (1 samples, 0.28%)</title><rect x="1166.9" y="819.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::append(Instruction* const&amp;) (1 samples, 0.28%)</title><rect x="1166.9" y="803.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.28%)</title><rect x="1170.2" y="1011.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="1022.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.28%)</title><rect x="1170.2" y="995.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.2" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.28%)</title><rect x="1170.2" y="979.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.28%)</title><rect x="1170.2" y="963.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.28%)</title><rect x="1170.2" y="947.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="958.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.28%)</title><rect x="1170.2" y="931.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.2" y="942.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.84%)</title><rect x="1173.5" y="1011.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.5" y="1022.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.28%)</title><rect x="1173.5" y="995.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="1006.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.28%)</title><rect x="1173.5" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="990.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.28%)</title><rect x="1173.5" y="963.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.5" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::grow(int) (1 samples, 0.28%)</title><rect x="1173.5" y="947.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.5" y="958.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="1173.5" y="931.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="942.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="1173.5" y="915.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="1173.5" y="899.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1176.5" y="910.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.56%)</title><rect x="1176.8" y="995.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="1006.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.28%)</title><rect x="1176.8" y="979.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.28%)</title><rect x="1180.1" y="979.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="990.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.28%)</title><rect x="1180.1" y="963.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="974.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.28%)</title><rect x="1183.4" y="1091.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="1102.0"></text>
</g>
<g>
<title>VirtualSpace::reserved_size() const (1 samples, 0.28%)</title><rect x="1183.4" y="1075.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="1086.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.28%)</title><rect x="1186.7" y="1107.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.28%)</title><rect x="1186.7" y="1091.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.28%)</title><rect x="1186.7" y="1075.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.28%)</title><rect x="1186.7" y="1059.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.7" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.28%)</title><rect x="1186.7" y="1043.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="1054.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="1186.7" y="1027.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1038.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.28%)</title><rect x="1186.7" y="1011.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1189.7" y="1022.0"></text>
</g>
</g>
</svg>
