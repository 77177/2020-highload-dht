<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (238 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.42%)</title><rect x="10.0" y="867.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.42%)</title><rect x="10.0" y="851.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 1.26%)</title><rect x="15.0" y="867.0" width="14.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.0" y="878.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3 samples, 1.26%)</title><rect x="15.0" y="851.0" width="14.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.0" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3 samples, 1.26%)</title><rect x="15.0" y="835.0" width="14.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 1.26%)</title><rect x="15.0" y="819.0" width="14.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 1.26%)</title><rect x="15.0" y="803.0" width="14.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 1.26%)</title><rect x="15.0" y="787.0" width="14.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (3 samples, 1.26%)</title><rect x="15.0" y="771.0" width="14.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (3 samples, 1.26%)</title><rect x="15.0" y="755.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.42%)</title><rect x="15.0" y="739.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.42%)</title><rect x="15.0" y="723.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.42%)</title><rect x="15.0" y="707.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.42%)</title><rect x="15.0" y="691.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.42%)</title><rect x="15.0" y="675.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.42%)</title><rect x="15.0" y="659.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.0" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.42%)</title><rect x="15.0" y="643.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.0" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (1 samples, 0.42%)</title><rect x="15.0" y="627.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.0" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (1 samples, 0.42%)</title><rect x="15.0" y="611.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="15.0" y="595.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="15.0" y="579.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.0" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.42%)</title><rect x="15.0" y="563.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.0" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.42%)</title><rect x="15.0" y="547.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.0" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="15.0" y="531.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="18.0" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="15.0" y="515.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.0" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.42%)</title><rect x="15.0" y="499.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.84%)</title><rect x="19.9" y="739.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.84%)</title><rect x="19.9" y="723.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.84%)</title><rect x="19.9" y="707.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.84%)</title><rect x="19.9" y="691.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.84%)</title><rect x="19.9" y="675.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.84%)</title><rect x="19.9" y="659.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (2 samples, 0.84%)</title><rect x="19.9" y="643.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.9" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.84%)</title><rect x="19.9" y="627.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.9" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (2 samples, 0.84%)</title><rect x="19.9" y="611.0" width="9.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.9" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (2 samples, 0.84%)</title><rect x="19.9" y="595.0" width="9.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.84%)</title><rect x="19.9" y="579.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.84%)</title><rect x="19.9" y="563.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.9" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.42%)</title><rect x="19.9" y="547.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.9" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.42%)</title><rect x="19.9" y="531.0" width="5.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="22.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="19.9" y="515.0" width="5.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="22.9" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.42%)</title><rect x="19.9" y="499.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="22.9" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.42%)</title><rect x="24.9" y="547.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.9" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.42%)</title><rect x="24.9" y="531.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="24.9" y="515.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="27.9" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="24.9" y="499.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.9" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.42%)</title><rect x="24.9" y="483.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="27.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (203 samples, 85.29%)</title><rect x="29.8" y="867.0" width="1006.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.8" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (203 samples, 85.29%)</title><rect x="29.8" y="851.0" width="1006.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.8" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (203 samples, 85.29%)</title><rect x="29.8" y="835.0" width="1006.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.8" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="64.5" y="819.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 6.30%)</title><rect x="69.5" y="819.0" width="74.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.5" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 6.30%)</title><rect x="69.5" y="803.0" width="74.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.5" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 3.78%)</title><rect x="69.5" y="787.0" width="44.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.5" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 3.78%)</title><rect x="69.5" y="771.0" width="44.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.5" y="782.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 3.78%)</title><rect x="69.5" y="755.0" width="44.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.5" y="766.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park (3 samples, 1.26%)</title><rect x="79.4" y="739.0" width="14.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="82.4" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.84%)</title><rect x="79.4" y="723.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="82.4" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.42%)</title><rect x="84.4" y="707.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="87.4" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.42%)</title><rect x="89.3" y="723.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="92.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 1.68%)</title><rect x="94.3" y="739.0" width="19.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="97.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.68%)</title><rect x="94.3" y="723.0" width="19.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="97.3" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.84%)</title><rect x="104.2" y="707.0" width="9.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="107.2" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.84%)</title><rect x="104.2" y="691.0" width="9.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="107.2" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.84%)</title><rect x="104.2" y="675.0" width="9.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="107.2" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.84%)</title><rect x="104.2" y="659.0" width="9.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="107.2" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.84%)</title><rect x="104.2" y="643.0" width="9.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="107.2" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.84%)</title><rect x="104.2" y="627.0" width="9.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="107.2" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.84%)</title><rect x="104.2" y="611.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="107.2" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.84%)</title><rect x="104.2" y="595.0" width="9.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="107.2" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.84%)</title><rect x="104.2" y="579.0" width="9.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="107.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.52%)</title><rect x="114.1" y="787.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.1" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.52%)</title><rect x="114.1" y="771.0" width="29.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.1" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.52%)</title><rect x="114.1" y="755.0" width="29.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.1" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.52%)</title><rect x="114.1" y="739.0" width="29.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.1" y="750.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 2.10%)</title><rect x="119.1" y="723.0" width="24.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.1" y="734.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.26%)</title><rect x="119.1" y="707.0" width="14.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="122.1" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.42%)</title><rect x="119.1" y="691.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="122.1" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.42%)</title><rect x="124.0" y="691.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="127.0" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.42%)</title><rect x="129.0" y="691.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="132.0" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.84%)</title><rect x="133.9" y="707.0" width="10.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="136.9" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.84%)</title><rect x="133.9" y="691.0" width="10.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="136.9" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.84%)</title><rect x="133.9" y="675.0" width="10.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="136.9" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.84%)</title><rect x="133.9" y="659.0" width="10.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="136.9" y="670.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.84%)</title><rect x="133.9" y="643.0" width="10.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="136.9" y="654.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.84%)</title><rect x="133.9" y="627.0" width="10.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="136.9" y="638.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.84%)</title><rect x="133.9" y="611.0" width="10.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="136.9" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.84%)</title><rect x="133.9" y="595.0" width="10.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="136.9" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.84%)</title><rect x="133.9" y="579.0" width="10.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="136.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/305791513.run (180 samples, 75.63%)</title><rect x="143.9" y="819.0" width="892.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.9" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/305791513.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (180 samples, 75.63%)</title><rect x="143.9" y="803.0" width="892.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.9" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.putInternal (180 samples, 75.63%)</title><rect x="143.9" y="787.0" width="892.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.9" y="798.0">ru/mail/polis/service/stasyanoi/CustomServer.putInternal</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.84%)</title><rect x="143.9" y="771.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.84%)</title><rect x="143.9" y="755.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.84%)</title><rect x="143.9" y="739.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.9" y="750.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.42%)</title><rect x="143.9" y="723.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="146.9" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.42%)</title><rect x="148.8" y="723.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="151.8" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.42%)</title><rect x="148.8" y="707.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="151.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="148.8" y="691.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="151.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (40 samples, 16.81%)</title><rect x="153.8" y="771.0" width="198.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.8" y="782.0">one/nio/http/HttpSession.s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (40 samples, 16.81%)</title><rect x="153.8" y="755.0" width="198.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.8" y="766.0">one/nio/http/HttpSession.w..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.42%)</title><rect x="153.8" y="739.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.42%)</title><rect x="153.8" y="723.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.42%)</title><rect x="153.8" y="707.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.42%)</title><rect x="153.8" y="691.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.8" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.42%)</title><rect x="153.8" y="675.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.42%)</title><rect x="153.8" y="659.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="156.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.42%)</title><rect x="153.8" y="643.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="156.8" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.42%)</title><rect x="153.8" y="627.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (39 samples, 16.39%)</title><rect x="158.7" y="739.0" width="193.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.7" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (39 samples, 16.39%)</title><rect x="158.7" y="723.0" width="193.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.7" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (39 samples, 16.39%)</title><rect x="158.7" y="707.0" width="193.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.7" y="718.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (39 samples, 16.39%)</title><rect x="158.7" y="691.0" width="193.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.7" y="702.0">one/nio/net/NativeSocket...</text>
</g>
<g>
<title>__libc_send (39 samples, 16.39%)</title><rect x="158.7" y="675.0" width="193.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="161.7" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (39 samples, 16.39%)</title><rect x="158.7" y="659.0" width="193.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="161.7" y="670.0">entry_SYSCALL_64_after_hw..</text>
</g>
<g>
<title>do_syscall_64 (39 samples, 16.39%)</title><rect x="158.7" y="643.0" width="193.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="161.7" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (39 samples, 16.39%)</title><rect x="158.7" y="627.0" width="193.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="161.7" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (39 samples, 16.39%)</title><rect x="158.7" y="611.0" width="193.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="161.7" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (38 samples, 15.97%)</title><rect x="158.7" y="595.0" width="188.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="161.7" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (35 samples, 14.71%)</title><rect x="163.7" y="579.0" width="173.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="166.7" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (34 samples, 14.29%)</title><rect x="168.7" y="563.0" width="168.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="171.7" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (33 samples, 13.87%)</title><rect x="168.7" y="547.0" width="163.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.7" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 1.26%)</title><rect x="168.7" y="531.0" width="14.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="171.7" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.84%)</title><rect x="173.6" y="515.0" width="9.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="176.6" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.84%)</title><rect x="173.6" y="499.0" width="9.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="176.6" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.84%)</title><rect x="173.6" y="483.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="176.6" y="494.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.42%)</title><rect x="178.6" y="467.0" width="4.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="181.6" y="478.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.42%)</title><rect x="183.5" y="531.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="186.5" y="542.0"></text>
</g>
<g>
<title>tcp_push (29 samples, 12.18%)</title><rect x="188.5" y="531.0" width="143.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="191.5" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (28 samples, 11.76%)</title><rect x="193.4" y="515.0" width="138.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="196.4" y="526.0">__tcp_push_pendin..</text>
</g>
<g>
<title>tcp_write_xmit (28 samples, 11.76%)</title><rect x="193.4" y="499.0" width="138.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="196.4" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (27 samples, 11.34%)</title><rect x="193.4" y="483.0" width="133.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="196.4" y="494.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (27 samples, 11.34%)</title><rect x="193.4" y="467.0" width="133.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="196.4" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (27 samples, 11.34%)</title><rect x="193.4" y="451.0" width="133.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="196.4" y="462.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (27 samples, 11.34%)</title><rect x="193.4" y="435.0" width="133.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="196.4" y="446.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 1.68%)</title><rect x="193.4" y="419.0" width="19.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="196.4" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 1.68%)</title><rect x="193.4" y="403.0" width="19.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="196.4" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (3 samples, 1.26%)</title><rect x="193.4" y="387.0" width="14.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="196.4" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 1.26%)</title><rect x="193.4" y="371.0" width="14.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="196.4" y="382.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.42%)</title><rect x="198.4" y="355.0" width="5.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="201.4" y="366.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (1 samples, 0.42%)</title><rect x="203.4" y="355.0" width="4.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="206.4" y="366.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.42%)</title><rect x="208.3" y="387.0" width="5.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="211.3" y="398.0"></text>
</g>
<g>
<title>ip_output (23 samples, 9.66%)</title><rect x="213.3" y="419.0" width="114.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="216.3" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (21 samples, 8.82%)</title><rect x="213.3" y="403.0" width="104.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="216.3" y="414.0">ip_finish_ou..</text>
</g>
<g>
<title>__ip_finish_output (21 samples, 8.82%)</title><rect x="213.3" y="387.0" width="104.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="216.3" y="398.0">__ip_finish_..</text>
</g>
<g>
<title>ip_finish_output2 (21 samples, 8.82%)</title><rect x="213.3" y="371.0" width="104.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="216.3" y="382.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (16 samples, 6.72%)</title><rect x="213.3" y="355.0" width="79.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="216.3" y="366.0">__local_b..</text>
</g>
<g>
<title>do_softirq.part.20 (16 samples, 6.72%)</title><rect x="213.3" y="339.0" width="79.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="216.3" y="350.0">do_softir..</text>
</g>
<g>
<title>do_softirq_own_stack (16 samples, 6.72%)</title><rect x="213.3" y="323.0" width="79.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="216.3" y="334.0">do_softir..</text>
</g>
<g>
<title>__softirqentry_text_start (15 samples, 6.30%)</title><rect x="213.3" y="307.0" width="74.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="216.3" y="318.0">__softir..</text>
</g>
<g>
<title>net_rx_action (15 samples, 6.30%)</title><rect x="213.3" y="291.0" width="74.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="216.3" y="302.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (15 samples, 6.30%)</title><rect x="213.3" y="275.0" width="74.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="216.3" y="286.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (14 samples, 5.88%)</title><rect x="213.3" y="259.0" width="69.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="216.3" y="270.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.42%)</title><rect x="213.3" y="243.0" width="4.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="216.3" y="254.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (13 samples, 5.46%)</title><rect x="218.2" y="243.0" width="64.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="221.2" y="254.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.42%)</title><rect x="218.2" y="227.0" width="5.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="221.2" y="238.0"></text>
</g>
<g>
<title>ip_rcv (12 samples, 5.04%)</title><rect x="223.2" y="227.0" width="59.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="226.2" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (12 samples, 5.04%)</title><rect x="223.2" y="211.0" width="59.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="226.2" y="222.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (12 samples, 5.04%)</title><rect x="223.2" y="195.0" width="59.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="226.2" y="206.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (11 samples, 4.62%)</title><rect x="223.2" y="179.0" width="54.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="226.2" y="190.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (11 samples, 4.62%)</title><rect x="223.2" y="163.0" width="54.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="226.2" y="174.0">ip_pr..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.42%)</title><rect x="223.2" y="147.0" width="5.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="226.2" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 4.20%)</title><rect x="228.2" y="147.0" width="49.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="231.2" y="158.0">tcp_v..</text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 4.20%)</title><rect x="228.2" y="131.0" width="49.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="231.2" y="142.0">tcp_v..</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.42%)</title><rect x="228.2" y="115.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="231.2" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (9 samples, 3.78%)</title><rect x="233.1" y="115.0" width="44.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="236.1" y="126.0">tcp_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.84%)</title><rect x="233.1" y="99.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="236.1" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.84%)</title><rect x="233.1" y="83.0" width="9.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="236.1" y="94.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.42%)</title><rect x="233.1" y="67.0" width="5.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="236.1" y="78.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.42%)</title><rect x="238.1" y="67.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="241.1" y="78.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.42%)</title><rect x="238.1" y="51.0" width="4.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="241.1" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.42%)</title><rect x="238.1" y="35.0" width="4.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="241.1" y="46.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.42%)</title><rect x="243.0" y="99.0" width="5.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="246.0" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.42%)</title><rect x="243.0" y="83.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="246.0" y="94.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.42%)</title><rect x="243.0" y="67.0" width="5.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="246.0" y="78.0"></text>
</g>
<g>
<title>tcp_data_ready (5 samples, 2.10%)</title><rect x="248.0" y="99.0" width="24.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="251.0" y="110.0">t..</text>
</g>
<g>
<title>sock_def_readable (5 samples, 2.10%)</title><rect x="248.0" y="83.0" width="24.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="251.0" y="94.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 1.68%)</title><rect x="252.9" y="67.0" width="19.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="255.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 1.68%)</title><rect x="252.9" y="51.0" width="19.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="255.9" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 1.68%)</title><rect x="252.9" y="35.0" width="19.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="255.9" y="46.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.42%)</title><rect x="272.8" y="99.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="275.8" y="110.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.42%)</title><rect x="277.7" y="179.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="280.7" y="190.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.42%)</title><rect x="277.7" y="163.0" width="5.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="280.7" y="174.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.42%)</title><rect x="282.7" y="259.0" width="4.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.7" y="270.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.42%)</title><rect x="287.6" y="307.0" width="5.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="290.6" y="318.0"></text>
</g>
<g>
<title>dev_queue_xmit (5 samples, 2.10%)</title><rect x="292.6" y="355.0" width="24.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="295.6" y="366.0">d..</text>
</g>
<g>
<title>__dev_queue_xmit (5 samples, 2.10%)</title><rect x="292.6" y="339.0" width="24.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="295.6" y="350.0">_..</text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.84%)</title><rect x="292.6" y="323.0" width="9.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="295.6" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.84%)</title><rect x="292.6" y="307.0" width="9.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="295.6" y="318.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.42%)</title><rect x="297.6" y="291.0" width="4.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="300.6" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.42%)</title><rect x="302.5" y="323.0" width="5.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="305.5" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.84%)</title><rect x="307.5" y="323.0" width="9.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="310.5" y="334.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.84%)</title><rect x="307.5" y="307.0" width="9.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.5" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.84%)</title><rect x="317.4" y="403.0" width="9.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="320.4" y="414.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.42%)</title><rect x="322.4" y="387.0" width="4.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="325.4" y="398.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (1 samples, 0.42%)</title><rect x="322.4" y="371.0" width="4.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="325.4" y="382.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.42%)</title><rect x="327.3" y="483.0" width="5.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="330.3" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.42%)</title><rect x="327.3" y="467.0" width="5.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="330.3" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.42%)</title><rect x="327.3" y="451.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="330.3" y="462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.42%)</title><rect x="327.3" y="435.0" width="5.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="330.3" y="446.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.42%)</title><rect x="327.3" y="419.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="330.3" y="430.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.42%)</title><rect x="332.3" y="547.0" width="4.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="335.3" y="558.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.84%)</title><rect x="337.2" y="579.0" width="9.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="340.2" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.42%)</title><rect x="342.2" y="563.0" width="4.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="345.2" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.42%)</title><rect x="342.2" y="547.0" width="4.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="345.2" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.42%)</title><rect x="347.1" y="595.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="350.1" y="606.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.42%)</title><rect x="347.1" y="579.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="350.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (136 samples, 57.14%)</title><rect x="352.1" y="771.0" width="674.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.1" y="782.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (136 samples, 57.14%)</title><rect x="352.1" y="755.0" width="674.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.1" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (136 samples, 57.14%)</title><rect x="352.1" y="739.0" width="674.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.1" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (114 samples, 47.90%)</title><rect x="352.1" y="723.0" width="565.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="355.1" y="734.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (114 samples, 47.90%)</title><rect x="352.1" y="707.0" width="565.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="355.1" y="718.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.42%)</title><rect x="352.1" y="691.0" width="5.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="355.1" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.84%)</title><rect x="357.1" y="691.0" width="9.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="360.1" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.42%)</title><rect x="357.1" y="675.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="360.1" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="362.0" y="675.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="365.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (110 samples, 46.22%)</title><rect x="367.0" y="691.0" width="545.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="370.0" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (110 samples, 46.22%)</title><rect x="367.0" y="675.0" width="545.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="370.0" y="686.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHan..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (110 samples, 46.22%)</title><rect x="367.0" y="659.0" width="545.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="370.0" y="670.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (107 samples, 44.96%)</title><rect x="367.0" y="643.0" width="530.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="370.0" y="654.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (106 samples, 44.54%)</title><rect x="367.0" y="627.0" width="525.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="370.0" y="638.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBa..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.42%)</title><rect x="367.0" y="611.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="370.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (5 samples, 2.10%)</title><rect x="371.9" y="611.0" width="24.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="374.9" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (5 samples, 2.10%)</title><rect x="371.9" y="595.0" width="24.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="374.9" y="606.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 2.10%)</title><rect x="371.9" y="579.0" width="24.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="374.9" y="590.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (1 samples, 0.42%)</title><rect x="376.9" y="563.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="379.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.42%)</title><rect x="381.8" y="563.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.42%)</title><rect x="381.8" y="547.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.84%)</title><rect x="386.8" y="563.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="389.8" y="574.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.42%)</title><rect x="386.8" y="547.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="389.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.42%)</title><rect x="391.8" y="547.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="394.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.42%)</title><rect x="396.7" y="611.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="399.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.42%)</title><rect x="401.7" y="611.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="404.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::ComputeContentFlags() const (1 samples, 0.42%)</title><rect x="406.6" y="611.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="409.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.42%)</title><rect x="411.6" y="611.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="414.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (16 samples, 6.72%)</title><rect x="416.6" y="611.0" width="79.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="419.6" y="622.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (16 samples, 6.72%)</title><rect x="416.6" y="595.0" width="79.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="419.6" y="606.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (16 samples, 6.72%)</title><rect x="416.6" y="579.0" width="79.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="419.6" y="590.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 6.30%)</title><rect x="421.5" y="563.0" width="74.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.5" y="574.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (15 samples, 6.30%)</title><rect x="421.5" y="547.0" width="74.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="424.5" y="558.0">rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (1 samples, 0.42%)</title><rect x="421.5" y="531.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="424.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (13 samples, 5.46%)</title><rect x="426.5" y="531.0" width="64.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.5" y="542.0">rocksdb..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (13 samples, 5.46%)</title><rect x="426.5" y="515.0" width="64.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="429.5" y="526.0">bool ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (11 samples, 4.62%)</title><rect x="426.5" y="499.0" width="54.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="429.5" y="510.0">/tmp/..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (4 samples, 1.68%)</title><rect x="426.5" y="483.0" width="19.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="429.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 1.68%)</title><rect x="426.5" y="467.0" width="19.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="429.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 1.68%)</title><rect x="426.5" y="451.0" width="19.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="429.5" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 1.26%)</title><rect x="426.5" y="435.0" width="14.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="429.5" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.84%)</title><rect x="431.4" y="419.0" width="9.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="434.4" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="431.4" y="403.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.4" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="436.4" y="403.0" width="4.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="439.4" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.42%)</title><rect x="441.3" y="435.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="444.3" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.42%)</title><rect x="441.3" y="419.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="444.3" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="441.3" y="403.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="444.3" y="414.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.42%)</title><rect x="441.3" y="387.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 2.94%)</title><rect x="446.3" y="483.0" width="34.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.3" y="494.0">ro..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (6 samples, 2.52%)</title><rect x="451.3" y="467.0" width="29.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.3" y="478.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 1.68%)</title><rect x="451.3" y="451.0" width="19.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="454.3" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="451.3" y="435.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="454.3" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 1.26%)</title><rect x="456.2" y="435.0" width="14.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="459.2" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.84%)</title><rect x="456.2" y="419.0" width="9.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="459.2" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.84%)</title><rect x="456.2" y="403.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="459.2" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.42%)</title><rect x="456.2" y="387.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="459.2" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.42%)</title><rect x="461.2" y="387.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="464.2" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.42%)</title><rect x="466.1" y="419.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="469.1" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.42%)</title><rect x="471.1" y="451.0" width="5.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="474.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="471.1" y="435.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="474.1" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="476.1" y="451.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="479.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.84%)</title><rect x="481.0" y="499.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="484.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.84%)</title><rect x="481.0" y="483.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="484.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.42%)</title><rect x="486.0" y="467.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="489.0" y="478.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.42%)</title><rect x="486.0" y="451.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="489.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (1 samples, 0.42%)</title><rect x="490.9" y="531.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.9" y="542.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.42%)</title><rect x="490.9" y="515.0" width="5.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="493.9" y="526.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.42%)</title><rect x="490.9" y="499.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="493.9" y="510.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.42%)</title><rect x="490.9" y="483.0" width="5.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="493.9" y="494.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.42%)</title><rect x="490.9" y="467.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="493.9" y="478.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.42%)</title><rect x="490.9" y="451.0" width="5.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="493.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (44 samples, 18.49%)</title><rect x="495.9" y="611.0" width="218.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.9" y="622.0">rocksdb::WriteBatchInternal::..</text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.42%)</title><rect x="495.9" y="595.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="498.9" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (1 samples, 0.42%)</title><rect x="495.9" y="579.0" width="4.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="498.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (43 samples, 18.07%)</title><rect x="500.8" y="595.0" width="213.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="503.8" y="606.0">rocksdb::WriteBatch::Iterate..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (43 samples, 18.07%)</title><rect x="500.8" y="579.0" width="213.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="503.8" y="590.0">rocksdb::WriteBatchInternal:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 17.65%)</title><rect x="505.8" y="563.0" width="208.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="508.8" y="574.0">rocksdb::MemTableInserter::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (42 samples, 17.65%)</title><rect x="505.8" y="547.0" width="208.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="508.8" y="558.0">rocksdb::MemTableInserter::..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (42 samples, 17.65%)</title><rect x="505.8" y="531.0" width="208.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.8" y="542.0">rocksdb::MemTable::Add(unsi..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (42 samples, 17.65%)</title><rect x="505.8" y="515.0" width="208.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.8" y="526.0">rocksdb::InlineSkipList&lt;roc..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (42 samples, 17.65%)</title><rect x="505.8" y="499.0" width="208.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="508.8" y="510.0">bool rocksdb::InlineSkipLis..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (37 samples, 15.55%)</title><rect x="505.8" y="483.0" width="183.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="508.8" y="494.0">/tmp/librocksdbjni183068..</text>
</g>
<g>
<title>/tmp/librocksdbjni18306887646081853057.so (36 samples, 15.13%)</title><rect x="505.8" y="467.0" width="178.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="508.8" y="478.0">/tmp/librocksdbjni18306..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (36 samples, 15.13%)</title><rect x="505.8" y="451.0" width="178.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="508.8" y="462.0">rocksdb::MemTable::KeyC..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.42%)</title><rect x="505.8" y="435.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="508.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (35 samples, 14.71%)</title><rect x="510.8" y="435.0" width="173.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="513.8" y="446.0">rocksdb::BaseComparato..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 1.26%)</title><rect x="515.7" y="419.0" width="14.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="518.7" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 1.26%)</title><rect x="515.7" y="403.0" width="14.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="518.7" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.42%)</title><rect x="515.7" y="387.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="518.7" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.84%)</title><rect x="520.7" y="387.0" width="9.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="523.7" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="520.7" y="371.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="523.7" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.42%)</title><rect x="520.7" y="355.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.7" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.42%)</title><rect x="525.6" y="371.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="528.6" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (8 samples, 3.36%)</title><rect x="530.6" y="419.0" width="39.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="533.6" y="430.0">JNI..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="535.5" y="403.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.5" y="414.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 2.52%)</title><rect x="540.5" y="403.0" width="29.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="543.5" y="414.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.42%)</title><rect x="540.5" y="387.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="543.5" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 2.10%)</title><rect x="545.5" y="387.0" width="24.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="548.5" y="398.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.42%)</title><rect x="545.5" y="371.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="548.5" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 1.26%)</title><rect x="550.4" y="371.0" width="14.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="553.4" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.42%)</title><rect x="560.3" y="355.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="563.3" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.42%)</title><rect x="565.3" y="371.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="568.3" y="382.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 2.10%)</title><rect x="570.3" y="419.0" width="24.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="573.3" y="430.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.26%)</title><rect x="580.2" y="403.0" width="14.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="583.2" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 1.26%)</title><rect x="580.2" y="387.0" width="14.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="583.2" y="398.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.84%)</title><rect x="585.1" y="371.0" width="9.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="588.1" y="382.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.84%)</title><rect x="585.1" y="355.0" width="9.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="588.1" y="366.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.42%)</title><rect x="590.1" y="339.0" width="4.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="593.1" y="350.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.42%)</title><rect x="590.1" y="323.0" width="4.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="593.1" y="334.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.42%)</title><rect x="590.1" y="307.0" width="4.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="593.1" y="318.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.42%)</title><rect x="590.1" y="291.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="593.1" y="302.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.42%)</title><rect x="590.1" y="275.0" width="4.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="593.1" y="286.0"></text>
</g>
<g>
<title>__lll_unlock_wake (13 samples, 5.46%)</title><rect x="595.0" y="419.0" width="64.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="598.0" y="430.0">__lll_u..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 5.04%)</title><rect x="600.0" y="403.0" width="59.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="603.0" y="414.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (12 samples, 5.04%)</title><rect x="600.0" y="387.0" width="59.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="603.0" y="398.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 5.04%)</title><rect x="600.0" y="371.0" width="59.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="603.0" y="382.0">__x64_..</text>
</g>
<g>
<title>do_futex (12 samples, 5.04%)</title><rect x="600.0" y="355.0" width="59.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="603.0" y="366.0">do_futex</text>
</g>
<g>
<title>futex_wake (12 samples, 5.04%)</title><rect x="600.0" y="339.0" width="59.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="603.0" y="350.0">futex_..</text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.42%)</title><rect x="605.0" y="323.0" width="4.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="608.0" y="334.0"></text>
</g>
<g>
<title>wake_up_q (10 samples, 4.20%)</title><rect x="609.9" y="323.0" width="49.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="612.9" y="334.0">wake_..</text>
</g>
<g>
<title>try_to_wake_up (10 samples, 4.20%)</title><rect x="609.9" y="307.0" width="49.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="612.9" y="318.0">try_t..</text>
</g>
<g>
<title>__lock_text_start (10 samples, 4.20%)</title><rect x="609.9" y="291.0" width="49.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="612.9" y="302.0">__loc..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.84%)</title><rect x="659.5" y="419.0" width="9.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="662.5" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="659.5" y="403.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="662.5" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="664.5" y="403.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="667.5" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.42%)</title><rect x="669.4" y="419.0" width="5.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="672.4" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="674.4" y="419.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="677.4" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.42%)</title><rect x="679.3" y="419.0" width="5.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="682.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="684.3" y="467.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="687.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 2.10%)</title><rect x="689.2" y="483.0" width="24.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.2" y="494.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 2.10%)</title><rect x="689.2" y="467.0" width="24.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="692.2" y="478.0">r..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.68%)</title><rect x="689.2" y="451.0" width="19.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="692.2" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.68%)</title><rect x="689.2" y="435.0" width="19.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="692.2" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.68%)</title><rect x="689.2" y="419.0" width="19.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="692.2" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 1.68%)</title><rect x="689.2" y="403.0" width="19.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="692.2" y="414.0"></text>
</g>
<g>
<title>do_futex (4 samples, 1.68%)</title><rect x="689.2" y="387.0" width="19.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="692.2" y="398.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 1.68%)</title><rect x="689.2" y="371.0" width="19.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="692.2" y="382.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 1.68%)</title><rect x="689.2" y="355.0" width="19.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="692.2" y="366.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 1.68%)</title><rect x="689.2" y="339.0" width="19.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="692.2" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 1.68%)</title><rect x="689.2" y="323.0" width="19.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="692.2" y="334.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.42%)</title><rect x="709.1" y="451.0" width="4.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="712.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="709.1" y="435.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="712.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 5.88%)</title><rect x="714.0" y="611.0" width="69.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.0" y="622.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (8 samples, 3.36%)</title><rect x="783.4" y="611.0" width="39.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="786.4" y="622.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 2.52%)</title><rect x="783.4" y="595.0" width="29.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.4" y="606.0">ro..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.84%)</title><rect x="813.2" y="595.0" width="9.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="816.2" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.84%)</title><rect x="813.2" y="579.0" width="9.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="816.2" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.84%)</title><rect x="813.2" y="563.0" width="9.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="816.2" y="574.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.42%)</title><rect x="818.2" y="547.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="821.2" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.42%)</title><rect x="818.2" y="531.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="821.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.42%)</title><rect x="823.1" y="611.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.42%)</title><rect x="823.1" y="595.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.42%)</title><rect x="828.1" y="611.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="831.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.42%)</title><rect x="833.0" y="611.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.42%)</title><rect x="838.0" y="611.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="841.0" y="622.0"></text>
</g>
<g>
<title>sched_yield (10 samples, 4.20%)</title><rect x="842.9" y="611.0" width="49.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="845.9" y="622.0">sched..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 3.78%)</title><rect x="847.9" y="595.0" width="44.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="850.9" y="606.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 3.78%)</title><rect x="847.9" y="579.0" width="44.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="850.9" y="590.0">do_s..</text>
</g>
<g>
<title>__x64_sys_sched_yield (6 samples, 2.52%)</title><rect x="862.8" y="563.0" width="29.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="865.8" y="574.0">__..</text>
</g>
<g>
<title>do_sched_yield (6 samples, 2.52%)</title><rect x="862.8" y="547.0" width="29.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="865.8" y="558.0">do..</text>
</g>
<g>
<title>schedule (6 samples, 2.52%)</title><rect x="862.8" y="531.0" width="29.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="865.8" y="542.0">sc..</text>
</g>
<g>
<title>__sched_text_start (4 samples, 1.68%)</title><rect x="872.7" y="515.0" width="19.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="875.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.42%)</title><rect x="892.5" y="627.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="895.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.42%)</title><rect x="897.5" y="643.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="900.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (1 samples, 0.42%)</title><rect x="897.5" y="627.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="900.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.42%)</title><rect x="902.4" y="643.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.4" y="654.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) [clone .plt] (1 samples, 0.42%)</title><rect x="907.4" y="643.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.42%)</title><rect x="912.4" y="691.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 2.94%)</title><rect x="917.3" y="723.0" width="34.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="920.3" y="734.0">[u..</text>
</g>
<g>
<title>__GI_write (6 samples, 2.52%)</title><rect x="917.3" y="707.0" width="29.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="920.3" y="718.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.52%)</title><rect x="917.3" y="691.0" width="29.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="920.3" y="702.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.52%)</title><rect x="917.3" y="675.0" width="29.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="920.3" y="686.0">do..</text>
</g>
<g>
<title>__x64_sys_write (6 samples, 2.52%)</title><rect x="917.3" y="659.0" width="29.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="920.3" y="670.0">__..</text>
</g>
<g>
<title>ksys_write (6 samples, 2.52%)</title><rect x="917.3" y="643.0" width="29.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="920.3" y="654.0">ks..</text>
</g>
<g>
<title>vfs_write (6 samples, 2.52%)</title><rect x="917.3" y="627.0" width="29.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="920.3" y="638.0">vf..</text>
</g>
<g>
<title>__vfs_write (6 samples, 2.52%)</title><rect x="917.3" y="611.0" width="29.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="920.3" y="622.0">__..</text>
</g>
<g>
<title>new_sync_write (6 samples, 2.52%)</title><rect x="917.3" y="595.0" width="29.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="920.3" y="606.0">ne..</text>
</g>
<g>
<title>ext4_file_write_iter (6 samples, 2.52%)</title><rect x="917.3" y="579.0" width="29.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="920.3" y="590.0">ex..</text>
</g>
<g>
<title>__generic_file_write_iter (4 samples, 1.68%)</title><rect x="922.3" y="563.0" width="19.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="925.3" y="574.0"></text>
</g>
<g>
<title>generic_perform_write (4 samples, 1.68%)</title><rect x="922.3" y="547.0" width="19.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="925.3" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (2 samples, 0.84%)</title><rect x="922.3" y="531.0" width="9.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="925.3" y="542.0"></text>
</g>
<g>
<title>ext4_block_write_begin (2 samples, 0.84%)</title><rect x="922.3" y="515.0" width="9.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="925.3" y="526.0"></text>
</g>
<g>
<title>ext4_da_get_block_prep (1 samples, 0.42%)</title><rect x="927.2" y="499.0" width="5.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="930.2" y="510.0"></text>
</g>
<g>
<title>ext4_es_lookup_extent (1 samples, 0.42%)</title><rect x="927.2" y="483.0" width="5.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="930.2" y="494.0"></text>
</g>
<g>
<title>percpu_counter_add_batch (1 samples, 0.42%)</title><rect x="927.2" y="467.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="930.2" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.42%)</title><rect x="927.2" y="451.0" width="5.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="930.2" y="462.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.84%)</title><rect x="932.2" y="531.0" width="9.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="935.2" y="542.0"></text>
</g>
<g>
<title>generic_write_end (2 samples, 0.84%)</title><rect x="932.2" y="515.0" width="9.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="935.2" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.84%)</title><rect x="932.2" y="499.0" width="9.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="935.2" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.84%)</title><rect x="932.2" y="483.0" width="9.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="935.2" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.84%)</title><rect x="932.2" y="467.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="935.2" y="478.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.42%)</title><rect x="937.1" y="451.0" width="5.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="940.1" y="462.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.42%)</title><rect x="942.1" y="563.0" width="5.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="945.1" y="574.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.42%)</title><rect x="947.1" y="707.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="950.1" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.42%)</title><rect x="947.1" y="691.0" width="4.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="950.1" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.42%)</title><rect x="947.1" y="675.0" width="4.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="950.1" y="686.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.42%)</title><rect x="952.0" y="723.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="955.0" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.84%)</title><rect x="957.0" y="723.0" width="9.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="960.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.42%)</title><rect x="961.9" y="707.0" width="5.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="964.9" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.42%)</title><rect x="961.9" y="691.0" width="5.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="964.9" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.42%)</title><rect x="961.9" y="675.0" width="5.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="964.9" y="686.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.42%)</title><rect x="961.9" y="659.0" width="5.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="964.9" y="670.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.42%)</title><rect x="961.9" y="643.0" width="5.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="964.9" y="654.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.42%)</title><rect x="961.9" y="627.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="964.9" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.42%)</title><rect x="961.9" y="611.0" width="5.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="964.9" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.42%)</title><rect x="961.9" y="595.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (12 samples, 5.04%)</title><rect x="966.9" y="723.0" width="59.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="969.9" y="734.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (12 samples, 5.04%)</title><rect x="966.9" y="707.0" width="59.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.9" y="718.0">ru/mai..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (12 samples, 5.04%)</title><rect x="966.9" y="691.0" width="59.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.9" y="702.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.84%)</title><rect x="966.9" y="675.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.9" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (10 samples, 4.20%)</title><rect x="976.8" y="675.0" width="49.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.8" y="686.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (10 samples, 4.20%)</title><rect x="976.8" y="659.0" width="49.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.8" y="670.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (10 samples, 4.20%)</title><rect x="976.8" y="643.0" width="49.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="979.8" y="654.0">Java_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.42%)</title><rect x="976.8" y="627.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.8" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.42%)</title><rect x="981.8" y="627.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.8" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.42%)</title><rect x="986.7" y="627.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.7" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (7 samples, 2.94%)</title><rect x="991.7" y="627.0" width="34.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="994.7" y="638.0">jn..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.42%)</title><rect x="996.6" y="611.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.6" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="1001.6" y="611.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.6" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.68%)</title><rect x="1006.6" y="611.0" width="19.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 1.68%)</title><rect x="1006.6" y="595.0" width="19.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.6" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.84%)</title><rect x="1006.6" y="579.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.6" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.42%)</title><rect x="1016.5" y="579.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.5" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.42%)</title><rect x="1021.4" y="579.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1024.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (2 samples, 0.84%)</title><rect x="1026.4" y="771.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1029.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.84%)</title><rect x="1026.4" y="755.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.84%)</title><rect x="1026.4" y="739.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.84%)</title><rect x="1026.4" y="723.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.84%)</title><rect x="1026.4" y="707.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1029.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.84%)</title><rect x="1026.4" y="691.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1029.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.42%)</title><rect x="1026.4" y="675.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.42%)</title><rect x="1026.4" y="659.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.4" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="1026.4" y="643.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1029.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.42%)</title><rect x="1031.3" y="675.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1034.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.42%)</title><rect x="1031.3" y="659.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1034.3" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (31 samples, 13.03%)</title><rect x="1036.3" y="867.0" width="153.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.3" y="878.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.42%)</title><rect x="1061.1" y="851.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1064.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.42%)</title><rect x="1066.1" y="851.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (6 samples, 2.52%)</title><rect x="1071.0" y="851.0" width="29.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.0" y="862.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (6 samples, 2.52%)</title><rect x="1071.0" y="835.0" width="29.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1074.0" y="846.0">on..</text>
</g>
<g>
<title>[unknown] (6 samples, 2.52%)</title><rect x="1071.0" y="819.0" width="29.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1074.0" y="830.0">[u..</text>
</g>
<g>
<title>epoll_wait (6 samples, 2.52%)</title><rect x="1071.0" y="803.0" width="29.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1074.0" y="814.0">ep..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.52%)</title><rect x="1071.0" y="787.0" width="29.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1074.0" y="798.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.52%)</title><rect x="1071.0" y="771.0" width="29.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1074.0" y="782.0">do..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 2.10%)</title><rect x="1071.0" y="755.0" width="24.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1074.0" y="766.0">_..</text>
</g>
<g>
<title>do_epoll_wait (5 samples, 2.10%)</title><rect x="1071.0" y="739.0" width="24.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1074.0" y="750.0">d..</text>
</g>
<g>
<title>ep_poll (5 samples, 2.10%)</title><rect x="1071.0" y="723.0" width="24.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1074.0" y="734.0">e..</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.42%)</title><rect x="1071.0" y="707.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1074.0" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (4 samples, 1.68%)</title><rect x="1076.0" y="707.0" width="19.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1079.0" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (4 samples, 1.68%)</title><rect x="1076.0" y="691.0" width="19.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1079.0" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 1.68%)</title><rect x="1076.0" y="675.0" width="19.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1079.0" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 1.68%)</title><rect x="1076.0" y="659.0" width="19.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1079.0" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 1.68%)</title><rect x="1076.0" y="643.0" width="19.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1079.0" y="654.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.42%)</title><rect x="1095.8" y="755.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1098.8" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.42%)</title><rect x="1095.8" y="739.0" width="5.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1098.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18 samples, 7.56%)</title><rect x="1100.8" y="851.0" width="89.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.8" y="862.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (18 samples, 7.56%)</title><rect x="1100.8" y="835.0" width="89.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1103.8" y="846.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 3.78%)</title><rect x="1100.8" y="819.0" width="44.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.8" y="830.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 1.26%)</title><rect x="1100.8" y="803.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 1.26%)</title><rect x="1100.8" y="787.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1103.8" y="798.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (3 samples, 1.26%)</title><rect x="1100.8" y="771.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.42%)</title><rect x="1100.8" y="755.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1103.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.42%)</title><rect x="1100.8" y="739.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (2 samples, 0.84%)</title><rect x="1105.7" y="755.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1108.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.84%)</title><rect x="1105.7" y="739.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1108.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.84%)</title><rect x="1105.7" y="723.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.84%)</title><rect x="1105.7" y="707.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1108.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.84%)</title><rect x="1105.7" y="691.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1108.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.84%)</title><rect x="1105.7" y="675.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.84%)</title><rect x="1105.7" y="659.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1108.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.84%)</title><rect x="1105.7" y="643.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1108.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.42%)</title><rect x="1110.7" y="627.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1113.7" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.42%)</title><rect x="1110.7" y="611.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1113.7" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.42%)</title><rect x="1110.7" y="595.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1113.7" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.42%)</title><rect x="1110.7" y="579.0" width="4.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1113.7" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.42%)</title><rect x="1110.7" y="563.0" width="4.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.7" y="574.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.42%)</title><rect x="1110.7" y="547.0" width="4.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1113.7" y="558.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.42%)</title><rect x="1110.7" y="531.0" width="4.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1113.7" y="542.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.42%)</title><rect x="1110.7" y="515.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1113.7" y="526.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.42%)</title><rect x="1110.7" y="499.0" width="4.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1113.7" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.42%)</title><rect x="1110.7" y="483.0" width="4.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1113.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 1.26%)</title><rect x="1115.6" y="803.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.42%)</title><rect x="1120.6" y="787.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.42%)</title><rect x="1120.6" y="771.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1123.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.42%)</title><rect x="1120.6" y="755.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1123.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.42%)</title><rect x="1120.6" y="739.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1123.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.42%)</title><rect x="1125.5" y="787.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.42%)</title><rect x="1130.5" y="803.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1133.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.42%)</title><rect x="1130.5" y="787.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1133.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.84%)</title><rect x="1135.5" y="803.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1138.5" y="814.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.42%)</title><rect x="1140.4" y="787.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1143.4" y="798.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.42%)</title><rect x="1140.4" y="771.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1143.4" y="782.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.42%)</title><rect x="1140.4" y="755.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1143.4" y="766.0"></text>
</g>
<g>
<title>mem_cgroup_from_task (1 samples, 0.42%)</title><rect x="1140.4" y="739.0" width="5.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1143.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 3.78%)</title><rect x="1145.4" y="819.0" width="44.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1148.4" y="830.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 3.78%)</title><rect x="1145.4" y="803.0" width="44.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1148.4" y="814.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.42%)</title><rect x="1145.4" y="787.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1148.4" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.42%)</title><rect x="1145.4" y="771.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1148.4" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="1145.4" y="755.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="766.0"></text>
</g>
<g>
<title>__GI___recv (8 samples, 3.36%)</title><rect x="1150.3" y="787.0" width="39.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1153.3" y="798.0">__G..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 2.94%)</title><rect x="1155.3" y="771.0" width="34.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1158.3" y="782.0">en..</text>
</g>
<g>
<title>do_syscall_64 (7 samples, 2.94%)</title><rect x="1155.3" y="755.0" width="34.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1158.3" y="766.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 2.52%)</title><rect x="1155.3" y="739.0" width="29.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1158.3" y="750.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (5 samples, 2.10%)</title><rect x="1155.3" y="723.0" width="24.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1158.3" y="734.0">_..</text>
</g>
<g>
<title>sock_recvmsg (3 samples, 1.26%)</title><rect x="1160.3" y="707.0" width="14.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 0.84%)</title><rect x="1160.3" y="691.0" width="9.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1163.3" y="702.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.42%)</title><rect x="1160.3" y="675.0" width="4.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.42%)</title><rect x="1165.2" y="675.0" width="5.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.42%)</title><rect x="1165.2" y="659.0" width="5.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1168.2" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.42%)</title><rect x="1165.2" y="643.0" width="5.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1168.2" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.42%)</title><rect x="1165.2" y="627.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1168.2" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.42%)</title><rect x="1165.2" y="611.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1168.2" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.42%)</title><rect x="1170.2" y="691.0" width="4.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.42%)</title><rect x="1170.2" y="675.0" width="4.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1173.2" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.42%)</title><rect x="1170.2" y="659.0" width="4.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1173.2" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.42%)</title><rect x="1170.2" y="643.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1173.2" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.42%)</title><rect x="1170.2" y="627.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1173.2" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.42%)</title><rect x="1170.2" y="611.0" width="4.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1173.2" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.42%)</title><rect x="1175.1" y="707.0" width="5.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1178.1" y="718.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.42%)</title><rect x="1175.1" y="691.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1178.1" y="702.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.42%)</title><rect x="1175.1" y="675.0" width="5.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1178.1" y="686.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.42%)</title><rect x="1180.1" y="723.0" width="4.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1183.1" y="734.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.42%)</title><rect x="1185.0" y="739.0" width="5.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1188.0" y="750.0"></text>
</g>
</g>
</svg>
