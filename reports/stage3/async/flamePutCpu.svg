<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (772 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.13%)</title><rect x="10.0" y="867.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.13%)</title><rect x="10.0" y="851.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="10.0" y="835.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="10.0" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="10.0" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.13%)</title><rect x="10.0" y="787.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.13%)</title><rect x="10.0" y="771.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.13%)</title><rect x="10.0" y="755.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.13%)</title><rect x="10.0" y="739.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.13%)</title><rect x="10.0" y="723.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="10.0" y="707.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.13%)</title><rect x="10.0" y="691.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.13%)</title><rect x="10.0" y="675.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.13%)</title><rect x="10.0" y="659.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.13%)</title><rect x="10.0" y="643.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="10.0" y="627.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="10.0" y="611.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.13%)</title><rect x="10.0" y="595.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.13%)</title><rect x="10.0" y="579.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="10.0" y="563.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.13%)</title><rect x="10.0" y="547.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="10.0" y="531.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="10.0" y="515.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>[not_walkable_Java] (8 samples, 1.04%)</title><rect x="11.5" y="867.0" width="12.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2 samples, 0.26%)</title><rect x="11.5" y="851.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="14.5" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.26%)</title><rect x="11.5" y="835.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="11.5" y="819.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="11.5" y="803.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="11.5" y="787.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.26%)</title><rect x="11.5" y="771.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.26%)</title><rect x="11.5" y="755.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.26%)</title><rect x="11.5" y="739.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.26%)</title><rect x="11.5" y="723.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.26%)</title><rect x="11.5" y="707.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="11.5" y="691.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.26%)</title><rect x="11.5" y="675.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.26%)</title><rect x="11.5" y="659.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (2 samples, 0.26%)</title><rect x="11.5" y="643.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.26%)</title><rect x="11.5" y="627.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (2 samples, 0.26%)</title><rect x="11.5" y="611.0" width="3.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.5" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (2 samples, 0.26%)</title><rect x="11.5" y="595.0" width="3.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.26%)</title><rect x="11.5" y="579.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.26%)</title><rect x="11.5" y="563.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="11.5" y="547.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.13%)</title><rect x="11.5" y="531.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="14.5" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="11.5" y="515.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.5" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="11.5" y="499.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="11.5" y="483.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="13.1" y="547.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.1" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.13%)</title><rect x="13.1" y="531.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="16.1" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="13.1" y="515.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="16.1" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="13.1" y="499.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.1" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.13%)</title><rect x="13.1" y="483.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.1" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.13%)</title><rect x="13.1" y="467.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.1" y="478.0"></text>
</g>
<g>
<title>call_stub (6 samples, 0.78%)</title><rect x="14.6" y="851.0" width="9.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 1.30%)</title><rect x="23.8" y="867.0" width="15.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="26.8" y="878.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (8 samples, 1.04%)</title><rect x="23.8" y="851.0" width="12.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="26.8" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (8 samples, 1.04%)</title><rect x="23.8" y="835.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 1.04%)</title><rect x="23.8" y="819.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 1.04%)</title><rect x="23.8" y="803.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 1.04%)</title><rect x="23.8" y="787.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (8 samples, 1.04%)</title><rect x="23.8" y="771.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="26.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (8 samples, 1.04%)</title><rect x="23.8" y="755.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="26.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (8 samples, 1.04%)</title><rect x="23.8" y="739.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (8 samples, 1.04%)</title><rect x="23.8" y="723.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 1.04%)</title><rect x="23.8" y="707.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="26.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 1.04%)</title><rect x="23.8" y="691.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (8 samples, 1.04%)</title><rect x="23.8" y="675.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 1.04%)</title><rect x="23.8" y="659.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="26.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (8 samples, 1.04%)</title><rect x="23.8" y="643.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.8" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (8 samples, 1.04%)</title><rect x="23.8" y="627.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.8" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (8 samples, 1.04%)</title><rect x="23.8" y="611.0" width="12.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="26.8" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (8 samples, 1.04%)</title><rect x="23.8" y="595.0" width="12.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="26.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 1.04%)</title><rect x="23.8" y="579.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="26.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 1.04%)</title><rect x="23.8" y="563.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.8" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="23.8" y="547.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.8" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.13%)</title><rect x="23.8" y="531.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="26.8" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="23.8" y="515.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="26.8" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.13%)</title><rect x="23.8" y="499.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.8" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.91%)</title><rect x="25.3" y="547.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="28.3" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (7 samples, 0.91%)</title><rect x="25.3" y="531.0" width="10.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="28.3" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (7 samples, 0.91%)</title><rect x="25.3" y="515.0" width="10.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="28.3" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.26%)</title><rect x="25.3" y="499.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.65%)</title><rect x="28.3" y="499.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="31.3" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.39%)</title><rect x="29.9" y="483.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="32.9" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.13%)</title><rect x="34.5" y="483.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="37.5" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.13%)</title><rect x="34.5" y="467.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="37.5" y="478.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.26%)</title><rect x="36.0" y="851.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="39.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (684 samples, 88.60%)</title><rect x="39.0" y="867.0" width="1045.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.0" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (684 samples, 88.60%)</title><rect x="39.0" y="851.0" width="1045.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.0" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (684 samples, 88.60%)</title><rect x="39.0" y="835.0" width="1045.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.0" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.39%)</title><rect x="52.8" y="819.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.13%)</title><rect x="57.4" y="819.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (1 samples, 0.13%)</title><rect x="58.9" y="819.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.beforeExecute (2 samples, 0.26%)</title><rect x="60.4" y="819.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (28 samples, 3.63%)</title><rect x="63.5" y="819.0" width="42.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.5" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (28 samples, 3.63%)</title><rect x="63.5" y="803.0" width="42.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.5" y="814.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 2.59%)</title><rect x="63.5" y="787.0" width="30.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.5" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.13%)</title><rect x="65.0" y="771.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.13%)</title><rect x="65.0" y="755.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.0" y="766.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.13%)</title><rect x="65.0" y="739.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="68.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.205] (1 samples, 0.13%)</title><rect x="65.0" y="723.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="68.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.13%)</title><rect x="66.6" y="771.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.13%)</title><rect x="66.6" y="755.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.26%)</title><rect x="68.1" y="771.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.26%)</title><rect x="68.1" y="755.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.26%)</title><rect x="68.1" y="739.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.26%)</title><rect x="68.1" y="723.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="71.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.26%)</title><rect x="68.1" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.1" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.26%)</title><rect x="68.1" y="691.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="71.1" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.26%)</title><rect x="68.1" y="675.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="71.1" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.26%)</title><rect x="68.1" y="659.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="71.1" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.26%)</title><rect x="68.1" y="643.0" width="3.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="71.1" y="654.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.26%)</title><rect x="68.1" y="627.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="71.1" y="638.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.26%)</title><rect x="68.1" y="611.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.1" y="622.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.26%)</title><rect x="68.1" y="595.0" width="3.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="71.1" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.26%)</title><rect x="68.1" y="579.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="71.1" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.26%)</title><rect x="68.1" y="563.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="71.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.13%)</title><rect x="71.1" y="771.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 1.81%)</title><rect x="72.7" y="771.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.7" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 1.81%)</title><rect x="72.7" y="755.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.7" y="766.0">j..</text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.52%)</title><rect x="74.2" y="739.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="77.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.13%)</title><rect x="74.2" y="723.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="77.2" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.39%)</title><rect x="75.7" y="723.0" width="4.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="78.7" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.39%)</title><rect x="75.7" y="707.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="78.7" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.39%)</title><rect x="75.7" y="691.0" width="4.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="78.7" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.26%)</title><rect x="77.3" y="675.0" width="3.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="80.3" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.26%)</title><rect x="77.3" y="659.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="80.3" y="670.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.26%)</title><rect x="77.3" y="643.0" width="3.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="80.3" y="654.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.13%)</title><rect x="78.8" y="627.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="81.8" y="638.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.13%)</title><rect x="78.8" y="611.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="81.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 1.17%)</title><rect x="80.3" y="739.0" width="13.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="83.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (9 samples, 1.17%)</title><rect x="80.3" y="723.0" width="13.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="83.3" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 1.04%)</title><rect x="81.8" y="707.0" width="12.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="84.8" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 1.04%)</title><rect x="81.8" y="691.0" width="12.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="84.8" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.91%)</title><rect x="81.8" y="675.0" width="10.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="84.8" y="686.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.91%)</title><rect x="81.8" y="659.0" width="10.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="84.8" y="670.0"></text>
</g>
<g>
<title>futex_wait (6 samples, 0.78%)</title><rect x="83.4" y="643.0" width="9.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="86.4" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.52%)</title><rect x="84.9" y="627.0" width="6.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="87.9" y="638.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.52%)</title><rect x="84.9" y="611.0" width="6.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="87.9" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.39%)</title><rect x="86.4" y="595.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="89.4" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.26%)</title><rect x="88.0" y="579.0" width="3.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="91.0" y="590.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.13%)</title><rect x="91.0" y="627.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="94.0" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="92.5" y="675.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="95.5" y="686.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.13%)</title><rect x="92.5" y="659.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="95.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.26%)</title><rect x="94.1" y="787.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.26%)</title><rect x="94.1" y="771.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.26%)</title><rect x="94.1" y="755.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.26%)</title><rect x="94.1" y="739.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.26%)</title><rect x="94.1" y="723.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.13%)</title><rect x="95.6" y="707.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.6" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.13%)</title><rect x="95.6" y="691.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="98.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.13%)</title><rect x="95.6" y="675.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="98.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.78%)</title><rect x="97.1" y="787.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.78%)</title><rect x="97.1" y="771.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.78%)</title><rect x="97.1" y="755.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.78%)</title><rect x="97.1" y="739.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.78%)</title><rect x="97.1" y="723.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.1" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.26%)</title><rect x="97.1" y="707.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="100.1" y="718.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.26%)</title><rect x="97.1" y="691.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.1" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.52%)</title><rect x="100.2" y="707.0" width="6.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="103.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.52%)</title><rect x="100.2" y="691.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="103.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.52%)</title><rect x="100.2" y="675.0" width="6.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="103.2" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.52%)</title><rect x="100.2" y="659.0" width="6.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="103.2" y="670.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.52%)</title><rect x="100.2" y="643.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="103.2" y="654.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.52%)</title><rect x="100.2" y="627.0" width="6.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="103.2" y="638.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.52%)</title><rect x="100.2" y="611.0" width="6.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="103.2" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.52%)</title><rect x="100.2" y="595.0" width="6.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="103.2" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.52%)</title><rect x="100.2" y="579.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="103.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/1120605125.run (640 samples, 82.90%)</title><rect x="106.3" y="819.0" width="978.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.3" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/1120605125.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (640 samples, 82.90%)</title><rect x="106.3" y="803.0" width="978.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.3" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.putInternal (640 samples, 82.90%)</title><rect x="106.3" y="787.0" width="978.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.3" y="798.0">ru/mail/polis/service/stasyanoi/CustomServer.putInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (73 samples, 9.46%)</title><rect x="106.3" y="771.0" width="111.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.3" y="782.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.13%)</title><rect x="107.8" y="755.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.13%)</title><rect x="107.8" y="739.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.13%)</title><rect x="107.8" y="723.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (69 samples, 8.94%)</title><rect x="109.4" y="755.0" width="105.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.4" y="766.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.39%)</title><rect x="109.4" y="739.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.13%)</title><rect x="112.4" y="723.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.13%)</title><rect x="112.4" y="707.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="115.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.13%)</title><rect x="112.4" y="691.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="115.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.13%)</title><rect x="112.4" y="675.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.13%)</title><rect x="112.4" y="659.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.4" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 8.55%)</title><rect x="113.9" y="739.0" width="100.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.9" y="750.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 8.55%)</title><rect x="113.9" y="723.0" width="100.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.9" y="734.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.13%)</title><rect x="113.9" y="707.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.9" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (65 samples, 8.42%)</title><rect x="115.5" y="707.0" width="99.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.5" y="718.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (65 samples, 8.42%)</title><rect x="115.5" y="691.0" width="99.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.5" y="702.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.13%)</title><rect x="117.0" y="675.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="120.0" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.13%)</title><rect x="117.0" y="659.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="120.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.13%)</title><rect x="117.0" y="643.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="120.0" y="654.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.13%)</title><rect x="118.5" y="675.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="121.5" y="686.0"></text>
</g>
<g>
<title>__libc_send (62 samples, 8.03%)</title><rect x="120.1" y="675.0" width="94.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="123.1" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (62 samples, 8.03%)</title><rect x="120.1" y="659.0" width="94.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="123.1" y="670.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (62 samples, 8.03%)</title><rect x="120.1" y="643.0" width="94.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="123.1" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (62 samples, 8.03%)</title><rect x="120.1" y="627.0" width="94.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="123.1" y="638.0">__x64_sys_s..</text>
</g>
<g>
<title>__sys_sendto (62 samples, 8.03%)</title><rect x="120.1" y="611.0" width="94.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="123.1" y="622.0">__sys_sendto</text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.13%)</title><rect x="120.1" y="595.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="123.1" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (58 samples, 7.51%)</title><rect x="121.6" y="595.0" width="88.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="124.6" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (56 samples, 7.25%)</title><rect x="121.6" y="579.0" width="85.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="124.6" y="590.0">inet6_send..</text>
</g>
<g>
<title>tcp_sendmsg (56 samples, 7.25%)</title><rect x="121.6" y="563.0" width="85.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="124.6" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (55 samples, 7.12%)</title><rect x="123.1" y="547.0" width="84.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="126.1" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.13%)</title><rect x="123.1" y="531.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="126.1" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (5 samples, 0.65%)</title><rect x="124.6" y="531.0" width="7.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="127.6" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.52%)</title><rect x="126.2" y="515.0" width="6.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="129.2" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.26%)</title><rect x="126.2" y="499.0" width="3.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="129.2" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.26%)</title><rect x="126.2" y="483.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="129.2" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.13%)</title><rect x="127.7" y="467.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="130.7" y="478.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.26%)</title><rect x="129.2" y="499.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="132.2" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.13%)</title><rect x="132.3" y="531.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="135.3" y="542.0"></text>
</g>
<g>
<title>tcp_push (44 samples, 5.70%)</title><rect x="133.8" y="531.0" width="67.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="136.8" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (44 samples, 5.70%)</title><rect x="133.8" y="515.0" width="67.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="136.8" y="526.0">__tcp_p..</text>
</g>
<g>
<title>tcp_small_queue_check.isra.33 (2 samples, 0.26%)</title><rect x="133.8" y="499.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="136.8" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (42 samples, 5.44%)</title><rect x="136.9" y="499.0" width="64.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="139.9" y="510.0">tcp_wri..</text>
</g>
<g>
<title>__tcp_transmit_skb (40 samples, 5.18%)</title><rect x="136.9" y="483.0" width="61.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="139.9" y="494.0">__tcp_..</text>
</g>
<g>
<title>ip_queue_xmit (39 samples, 5.05%)</title><rect x="138.4" y="467.0" width="59.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="141.4" y="478.0">ip_que..</text>
</g>
<g>
<title>__ip_queue_xmit (39 samples, 5.05%)</title><rect x="138.4" y="451.0" width="59.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="141.4" y="462.0">__ip_q..</text>
</g>
<g>
<title>ip_local_out (38 samples, 4.92%)</title><rect x="139.9" y="435.0" width="58.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="142.9" y="446.0">ip_loc..</text>
</g>
<g>
<title>__ip_local_out (7 samples, 0.91%)</title><rect x="139.9" y="419.0" width="10.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="142.9" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.13%)</title><rect x="139.9" y="403.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="142.9" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.78%)</title><rect x="141.5" y="403.0" width="9.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="144.5" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.13%)</title><rect x="143.0" y="387.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.0" y="398.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.13%)</title><rect x="144.5" y="387.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="147.5" y="398.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.13%)</title><rect x="144.5" y="371.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="147.5" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (3 samples, 0.39%)</title><rect x="146.0" y="387.0" width="4.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="149.0" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.39%)</title><rect x="146.0" y="371.0" width="4.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="149.0" y="382.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (2 samples, 0.26%)</title><rect x="146.0" y="355.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="149.0" y="366.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (1 samples, 0.13%)</title><rect x="149.1" y="355.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="152.1" y="366.0"></text>
</g>
<g>
<title>ip_output (31 samples, 4.02%)</title><rect x="150.6" y="419.0" width="47.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="153.6" y="430.0">ip_o..</text>
</g>
<g>
<title>ip_finish_output (31 samples, 4.02%)</title><rect x="150.6" y="403.0" width="47.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="153.6" y="414.0">ip_f..</text>
</g>
<g>
<title>__ip_finish_output (31 samples, 4.02%)</title><rect x="150.6" y="387.0" width="47.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="153.6" y="398.0">__ip..</text>
</g>
<g>
<title>ip_finish_output2 (30 samples, 3.89%)</title><rect x="150.6" y="371.0" width="45.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="153.6" y="382.0">ip_f..</text>
</g>
<g>
<title>__local_bh_enable_ip (27 samples, 3.50%)</title><rect x="153.7" y="355.0" width="41.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="156.7" y="366.0">__l..</text>
</g>
<g>
<title>do_softirq.part.20 (26 samples, 3.37%)</title><rect x="155.2" y="339.0" width="39.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="158.2" y="350.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (24 samples, 3.11%)</title><rect x="158.3" y="323.0" width="36.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="161.3" y="334.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (24 samples, 3.11%)</title><rect x="158.3" y="307.0" width="36.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="161.3" y="318.0">__s..</text>
</g>
<g>
<title>net_rx_action (24 samples, 3.11%)</title><rect x="158.3" y="291.0" width="36.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="161.3" y="302.0">net..</text>
</g>
<g>
<title>process_backlog (23 samples, 2.98%)</title><rect x="159.8" y="275.0" width="35.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="162.8" y="286.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (21 samples, 2.72%)</title><rect x="162.8" y="259.0" width="32.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="165.8" y="270.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (21 samples, 2.72%)</title><rect x="162.8" y="243.0" width="32.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="165.8" y="254.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.13%)</title><rect x="162.8" y="227.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="165.8" y="238.0"></text>
</g>
<g>
<title>ip_rcv (20 samples, 2.59%)</title><rect x="164.4" y="227.0" width="30.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="167.4" y="238.0">ip..</text>
</g>
<g>
<title>ip_rcv_finish (20 samples, 2.59%)</title><rect x="164.4" y="211.0" width="30.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="167.4" y="222.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (20 samples, 2.59%)</title><rect x="164.4" y="195.0" width="30.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="167.4" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (19 samples, 2.46%)</title><rect x="164.4" y="179.0" width="29.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="167.4" y="190.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (18 samples, 2.33%)</title><rect x="164.4" y="163.0" width="27.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="167.4" y="174.0">i..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.13%)</title><rect x="164.4" y="147.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="167.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.13%)</title><rect x="165.9" y="147.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="168.9" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (16 samples, 2.07%)</title><rect x="167.4" y="147.0" width="24.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="170.4" y="158.0">t..</text>
</g>
<g>
<title>tcp_v4_do_rcv (16 samples, 2.07%)</title><rect x="167.4" y="131.0" width="24.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="170.4" y="142.0">t..</text>
</g>
<g>
<title>tcp_rcv_established (16 samples, 2.07%)</title><rect x="167.4" y="115.0" width="24.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="170.4" y="126.0">t..</text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.52%)</title><rect x="169.0" y="99.0" width="6.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="172.0" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.13%)</title><rect x="170.5" y="83.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="173.5" y="94.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.26%)</title><rect x="172.0" y="83.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.0" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.26%)</title><rect x="172.0" y="67.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.0" y="78.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.26%)</title><rect x="172.0" y="51.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="175.0" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.26%)</title><rect x="172.0" y="35.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="175.0" y="46.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.13%)</title><rect x="175.1" y="99.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="178.1" y="110.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.39%)</title><rect x="176.6" y="99.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="179.6" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.13%)</title><rect x="178.1" y="83.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="181.1" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.13%)</title><rect x="179.7" y="83.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="182.7" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (6 samples, 0.78%)</title><rect x="181.2" y="99.0" width="9.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="184.2" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (6 samples, 0.78%)</title><rect x="181.2" y="83.0" width="9.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="184.2" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (6 samples, 0.78%)</title><rect x="181.2" y="67.0" width="9.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="184.2" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.78%)</title><rect x="181.2" y="51.0" width="9.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="184.2" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.78%)</title><rect x="181.2" y="35.0" width="9.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="184.2" y="46.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.13%)</title><rect x="190.4" y="99.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="193.4" y="110.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.13%)</title><rect x="191.9" y="163.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="194.9" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.13%)</title><rect x="193.4" y="179.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="196.4" y="190.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.13%)</title><rect x="193.4" y="163.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="196.4" y="174.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.13%)</title><rect x="194.9" y="355.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="197.9" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.13%)</title><rect x="194.9" y="339.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="197.9" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.13%)</title><rect x="194.9" y="323.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="197.9" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.13%)</title><rect x="194.9" y="307.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="197.9" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.13%)</title><rect x="194.9" y="291.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="197.9" y="302.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.13%)</title><rect x="194.9" y="275.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="197.9" y="286.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.13%)</title><rect x="196.5" y="371.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="199.5" y="382.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.13%)</title><rect x="198.0" y="483.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="201.0" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.13%)</title><rect x="198.0" y="467.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="201.0" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.13%)</title><rect x="198.0" y="451.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="201.0" y="462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.13%)</title><rect x="198.0" y="435.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="201.0" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="198.0" y="419.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="201.0" y="430.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.13%)</title><rect x="199.5" y="483.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="202.5" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.52%)</title><rect x="201.1" y="531.0" width="6.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.1" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.13%)</title><rect x="201.1" y="515.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="204.1" y="526.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.39%)</title><rect x="202.6" y="515.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="205.6" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.13%)</title><rect x="205.6" y="499.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="208.6" y="510.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.26%)</title><rect x="207.2" y="579.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="210.2" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.26%)</title><rect x="207.2" y="563.0" width="3.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="210.2" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.26%)</title><rect x="207.2" y="547.0" width="3.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="210.2" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.39%)</title><rect x="210.2" y="595.0" width="4.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="213.2" y="606.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.26%)</title><rect x="210.2" y="579.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="213.2" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.26%)</title><rect x="210.2" y="563.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="213.2" y="574.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.26%)</title><rect x="210.2" y="547.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="213.2" y="558.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.13%)</title><rect x="213.3" y="579.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="216.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.26%)</title><rect x="214.8" y="755.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="217.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (565 samples, 73.19%)</title><rect x="217.9" y="771.0" width="863.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.9" y="782.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (565 samples, 73.19%)</title><rect x="217.9" y="755.0" width="863.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.9" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (565 samples, 73.19%)</title><rect x="217.9" y="739.0" width="863.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.9" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.13%)</title><rect x="220.9" y="723.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.9" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (445 samples, 57.64%)</title><rect x="222.5" y="723.0" width="680.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.5" y="734.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>malloc@plt (1 samples, 0.13%)</title><rect x="222.5" y="707.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.5" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.13%)</title><rect x="224.0" y="707.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="227.0" y="718.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (443 samples, 57.38%)</title><rect x="225.5" y="707.0" width="677.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="228.5" y="718.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamily..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="228.6" y="691.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="231.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (439 samples, 56.87%)</title><rect x="230.1" y="691.0" width="671.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="233.1" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (439 samples, 56.87%)</title><rect x="230.1" y="675.0" width="671.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="233.1" y="686.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Sli..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (439 samples, 56.87%)</title><rect x="230.1" y="659.0" width="671.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="233.1" y="670.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice c..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.13%)</title><rect x="230.1" y="643.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="233.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (430 samples, 55.70%)</title><rect x="231.6" y="643.0" width="657.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="234.6" y="654.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.13%)</title><rect x="231.6" y="627.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="234.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (426 samples, 55.18%)</title><rect x="233.2" y="627.0" width="651.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="236.2" y="638.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::Wri..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.13%)</title><rect x="237.7" y="611.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="240.7" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.13%)</title><rect x="239.3" y="611.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="242.3" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.26%)</title><rect x="240.8" y="611.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="243.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (6 samples, 0.78%)</title><rect x="243.9" y="611.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="246.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.13%)</title><rect x="243.9" y="595.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="246.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (4 samples, 0.52%)</title><rect x="245.4" y="595.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="248.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.52%)</title><rect x="245.4" y="579.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.4" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="245.4" y="563.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="248.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.13%)</title><rect x="246.9" y="563.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="249.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.26%)</title><rect x="248.4" y="563.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="251.4" y="574.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.13%)</title><rect x="248.4" y="547.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="251.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="250.0" y="547.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="253.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (1 samples, 0.13%)</title><rect x="251.5" y="595.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="254.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.13%)</title><rect x="253.0" y="611.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="256.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (12 samples, 1.55%)</title><rect x="254.6" y="611.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="257.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (11 samples, 1.42%)</title><rect x="254.6" y="595.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="257.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (11 samples, 1.42%)</title><rect x="254.6" y="579.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11 samples, 1.42%)</title><rect x="254.6" y="563.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (11 samples, 1.42%)</title><rect x="254.6" y="547.0" width="16.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.6" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="254.6" y="531.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="257.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 1.30%)</title><rect x="256.1" y="531.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.1" y="542.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (9 samples, 1.17%)</title><rect x="257.6" y="515.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="260.6" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (8 samples, 1.04%)</title><rect x="257.6" y="499.0" width="12.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="260.6" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (5 samples, 0.65%)</title><rect x="257.6" y="483.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="260.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.65%)</title><rect x="257.6" y="467.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="260.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 0.65%)</title><rect x="257.6" y="451.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="260.6" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="257.6" y="435.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="260.6" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.13%)</title><rect x="257.6" y="419.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="260.6" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="257.6" y="403.0" width="1.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="260.6" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="257.6" y="387.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="260.6" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.26%)</title><rect x="259.1" y="435.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="262.1" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.26%)</title><rect x="259.1" y="419.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="262.1" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.26%)</title><rect x="259.1" y="403.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="262.1" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="259.1" y="387.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="262.1" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.13%)</title><rect x="259.1" y="371.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="262.1" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.13%)</title><rect x="259.1" y="355.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="262.1" y="366.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.13%)</title><rect x="260.7" y="387.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="263.7" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.13%)</title><rect x="262.2" y="435.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="265.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.13%)</title><rect x="262.2" y="419.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="263.7" y="435.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="266.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.39%)</title><rect x="265.3" y="483.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="268.3" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="265.3" y="467.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="268.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.26%)</title><rect x="266.8" y="467.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="269.8" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.26%)</title><rect x="266.8" y="451.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.8" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.26%)</title><rect x="266.8" y="435.0" width="3.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="269.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.13%)</title><rect x="266.8" y="419.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="269.8" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="268.3" y="419.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="271.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.13%)</title><rect x="269.8" y="499.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="272.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.13%)</title><rect x="269.8" y="483.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="272.8" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.13%)</title><rect x="269.8" y="467.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="272.8" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.13%)</title><rect x="269.8" y="451.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="272.8" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.13%)</title><rect x="269.8" y="435.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="272.8" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.13%)</title><rect x="269.8" y="419.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="272.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) [clone .plt] (1 samples, 0.13%)</title><rect x="271.4" y="595.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="274.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (297 samples, 38.47%)</title><rect x="272.9" y="611.0" width="454.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="275.9" y="622.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.13%)</title><rect x="272.9" y="595.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="275.9" y="606.0"></text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (1 samples, 0.13%)</title><rect x="274.4" y="595.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="277.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.26%)</title><rect x="276.0" y="595.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.0" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (2 samples, 0.26%)</title><rect x="276.0" y="579.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="279.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (291 samples, 37.69%)</title><rect x="279.0" y="595.0" width="444.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="282.0" y="606.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) c..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (291 samples, 37.69%)</title><rect x="279.0" y="579.0" width="444.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="282.0" y="590.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch cons..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (288 samples, 37.31%)</title><rect x="283.6" y="563.0" width="440.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="286.6" y="574.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slic..</text>
</g>
<g>
<title>__malloc (1 samples, 0.13%)</title><rect x="283.6" y="547.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="286.6" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.13%)</title><rect x="285.1" y="547.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="288.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.13%)</title><rect x="286.7" y="547.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.13%)</title><rect x="288.2" y="547.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="291.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.13%)</title><rect x="289.7" y="547.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="292.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (283 samples, 36.66%)</title><rect x="291.2" y="547.0" width="432.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="294.2" y="558.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb:..</text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.13%)</title><rect x="292.8" y="531.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="295.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.13%)</title><rect x="294.3" y="531.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="297.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (280 samples, 36.27%)</title><rect x="295.8" y="531.0" width="428.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.8" y="542.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, r..</text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="295.8" y="515.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="298.8" y="526.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.13%)</title><rect x="297.4" y="515.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (277 samples, 35.88%)</title><rect x="298.9" y="515.0" width="423.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="301.9" y="526.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparato..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (275 samples, 35.62%)</title><rect x="301.9" y="499.0" width="420.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.9" y="510.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComp..</text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (258 samples, 33.42%)</title><rect x="301.9" y="483.0" width="394.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="304.9" y="494.0">/tmp/librocksdbjni5113685698900493557.so</text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (252 samples, 32.64%)</title><rect x="311.1" y="467.0" width="385.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="314.1" y="478.0">/tmp/librocksdbjni5113685698900493557.so</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="312.6" y="451.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="315.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (250 samples, 32.38%)</title><rect x="314.2" y="451.0" width="382.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="317.2" y="462.0">rocksdb::MemTable::KeyComparator::operator()(char co..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (244 samples, 31.61%)</title><rect x="320.3" y="435.0" width="372.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="323.3" y="446.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (12 samples, 1.55%)</title><rect x="323.3" y="419.0" width="18.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.3" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (12 samples, 1.55%)</title><rect x="323.3" y="403.0" width="18.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="326.3" y="414.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.26%)</title><rect x="324.9" y="387.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="327.9" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 1.04%)</title><rect x="327.9" y="387.0" width="12.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="330.9" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.39%)</title><rect x="329.5" y="371.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="332.5" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.26%)</title><rect x="334.0" y="371.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="337.0" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.26%)</title><rect x="334.0" y="355.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.0" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.13%)</title><rect x="337.1" y="371.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="340.1" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.13%)</title><rect x="338.6" y="371.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="341.6" y="382.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="340.2" y="387.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="343.2" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (47 samples, 6.09%)</title><rect x="341.7" y="419.0" width="71.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="344.7" y="430.0">JNIEnv_:..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.13%)</title><rect x="344.7" y="403.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="347.7" y="414.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (44 samples, 5.70%)</title><rect x="346.3" y="403.0" width="67.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="349.3" y="414.0">jni_Cal..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (3 samples, 0.39%)</title><rect x="352.4" y="387.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="355.4" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.13%)</title><rect x="357.0" y="387.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="360.0" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.13%)</title><rect x="358.5" y="387.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="361.5" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.13%)</title><rect x="360.0" y="387.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="363.0" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.39%)</title><rect x="361.6" y="387.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.6" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.39%)</title><rect x="366.1" y="387.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.1" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (25 samples, 3.24%)</title><rect x="370.7" y="387.0" width="38.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="373.7" y="398.0">jni..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.13%)</title><rect x="381.4" y="371.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.4" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.13%)</title><rect x="383.0" y="371.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="386.0" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (4 samples, 0.52%)</title><rect x="384.5" y="371.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.5" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.13%)</title><rect x="390.6" y="371.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="393.6" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 1.04%)</title><rect x="392.1" y="371.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="395.1" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.13%)</title><rect x="393.7" y="355.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="396.7" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.13%)</title><rect x="395.2" y="355.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="398.2" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.52%)</title><rect x="396.7" y="355.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="399.7" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.39%)</title><rect x="398.2" y="339.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="401.2" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.13%)</title><rect x="402.8" y="355.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="405.8" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.13%)</title><rect x="404.4" y="371.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="407.4" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.26%)</title><rect x="405.9" y="371.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.9" y="382.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.39%)</title><rect x="408.9" y="387.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="411.9" y="398.0"></text>
</g>
<g>
<title>__lll_lock_wait (54 samples, 6.99%)</title><rect x="413.5" y="419.0" width="82.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="416.5" y="430.0">__lll_loc..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (38 samples, 4.92%)</title><rect x="438.0" y="403.0" width="58.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="441.0" y="414.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (38 samples, 4.92%)</title><rect x="438.0" y="387.0" width="58.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="441.0" y="398.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_futex (25 samples, 3.24%)</title><rect x="445.6" y="371.0" width="38.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="448.6" y="382.0">__x..</text>
</g>
<g>
<title>do_futex (23 samples, 2.98%)</title><rect x="447.2" y="355.0" width="35.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="450.2" y="366.0">do_..</text>
</g>
<g>
<title>futex_wait (20 samples, 2.59%)</title><rect x="451.7" y="339.0" width="30.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="454.7" y="350.0">fu..</text>
</g>
<g>
<title>futex_wait_queue_me (10 samples, 1.30%)</title><rect x="457.8" y="323.0" width="15.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="460.8" y="334.0"></text>
</g>
<g>
<title>schedule (8 samples, 1.04%)</title><rect x="460.9" y="307.0" width="12.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="463.9" y="318.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.65%)</title><rect x="465.5" y="291.0" width="7.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="468.5" y="302.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.52%)</title><rect x="467.0" y="275.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="470.0" y="286.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.13%)</title><rect x="471.6" y="259.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="474.6" y="270.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.13%)</title><rect x="471.6" y="243.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="474.6" y="254.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.13%)</title><rect x="471.6" y="227.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="474.6" y="238.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.13%)</title><rect x="471.6" y="211.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="474.6" y="222.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.13%)</title><rect x="471.6" y="195.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="474.6" y="206.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.13%)</title><rect x="471.6" y="179.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="474.6" y="190.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="471.6" y="163.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="474.6" y="174.0"></text>
</g>
<g>
<title>futex_wait_setup (5 samples, 0.65%)</title><rect x="473.1" y="323.0" width="7.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="476.1" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.13%)</title><rect x="473.1" y="307.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="476.1" y="318.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.39%)</title><rect x="474.7" y="307.0" width="4.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="477.7" y="318.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.13%)</title><rect x="479.2" y="307.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="482.2" y="318.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.13%)</title><rect x="480.8" y="323.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="483.8" y="334.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.13%)</title><rect x="482.3" y="355.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="485.3" y="366.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (7 samples, 0.91%)</title><rect x="483.8" y="371.0" width="10.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="486.8" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_exit (4 samples, 0.52%)</title><rect x="488.4" y="355.0" width="6.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="491.4" y="366.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.13%)</title><rect x="493.0" y="339.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="496.0" y="350.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.13%)</title><rect x="494.5" y="371.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="497.5" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.13%)</title><rect x="494.5" y="355.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="497.5" y="366.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.13%)</title><rect x="494.5" y="339.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="497.5" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (105 samples, 13.60%)</title><rect x="496.1" y="419.0" width="160.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="499.1" y="430.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (103 samples, 13.34%)</title><rect x="499.1" y="403.0" width="157.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="502.1" y="414.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (103 samples, 13.34%)</title><rect x="499.1" y="387.0" width="157.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="502.1" y="398.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (99 samples, 12.82%)</title><rect x="502.2" y="371.0" width="151.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="505.2" y="382.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (99 samples, 12.82%)</title><rect x="502.2" y="355.0" width="151.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="505.2" y="366.0">do_futex</text>
</g>
<g>
<title>futex_wake (98 samples, 12.69%)</title><rect x="503.7" y="339.0" width="149.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="506.7" y="350.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.13%)</title><rect x="517.5" y="323.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="520.5" y="334.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.13%)</title><rect x="519.0" y="323.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="522.0" y="334.0"></text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.65%)</title><rect x="520.5" y="323.0" width="7.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="523.5" y="334.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.26%)</title><rect x="523.6" y="307.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="526.6" y="318.0"></text>
</g>
<g>
<title>plist_del (1 samples, 0.13%)</title><rect x="526.6" y="307.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="529.6" y="318.0"></text>
</g>
<g>
<title>wake_up_q (82 samples, 10.62%)</title><rect x="528.2" y="323.0" width="125.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="531.2" y="334.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (80 samples, 10.36%)</title><rect x="531.2" y="307.0" width="122.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="534.2" y="318.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (80 samples, 10.36%)</title><rect x="531.2" y="291.0" width="122.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="534.2" y="302.0">__lock_text_start</text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="653.5" y="371.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="656.5" y="382.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.13%)</title><rect x="655.0" y="371.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="658.0" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.13%)</title><rect x="655.0" y="355.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="658.0" y="366.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.13%)</title><rect x="656.6" y="419.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="659.6" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 1.55%)</title><rect x="658.1" y="419.0" width="18.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="661.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.13%)</title><rect x="658.1" y="403.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="661.1" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.52%)</title><rect x="659.6" y="403.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="662.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (7 samples, 0.91%)</title><rect x="665.7" y="403.0" width="10.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="668.7" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.13%)</title><rect x="676.4" y="419.0" width="1.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="679.4" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.26%)</title><rect x="678.0" y="419.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="681.0" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.78%)</title><rect x="681.0" y="419.0" width="9.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="684.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.13%)</title><rect x="690.2" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.13%)</title><rect x="691.7" y="419.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.13%)</title><rect x="693.2" y="435.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="696.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.13%)</title><rect x="694.8" y="435.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (16 samples, 2.07%)</title><rect x="696.3" y="483.0" width="24.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.3" y="494.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (15 samples, 1.94%)</title><rect x="696.3" y="467.0" width="22.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.3" y="478.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.39%)</title><rect x="696.3" y="451.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.3" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.39%)</title><rect x="696.3" y="435.0" width="4.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="699.3" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.13%)</title><rect x="696.3" y="419.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="699.3" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.26%)</title><rect x="697.8" y="419.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="700.8" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.26%)</title><rect x="697.8" y="403.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.8" y="414.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.26%)</title><rect x="697.8" y="387.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.8" y="398.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.91%)</title><rect x="700.9" y="451.0" width="10.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="703.9" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.65%)</title><rect x="703.9" y="435.0" width="7.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="706.9" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.65%)</title><rect x="703.9" y="419.0" width="7.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="706.9" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.52%)</title><rect x="705.5" y="403.0" width="6.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="708.5" y="414.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.52%)</title><rect x="705.5" y="387.0" width="6.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="708.5" y="398.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.52%)</title><rect x="705.5" y="371.0" width="6.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="708.5" y="382.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.13%)</title><rect x="707.0" y="355.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="710.0" y="366.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.13%)</title><rect x="707.0" y="339.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="710.0" y="350.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.13%)</title><rect x="707.0" y="323.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="710.0" y="334.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.13%)</title><rect x="707.0" y="307.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="710.0" y="318.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.26%)</title><rect x="708.5" y="355.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="711.5" y="366.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.13%)</title><rect x="710.1" y="339.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="713.1" y="350.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.13%)</title><rect x="710.1" y="323.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="713.1" y="334.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.65%)</title><rect x="711.6" y="451.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="714.6" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.65%)</title><rect x="711.6" y="435.0" width="7.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="714.6" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.65%)</title><rect x="711.6" y="419.0" width="7.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="714.6" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.52%)</title><rect x="711.6" y="403.0" width="6.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="714.6" y="414.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.52%)</title><rect x="711.6" y="387.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="714.6" y="398.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.52%)</title><rect x="711.6" y="371.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="714.6" y="382.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.52%)</title><rect x="711.6" y="355.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="714.6" y="366.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.39%)</title><rect x="713.1" y="339.0" width="4.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="716.1" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.39%)</title><rect x="713.1" y="323.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="716.1" y="334.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.13%)</title><rect x="717.7" y="403.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="720.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.13%)</title><rect x="719.2" y="467.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="722.2" y="478.0"></text>
</g>
<g>
<title>void rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindSpliceForLevel&lt;false&gt;(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, int, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**) (1 samples, 0.13%)</title><rect x="720.8" y="483.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="723.8" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5113685698900493557.so (1 samples, 0.13%)</title><rect x="720.8" y="467.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="723.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.13%)</title><rect x="720.8" y="451.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="723.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.13%)</title><rect x="720.8" y="435.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="723.8" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.13%)</title><rect x="720.8" y="419.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="723.8" y="430.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="720.8" y="403.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="723.8" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="720.8" y="387.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="723.8" y="398.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.13%)</title><rect x="720.8" y="371.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="723.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.13%)</title><rect x="722.3" y="515.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="725.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.13%)</title><rect x="723.8" y="595.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.13%)</title><rect x="725.3" y="595.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="728.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.13%)</title><rect x="726.9" y="611.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="729.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (43 samples, 5.57%)</title><rect x="728.4" y="611.0" width="65.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="731.4" y="622.0">rocksdb..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.13%)</title><rect x="789.5" y="595.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="792.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.13%)</title><rect x="791.1" y="595.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.13%)</title><rect x="792.6" y="595.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="795.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (55 samples, 7.12%)</title><rect x="794.1" y="611.0" width="84.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.1" y="622.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (34 samples, 4.40%)</title><rect x="794.1" y="595.0" width="52.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.1" y="606.0">rocks..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.39%)</title><rect x="840.0" y="579.0" width="4.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="843.0" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.39%)</title><rect x="840.0" y="563.0" width="4.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="843.0" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.39%)</title><rect x="840.0" y="547.0" width="4.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="843.0" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.39%)</title><rect x="840.0" y="531.0" width="4.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="843.0" y="542.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.39%)</title><rect x="840.0" y="515.0" width="4.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="843.0" y="526.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.39%)</title><rect x="840.0" y="499.0" width="4.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="843.0" y="510.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.26%)</title><rect x="841.5" y="483.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="844.5" y="494.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (2 samples, 0.26%)</title><rect x="841.5" y="467.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="844.5" y="478.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.13%)</title><rect x="844.6" y="579.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="847.6" y="590.0"></text>
</g>
<g>
<title>sched_yield (20 samples, 2.59%)</title><rect x="846.1" y="595.0" width="30.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="849.1" y="606.0">sc..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (17 samples, 2.20%)</title><rect x="850.7" y="579.0" width="26.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="853.7" y="590.0">e..</text>
</g>
<g>
<title>do_syscall_64 (17 samples, 2.20%)</title><rect x="850.7" y="563.0" width="26.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="853.7" y="574.0">d..</text>
</g>
<g>
<title>__x64_sys_sched_yield (12 samples, 1.55%)</title><rect x="853.7" y="547.0" width="18.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="856.7" y="558.0"></text>
</g>
<g>
<title>do_sched_yield (12 samples, 1.55%)</title><rect x="853.7" y="531.0" width="18.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="856.7" y="542.0"></text>
</g>
<g>
<title>schedule (12 samples, 1.55%)</title><rect x="853.7" y="515.0" width="18.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="856.7" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (12 samples, 1.55%)</title><rect x="853.7" y="499.0" width="18.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="856.7" y="510.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (3 samples, 0.39%)</title><rect x="872.1" y="547.0" width="4.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="875.1" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.26%)</title><rect x="873.6" y="531.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="876.6" y="542.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.13%)</title><rect x="875.1" y="515.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="878.1" y="526.0"></text>
</g>
<g>
<title>std::chrono::_V2::steady_clock::now() (1 samples, 0.13%)</title><rect x="876.7" y="595.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="879.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.26%)</title><rect x="878.2" y="611.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.13%)</title><rect x="879.7" y="595.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.13%)</title><rect x="881.2" y="611.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.2" y="622.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;*) (1 samples, 0.13%)</title><rect x="882.8" y="611.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) [clone .plt] (1 samples, 0.13%)</title><rect x="884.3" y="627.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.13%)</title><rect x="885.8" y="627.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="888.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.13%)</title><rect x="887.4" y="627.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.13%)</title><rect x="888.9" y="643.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.52%)</title><rect x="890.4" y="643.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.13%)</title><rect x="890.4" y="627.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="893.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.13%)</title><rect x="891.9" y="627.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (1 samples, 0.13%)</title><rect x="893.5" y="627.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.5" y="638.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (1 samples, 0.13%)</title><rect x="895.0" y="627.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="638.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) [clone .plt] (1 samples, 0.13%)</title><rect x="896.5" y="643.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.5" y="654.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.13%)</title><rect x="898.1" y="643.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.1" y="654.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.13%)</title><rect x="899.6" y="643.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.13%)</title><rect x="901.1" y="691.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 4.02%)</title><rect x="902.6" y="723.0" width="47.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="905.6" y="734.0">[unk..</text>
</g>
<g>
<title>__GI_write (13 samples, 1.68%)</title><rect x="902.6" y="707.0" width="19.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="905.6" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 1.68%)</title><rect x="902.6" y="691.0" width="19.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="905.6" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 1.68%)</title><rect x="902.6" y="675.0" width="19.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="905.6" y="686.0"></text>
</g>
<g>
<title>__x64_sys_write (13 samples, 1.68%)</title><rect x="902.6" y="659.0" width="19.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="905.6" y="670.0"></text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.13%)</title><rect x="902.6" y="643.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="905.6" y="654.0"></text>
</g>
<g>
<title>ksys_write (12 samples, 1.55%)</title><rect x="904.2" y="643.0" width="18.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="907.2" y="654.0"></text>
</g>
<g>
<title>vfs_write (12 samples, 1.55%)</title><rect x="904.2" y="627.0" width="18.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="907.2" y="638.0"></text>
</g>
<g>
<title>__vfs_write (12 samples, 1.55%)</title><rect x="904.2" y="611.0" width="18.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="907.2" y="622.0"></text>
</g>
<g>
<title>new_sync_write (12 samples, 1.55%)</title><rect x="904.2" y="595.0" width="18.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="907.2" y="606.0"></text>
</g>
<g>
<title>ext4_file_write_iter (12 samples, 1.55%)</title><rect x="904.2" y="579.0" width="18.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="907.2" y="590.0"></text>
</g>
<g>
<title>__generic_file_write_iter (12 samples, 1.55%)</title><rect x="904.2" y="563.0" width="18.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="907.2" y="574.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.13%)</title><rect x="905.7" y="547.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="908.7" y="558.0"></text>
</g>
<g>
<title>__mnt_want_write_file (1 samples, 0.13%)</title><rect x="905.7" y="531.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="908.7" y="542.0"></text>
</g>
<g>
<title>generic_perform_write (10 samples, 1.30%)</title><rect x="907.2" y="547.0" width="15.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="910.2" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.39%)</title><rect x="907.2" y="531.0" width="4.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="910.2" y="542.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.13%)</title><rect x="907.2" y="515.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="910.2" y="526.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.13%)</title><rect x="907.2" y="499.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="910.2" y="510.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.13%)</title><rect x="908.8" y="515.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="911.8" y="526.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.13%)</title><rect x="910.3" y="515.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="913.3" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_end (7 samples, 0.91%)</title><rect x="911.8" y="531.0" width="10.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="914.8" y="542.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.26%)</title><rect x="911.8" y="515.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="914.8" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_stop (2 samples, 0.26%)</title><rect x="911.8" y="499.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="914.8" y="510.0"></text>
</g>
<g>
<title>__wake_up (2 samples, 0.26%)</title><rect x="911.8" y="483.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="914.8" y="494.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.26%)</title><rect x="911.8" y="467.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="914.8" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="911.8" y="451.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="914.8" y="462.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.13%)</title><rect x="913.3" y="451.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="916.3" y="462.0"></text>
</g>
<g>
<title>generic_write_end (5 samples, 0.65%)</title><rect x="914.9" y="515.0" width="7.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="917.9" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (4 samples, 0.52%)</title><rect x="914.9" y="499.0" width="6.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="917.9" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (4 samples, 0.52%)</title><rect x="914.9" y="483.0" width="6.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="917.9" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (4 samples, 0.52%)</title><rect x="914.9" y="467.0" width="6.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="917.9" y="478.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (3 samples, 0.39%)</title><rect x="914.9" y="451.0" width="4.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="917.9" y="462.0"></text>
</g>
<g>
<title>ext4_do_update_inode (3 samples, 0.39%)</title><rect x="914.9" y="435.0" width="4.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="917.9" y="446.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (2 samples, 0.26%)</title><rect x="916.4" y="419.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="919.4" y="430.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.13%)</title><rect x="916.4" y="403.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="919.4" y="414.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.13%)</title><rect x="917.9" y="403.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="920.9" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.13%)</title><rect x="917.9" y="387.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="920.9" y="398.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.13%)</title><rect x="917.9" y="371.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="920.9" y="382.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.13%)</title><rect x="919.5" y="451.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="922.5" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.13%)</title><rect x="919.5" y="435.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="922.5" y="446.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.13%)</title><rect x="919.5" y="419.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="922.5" y="430.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.13%)</title><rect x="921.0" y="499.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="924.0" y="510.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.13%)</title><rect x="922.5" y="707.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="925.5" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="922.5" y="691.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="925.5" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="922.5" y="675.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="925.5" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.13%)</title><rect x="922.5" y="659.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="925.5" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.13%)</title><rect x="922.5" y="643.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="925.5" y="654.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.13%)</title><rect x="922.5" y="627.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="925.5" y="638.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.13%)</title><rect x="922.5" y="611.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="925.5" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.13%)</title><rect x="924.0" y="707.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="927.0" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="924.0" y="691.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="927.0" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="924.0" y="675.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="927.0" y="686.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="924.0" y="659.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="927.0" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.13%)</title><rect x="924.0" y="643.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="927.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.26%)</title><rect x="925.6" y="707.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="928.6" y="718.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.26%)</title><rect x="928.6" y="707.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="931.6" y="718.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.13%)</title><rect x="930.2" y="691.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="933.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="930.2" y="675.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="933.2" y="686.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (9 samples, 1.17%)</title><rect x="931.7" y="707.0" width="13.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="934.7" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.78%)</title><rect x="936.3" y="691.0" width="9.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="939.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.78%)</title><rect x="936.3" y="675.0" width="9.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="939.3" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.65%)</title><rect x="936.3" y="659.0" width="7.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="939.3" y="670.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.65%)</title><rect x="936.3" y="643.0" width="7.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="939.3" y="654.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.39%)</title><rect x="936.3" y="627.0" width="4.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="939.3" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.26%)</title><rect x="936.3" y="611.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="939.3" y="622.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.26%)</title><rect x="936.3" y="595.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="939.3" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.26%)</title><rect x="936.3" y="579.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="939.3" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.26%)</title><rect x="936.3" y="563.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="939.3" y="574.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.13%)</title><rect x="939.3" y="611.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="942.3" y="622.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.13%)</title><rect x="939.3" y="595.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="942.3" y="606.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.26%)</title><rect x="940.9" y="627.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="943.9" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="943.9" y="659.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="946.9" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.13%)</title><rect x="943.9" y="643.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="946.9" y="654.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.39%)</title><rect x="945.4" y="707.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.4" y="718.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.13%)</title><rect x="950.0" y="723.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="953.0" y="734.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.13%)</title><rect x="951.6" y="723.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="954.6" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (15 samples, 1.94%)</title><rect x="953.1" y="723.0" width="22.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="956.1" y="734.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (15 samples, 1.94%)</title><rect x="953.1" y="707.0" width="22.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="956.1" y="718.0">e..</text>
</g>
<g>
<title>do_syscall_64 (15 samples, 1.94%)</title><rect x="953.1" y="691.0" width="22.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="956.1" y="702.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (15 samples, 1.94%)</title><rect x="953.1" y="675.0" width="22.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="956.1" y="686.0">_..</text>
</g>
<g>
<title>do_futex (15 samples, 1.94%)</title><rect x="953.1" y="659.0" width="22.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="956.1" y="670.0">d..</text>
</g>
<g>
<title>futex_wake (15 samples, 1.94%)</title><rect x="953.1" y="643.0" width="22.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="956.1" y="654.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.13%)</title><rect x="954.6" y="627.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="957.6" y="638.0"></text>
</g>
<g>
<title>wake_up_q (13 samples, 1.68%)</title><rect x="956.1" y="627.0" width="19.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="959.1" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (13 samples, 1.68%)</title><rect x="956.1" y="611.0" width="19.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="959.1" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 1.68%)</title><rect x="956.1" y="595.0" width="19.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="959.1" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (12 samples, 1.55%)</title><rect x="976.0" y="723.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="979.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (56 samples, 7.25%)</title><rect x="994.4" y="723.0" width="85.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="997.4" y="734.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (55 samples, 7.12%)</title><rect x="995.9" y="707.0" width="84.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="998.9" y="718.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.13%)</title><rect x="995.9" y="691.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="998.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.13%)</title><rect x="995.9" y="675.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="998.9" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (54 samples, 6.99%)</title><rect x="997.4" y="691.0" width="82.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.4" y="702.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (5 samples, 0.65%)</title><rect x="997.4" y="675.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.4" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (49 samples, 6.35%)</title><rect x="1005.1" y="675.0" width="74.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.1" y="686.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (48 samples, 6.22%)</title><rect x="1006.6" y="659.0" width="73.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1009.6" y="670.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (47 samples, 6.09%)</title><rect x="1008.1" y="643.0" width="71.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1011.1" y="654.0">Java_org..</text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.26%)</title><rect x="1011.2" y="627.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.2" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 1.04%)</title><rect x="1014.2" y="627.0" width="12.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1017.2" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.39%)</title><rect x="1014.2" y="611.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.2" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.65%)</title><rect x="1018.8" y="611.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.8" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (24 samples, 3.11%)</title><rect x="1026.5" y="627.0" width="36.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1029.5" y="638.0">jni..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.13%)</title><rect x="1028.0" y="611.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="1029.5" y="611.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.5" y="622.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.13%)</title><rect x="1031.0" y="611.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.0" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.39%)</title><rect x="1032.6" y="611.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.6" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 2.20%)</title><rect x="1037.2" y="611.0" width="25.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.2" y="622.0">T..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (12 samples, 1.55%)</title><rect x="1043.3" y="595.0" width="18.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.3" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 1.30%)</title><rect x="1044.8" y="579.0" width="15.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.8" y="590.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.13%)</title><rect x="1049.4" y="563.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.4" y="574.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.13%)</title><rect x="1049.4" y="547.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.4" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.52%)</title><rect x="1050.9" y="563.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.9" y="574.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.13%)</title><rect x="1055.5" y="547.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1058.5" y="558.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.13%)</title><rect x="1055.5" y="531.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1058.5" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="1055.5" y="515.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1058.5" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="1055.5" y="499.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1058.5" y="510.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.13%)</title><rect x="1055.5" y="483.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1058.5" y="494.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.13%)</title><rect x="1055.5" y="467.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1058.5" y="478.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.13%)</title><rect x="1055.5" y="451.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1058.5" y="462.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.13%)</title><rect x="1055.5" y="435.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1058.5" y="446.0"></text>
</g>
<g>
<title>prep_new_page (1 samples, 0.13%)</title><rect x="1055.5" y="419.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1058.5" y="430.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.13%)</title><rect x="1055.5" y="403.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1058.5" y="414.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.13%)</title><rect x="1057.0" y="563.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.0" y="574.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.13%)</title><rect x="1058.5" y="563.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1061.5" y="574.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.13%)</title><rect x="1058.5" y="547.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1061.5" y="558.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.13%)</title><rect x="1058.5" y="531.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1061.5" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="1058.5" y="515.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1061.5" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="1058.5" y="499.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1061.5" y="510.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.13%)</title><rect x="1058.5" y="483.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1061.5" y="494.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.13%)</title><rect x="1058.5" y="467.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1061.5" y="478.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.13%)</title><rect x="1058.5" y="451.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1061.5" y="462.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.13%)</title><rect x="1058.5" y="435.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1061.5" y="446.0"></text>
</g>
<g>
<title>prep_new_page (1 samples, 0.13%)</title><rect x="1058.5" y="419.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1061.5" y="430.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.13%)</title><rect x="1058.5" y="403.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1061.5" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="1060.1" y="579.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.1" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="1061.6" y="595.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.6" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 1.42%)</title><rect x="1063.1" y="627.0" width="16.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1066.1" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.65%)</title><rect x="1066.2" y="611.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.2" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.26%)</title><rect x="1073.8" y="611.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.8" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.26%)</title><rect x="1076.9" y="611.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1079.9" y="622.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.13%)</title><rect x="1079.9" y="723.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (2 samples, 0.26%)</title><rect x="1081.5" y="771.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.26%)</title><rect x="1081.5" y="755.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1084.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.26%)</title><rect x="1081.5" y="739.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1084.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.26%)</title><rect x="1081.5" y="723.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1084.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.26%)</title><rect x="1081.5" y="707.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.26%)</title><rect x="1081.5" y="691.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1084.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.26%)</title><rect x="1081.5" y="675.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1084.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.26%)</title><rect x="1081.5" y="659.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.5" y="670.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.13%)</title><rect x="1083.0" y="643.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1086.0" y="654.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.13%)</title><rect x="1083.0" y="627.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1086.0" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="1083.0" y="611.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1086.0" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="1083.0" y="595.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1086.0" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (60 samples, 7.77%)</title><rect x="1084.5" y="867.0" width="91.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.5" y="878.0">one/nio/ser..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.13%)</title><rect x="1096.8" y="851.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1099.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (15 samples, 1.94%)</title><rect x="1098.3" y="851.0" width="22.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1101.3" y="862.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (15 samples, 1.94%)</title><rect x="1098.3" y="835.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1101.3" y="846.0">o..</text>
</g>
<g>
<title>[unknown] (14 samples, 1.81%)</title><rect x="1099.8" y="819.0" width="21.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1102.8" y="830.0">[..</text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.13%)</title><rect x="1099.8" y="803.0" width="1.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1102.8" y="814.0"></text>
</g>
<g>
<title>epoll_wait (13 samples, 1.68%)</title><rect x="1101.3" y="803.0" width="19.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1104.3" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 1.68%)</title><rect x="1101.3" y="787.0" width="19.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1104.3" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 1.68%)</title><rect x="1101.3" y="771.0" width="19.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1104.3" y="782.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (11 samples, 1.42%)</title><rect x="1102.9" y="755.0" width="16.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1105.9" y="766.0"></text>
</g>
<g>
<title>do_epoll_wait (11 samples, 1.42%)</title><rect x="1102.9" y="739.0" width="16.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1105.9" y="750.0"></text>
</g>
<g>
<title>ep_poll (10 samples, 1.30%)</title><rect x="1104.4" y="723.0" width="15.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (3 samples, 0.39%)</title><rect x="1107.5" y="707.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1110.5" y="718.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.26%)</title><rect x="1109.0" y="691.0" width="3.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1112.0" y="702.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.13%)</title><rect x="1110.5" y="675.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1113.5" y="686.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.13%)</title><rect x="1110.5" y="659.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1113.5" y="670.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (5 samples, 0.65%)</title><rect x="1112.0" y="707.0" width="7.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1115.0" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (5 samples, 0.65%)</title><rect x="1112.0" y="691.0" width="7.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1115.0" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.52%)</title><rect x="1113.6" y="675.0" width="6.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1116.6" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.52%)</title><rect x="1113.6" y="659.0" width="6.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1116.6" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.26%)</title><rect x="1116.6" y="643.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1119.6" y="654.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="1119.7" y="755.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1122.7" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.13%)</title><rect x="1119.7" y="739.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1122.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (36 samples, 4.66%)</title><rect x="1121.2" y="851.0" width="55.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.2" y="862.0">one/n..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.13%)</title><rect x="1122.7" y="835.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1125.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34 samples, 4.40%)</title><rect x="1124.3" y="835.0" width="51.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.3" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (19 samples, 2.46%)</title><rect x="1124.3" y="819.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1127.3" y="830.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="1125.8" y="803.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1128.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7 samples, 0.91%)</title><rect x="1127.3" y="803.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1130.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.91%)</title><rect x="1127.3" y="787.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1130.3" y="798.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (7 samples, 0.91%)</title><rect x="1127.3" y="771.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1130.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.39%)</title><rect x="1127.3" y="755.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1130.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.13%)</title><rect x="1128.9" y="739.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.13%)</title><rect x="1130.4" y="739.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1133.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.13%)</title><rect x="1130.4" y="723.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1133.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.13%)</title><rect x="1130.4" y="707.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1133.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.13%)</title><rect x="1130.4" y="691.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1133.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (4 samples, 0.52%)</title><rect x="1131.9" y="755.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1134.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.52%)</title><rect x="1131.9" y="739.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1134.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.26%)</title><rect x="1135.0" y="723.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.26%)</title><rect x="1135.0" y="707.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.26%)</title><rect x="1135.0" y="691.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1138.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.26%)</title><rect x="1135.0" y="675.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.26%)</title><rect x="1135.0" y="659.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.26%)</title><rect x="1135.0" y="643.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.26%)</title><rect x="1135.0" y="627.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1138.0" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.13%)</title><rect x="1135.0" y="611.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.13%)</title><rect x="1136.5" y="611.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1139.5" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.13%)</title><rect x="1136.5" y="595.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.13%)</title><rect x="1138.0" y="803.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1141.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.13%)</title><rect x="1138.0" y="787.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1141.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.13%)</title><rect x="1138.0" y="771.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1141.0" y="782.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.13%)</title><rect x="1138.0" y="755.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1141.0" y="766.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.13%)</title><rect x="1138.0" y="739.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1141.0" y="750.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="1138.0" y="723.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1141.0" y="734.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="1138.0" y="707.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1141.0" y="718.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.13%)</title><rect x="1138.0" y="691.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1141.0" y="702.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.13%)</title><rect x="1138.0" y="675.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1141.0" y="686.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.13%)</title><rect x="1138.0" y="659.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1141.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.13%)</title><rect x="1139.6" y="803.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1142.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.13%)</title><rect x="1139.6" y="787.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="1139.6" y="771.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1142.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.39%)</title><rect x="1141.1" y="803.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1144.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.65%)</title><rect x="1145.7" y="803.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1148.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.39%)</title><rect x="1148.7" y="787.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.26%)</title><rect x="1150.3" y="771.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1153.3" y="782.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.26%)</title><rect x="1150.3" y="755.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1153.3" y="766.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.26%)</title><rect x="1150.3" y="739.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1153.3" y="750.0"></text>
</g>
<g>
<title>up_read (1 samples, 0.13%)</title><rect x="1151.8" y="723.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (15 samples, 1.94%)</title><rect x="1153.3" y="819.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1156.3" y="830.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (15 samples, 1.94%)</title><rect x="1153.3" y="803.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.3" y="814.0">o..</text>
</g>
<g>
<title>__GI___recv (13 samples, 1.68%)</title><rect x="1154.8" y="787.0" width="19.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1157.8" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.55%)</title><rect x="1156.4" y="771.0" width="18.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1159.4" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.55%)</title><rect x="1156.4" y="755.0" width="18.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1159.4" y="766.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (11 samples, 1.42%)</title><rect x="1156.4" y="739.0" width="16.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1159.4" y="750.0"></text>
</g>
<g>
<title>__sys_recvfrom (11 samples, 1.42%)</title><rect x="1156.4" y="723.0" width="16.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1159.4" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (10 samples, 1.30%)</title><rect x="1156.4" y="707.0" width="15.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1159.4" y="718.0"></text>
</g>
<g>
<title>inet6_recvmsg (9 samples, 1.17%)</title><rect x="1156.4" y="691.0" width="13.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1159.4" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (9 samples, 1.17%)</title><rect x="1156.4" y="675.0" width="13.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1159.4" y="686.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.13%)</title><rect x="1157.9" y="659.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1160.9" y="670.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.13%)</title><rect x="1157.9" y="643.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1160.9" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.13%)</title><rect x="1157.9" y="627.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1160.9" y="638.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.13%)</title><rect x="1157.9" y="611.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1160.9" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.13%)</title><rect x="1159.4" y="659.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1162.4" y="670.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.26%)</title><rect x="1161.0" y="659.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1164.0" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.13%)</title><rect x="1161.0" y="643.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.13%)</title><rect x="1162.5" y="643.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.26%)</title><rect x="1164.0" y="659.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 0.26%)</title><rect x="1164.0" y="643.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1167.0" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.26%)</title><rect x="1164.0" y="627.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1167.0" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.13%)</title><rect x="1164.0" y="611.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1167.0" y="622.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.13%)</title><rect x="1165.5" y="611.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1168.5" y="622.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.13%)</title><rect x="1165.5" y="595.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.13%)</title><rect x="1167.1" y="659.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1170.1" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.13%)</title><rect x="1168.6" y="659.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.6" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.13%)</title><rect x="1170.1" y="691.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1173.1" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.13%)</title><rect x="1170.1" y="675.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1173.1" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.13%)</title><rect x="1170.1" y="659.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.1" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.13%)</title><rect x="1170.1" y="643.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1173.1" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.13%)</title><rect x="1170.1" y="627.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1173.1" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.13%)</title><rect x="1170.1" y="611.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1173.1" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.13%)</title><rect x="1171.7" y="707.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1174.7" y="718.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.13%)</title><rect x="1171.7" y="691.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1174.7" y="702.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.13%)</title><rect x="1171.7" y="675.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1174.7" y="686.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.13%)</title><rect x="1171.7" y="659.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1174.7" y="670.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.13%)</title><rect x="1173.2" y="739.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1176.2" y="750.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.13%)</title><rect x="1173.2" y="723.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1176.2" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.13%)</title><rect x="1174.7" y="787.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>start_thread (9 samples, 1.17%)</title><rect x="1176.2" y="867.0" width="13.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1179.2" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 1.17%)</title><rect x="1176.2" y="851.0" width="13.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1179.2" y="862.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 1.17%)</title><rect x="1176.2" y="835.0" width="13.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="846.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.26%)</title><rect x="1176.2" y="819.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.13%)</title><rect x="1176.2" y="803.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.13%)</title><rect x="1176.2" y="787.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.13%)</title><rect x="1176.2" y="771.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.13%)</title><rect x="1177.8" y="803.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="1177.8" y="787.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="1177.8" y="771.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.13%)</title><rect x="1177.8" y="755.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.13%)</title><rect x="1177.8" y="739.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.13%)</title><rect x="1177.8" y="723.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.13%)</title><rect x="1177.8" y="707.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.13%)</title><rect x="1177.8" y="691.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="1177.8" y="675.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>JavaThread::run() (7 samples, 0.91%)</title><rect x="1179.3" y="819.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (7 samples, 0.91%)</title><rect x="1179.3" y="803.0" width="10.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (7 samples, 0.91%)</title><rect x="1179.3" y="787.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (7 samples, 0.91%)</title><rect x="1179.3" y="771.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (7 samples, 0.91%)</title><rect x="1179.3" y="755.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (5 samples, 0.65%)</title><rect x="1179.3" y="739.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.13%)</title><rect x="1179.3" y="723.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.13%)</title><rect x="1179.3" y="707.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.13%)</title><rect x="1180.8" y="723.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.13%)</title><rect x="1180.8" y="707.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.13%)</title><rect x="1180.8" y="691.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.13%)</title><rect x="1180.8" y="675.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.13%)</title><rect x="1180.8" y="659.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1180.8" y="643.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.13%)</title><rect x="1180.8" y="627.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.39%)</title><rect x="1182.4" y="723.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.13%)</title><rect x="1182.4" y="707.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.13%)</title><rect x="1183.9" y="707.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1183.9" y="691.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.13%)</title><rect x="1185.4" y="707.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.13%)</title><rect x="1186.9" y="739.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.13%)</title><rect x="1186.9" y="723.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.13%)</title><rect x="1186.9" y="707.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.13%)</title><rect x="1188.5" y="739.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="750.0"></text>
</g>
</g>
</svg>
