<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (994 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.20%)</title><rect x="10.0" y="867.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.10%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.10%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.10%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.10%)</title><rect x="10.0" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.10%)</title><rect x="10.0" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.10%)</title><rect x="10.0" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="10.0" y="611.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="10.0" y="595.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="10.0" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="10.0" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="10.0" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="10.0" y="531.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="10.0" y="515.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="10.0" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.10%)</title><rect x="10.0" y="483.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.10%)</title><rect x="11.2" y="851.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 1.81%)</title><rect x="12.4" y="867.0" width="21.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="15.4" y="878.0">[..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (17 samples, 1.71%)</title><rect x="12.4" y="851.0" width="20.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="15.4" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (17 samples, 1.71%)</title><rect x="12.4" y="835.0" width="20.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (17 samples, 1.71%)</title><rect x="12.4" y="819.0" width="20.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (17 samples, 1.71%)</title><rect x="12.4" y="803.0" width="20.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (17 samples, 1.71%)</title><rect x="12.4" y="787.0" width="20.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (17 samples, 1.71%)</title><rect x="12.4" y="771.0" width="20.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (17 samples, 1.71%)</title><rect x="12.4" y="755.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.10%)</title><rect x="12.4" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.10%)</title><rect x="12.4" y="723.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="12.4" y="707.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="12.4" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.10%)</title><rect x="12.4" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.10%)</title><rect x="12.4" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="670.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.10%)</title><rect x="12.4" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.4" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="12.4" y="627.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="15.4" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="12.4" y="611.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="15.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="12.4" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="12.4" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="12.4" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.4" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.10%)</title><rect x="12.4" y="547.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.4" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="12.4" y="531.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="15.4" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="12.4" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.4" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="12.4" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (16 samples, 1.61%)</title><rect x="13.6" y="739.0" width="19.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (16 samples, 1.61%)</title><rect x="13.6" y="723.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (16 samples, 1.61%)</title><rect x="13.6" y="707.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 1.61%)</title><rect x="13.6" y="691.0" width="19.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (16 samples, 1.61%)</title><rect x="13.6" y="675.0" width="19.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (16 samples, 1.61%)</title><rect x="13.6" y="659.0" width="19.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (16 samples, 1.61%)</title><rect x="13.6" y="643.0" width="19.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.6" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (16 samples, 1.61%)</title><rect x="13.6" y="627.0" width="19.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.6" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (16 samples, 1.61%)</title><rect x="13.6" y="611.0" width="19.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="16.6" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (16 samples, 1.61%)</title><rect x="13.6" y="595.0" width="19.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (16 samples, 1.61%)</title><rect x="13.6" y="579.0" width="19.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 1.61%)</title><rect x="13.6" y="563.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.6" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.70%)</title><rect x="13.6" y="547.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.6" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (7 samples, 0.70%)</title><rect x="13.6" y="531.0" width="8.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="16.6" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (7 samples, 0.70%)</title><rect x="13.6" y="515.0" width="8.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="16.6" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="13.6" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.6" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.60%)</title><rect x="14.7" y="499.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.7" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="14.7" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.7" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="15.9" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.9" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.40%)</title><rect x="17.1" y="483.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.1" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (9 samples, 0.91%)</title><rect x="21.9" y="547.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.9" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (9 samples, 0.91%)</title><rect x="21.9" y="531.0" width="10.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="24.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 0.91%)</title><rect x="21.9" y="515.0" width="10.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="24.9" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (4 samples, 0.40%)</title><rect x="21.9" y="499.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.9" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="26.6" y="499.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="29.6" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.40%)</title><rect x="27.8" y="499.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="30.8" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.20%)</title><rect x="30.2" y="483.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="33.2" y="494.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.10%)</title><rect x="32.6" y="851.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="35.6" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (905 samples, 91.05%)</title><rect x="33.7" y="867.0" width="1074.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.7" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (905 samples, 91.05%)</title><rect x="33.7" y="851.0" width="1074.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.7" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (905 samples, 91.05%)</title><rect x="33.7" y="835.0" width="1074.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.7" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.10%)</title><rect x="45.6" y="819.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.10%)</title><rect x="46.8" y="819.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (25 samples, 2.52%)</title><rect x="48.0" y="819.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.0" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (24 samples, 2.41%)</title><rect x="49.2" y="803.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.2" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 1.41%)</title><rect x="50.4" y="787.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.20%)</title><rect x="50.4" y="771.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="50.4" y="755.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="51.5" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="51.5" y="723.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.10%)</title><rect x="51.5" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.5" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.10%)</title><rect x="51.5" y="691.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="54.5" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="51.5" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 1.21%)</title><rect x="52.7" y="771.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 1.21%)</title><rect x="52.7" y="755.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.7" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.40%)</title><rect x="53.9" y="739.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="56.9" y="750.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.10%)</title><rect x="53.9" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.9" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.10%)</title><rect x="55.1" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="58.1" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="55.1" y="707.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="58.1" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="56.3" y="723.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="59.3" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.10%)</title><rect x="57.5" y="723.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="60.5" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="57.5" y="707.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="60.5" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="57.5" y="691.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="60.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.70%)</title><rect x="58.7" y="739.0" width="8.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="61.7" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (7 samples, 0.70%)</title><rect x="58.7" y="723.0" width="8.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="61.7" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.60%)</title><rect x="59.9" y="707.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="62.9" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.60%)</title><rect x="59.9" y="691.0" width="7.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="62.9" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.50%)</title><rect x="61.0" y="675.0" width="6.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="64.0" y="686.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.50%)</title><rect x="61.0" y="659.0" width="6.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="64.0" y="670.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.40%)</title><rect x="62.2" y="643.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="65.2" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.20%)</title><rect x="64.6" y="627.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="67.6" y="638.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.10%)</title><rect x="64.6" y="611.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="67.6" y="622.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="65.8" y="611.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="68.8" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="65.8" y="595.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="68.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.20%)</title><rect x="67.0" y="787.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.20%)</title><rect x="67.0" y="771.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.20%)</title><rect x="67.0" y="755.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.10%)</title><rect x="67.0" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.10%)</title><rect x="68.2" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.10%)</title><rect x="68.2" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="68.2" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.2" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.10%)</title><rect x="68.2" y="691.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="71.2" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.10%)</title><rect x="68.2" y="675.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="71.2" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="68.2" y="659.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="71.2" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="68.2" y="643.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="71.2" y="654.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="68.2" y="627.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="71.2" y="638.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="68.2" y="611.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="71.2" y="622.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.10%)</title><rect x="68.2" y="595.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="71.2" y="606.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.10%)</title><rect x="68.2" y="579.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="71.2" y="590.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="68.2" y="563.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.70%)</title><rect x="69.4" y="787.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.70%)</title><rect x="69.4" y="771.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.70%)</title><rect x="69.4" y="755.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.70%)</title><rect x="69.4" y="739.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.50%)</title><rect x="71.7" y="723.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.50%)</title><rect x="71.7" y="707.0" width="6.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="74.7" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.50%)</title><rect x="71.7" y="691.0" width="6.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="74.7" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.50%)</title><rect x="71.7" y="675.0" width="6.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="74.7" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.50%)</title><rect x="71.7" y="659.0" width="6.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="74.7" y="670.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.50%)</title><rect x="71.7" y="643.0" width="6.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="74.7" y="654.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.50%)</title><rect x="71.7" y="627.0" width="6.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="74.7" y="638.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.30%)</title><rect x="74.1" y="611.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="77.1" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.30%)</title><rect x="74.1" y="595.0" width="3.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="77.1" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.30%)</title><rect x="74.1" y="579.0" width="3.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="77.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (2 samples, 0.20%)</title><rect x="77.7" y="819.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.7" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/443610952.run (866 samples, 87.12%)</title><rect x="80.0" y="819.0" width="1028.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.0" y="830.0">ru/mail/polis/service/stasyanoi/CustomServer$$Lambda$65/443610952.run</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1 (866 samples, 87.12%)</title><rect x="80.0" y="803.0" width="1028.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.0" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.putInternal (866 samples, 87.12%)</title><rect x="80.0" y="787.0" width="1028.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.0" y="798.0">ru/mail/polis/service/stasyanoi/CustomServer.putInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (99 samples, 9.96%)</title><rect x="80.0" y="771.0" width="117.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.0" y="782.0">one/nio/http/H..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.20%)</title><rect x="80.0" y="755.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.20%)</title><rect x="80.0" y="739.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.20%)</title><rect x="80.0" y="723.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.0" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="81.2" y="707.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (96 samples, 9.66%)</title><rect x="82.4" y="755.0" width="114.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.4" y="766.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.30%)</title><rect x="82.4" y="739.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (93 samples, 9.36%)</title><rect x="86.0" y="739.0" width="110.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.0" y="750.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (93 samples, 9.36%)</title><rect x="86.0" y="723.0" width="110.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.0" y="734.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (93 samples, 9.36%)</title><rect x="86.0" y="707.0" width="110.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.0" y="718.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (93 samples, 9.36%)</title><rect x="86.0" y="691.0" width="110.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.0" y="702.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.30%)</title><rect x="87.2" y="675.0" width="3.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="90.2" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="88.4" y="659.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="91.4" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.10%)</title><rect x="89.5" y="659.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="92.5" y="670.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.10%)</title><rect x="90.7" y="675.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="93.7" y="686.0"></text>
</g>
<g>
<title>__libc_send (88 samples, 8.85%)</title><rect x="91.9" y="675.0" width="104.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="94.9" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (87 samples, 8.75%)</title><rect x="93.1" y="659.0" width="103.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="96.1" y="670.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (86 samples, 8.65%)</title><rect x="93.1" y="643.0" width="102.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="96.1" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (86 samples, 8.65%)</title><rect x="93.1" y="627.0" width="102.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="96.1" y="638.0">__x64_sys_se..</text>
</g>
<g>
<title>__sys_sendto (86 samples, 8.65%)</title><rect x="93.1" y="611.0" width="102.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="96.1" y="622.0">__sys_sendto</text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="93.1" y="595.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="96.1" y="606.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.10%)</title><rect x="94.3" y="595.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="97.3" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (81 samples, 8.15%)</title><rect x="95.5" y="595.0" width="96.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="98.5" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (78 samples, 7.85%)</title><rect x="95.5" y="579.0" width="92.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="98.5" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (78 samples, 7.85%)</title><rect x="95.5" y="563.0" width="92.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="98.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.10%)</title><rect x="95.5" y="547.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="98.5" y="558.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.20%)</title><rect x="96.7" y="547.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="99.7" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.20%)</title><rect x="96.7" y="531.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="99.7" y="542.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.10%)</title><rect x="99.0" y="547.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="102.0" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (74 samples, 7.44%)</title><rect x="100.2" y="547.0" width="87.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="103.2" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.10%)</title><rect x="105.0" y="531.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="108.0" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.10%)</title><rect x="105.0" y="515.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="108.0" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (6 samples, 0.60%)</title><rect x="106.2" y="531.0" width="7.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="109.2" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.50%)</title><rect x="106.2" y="515.0" width="5.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="109.2" y="526.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.10%)</title><rect x="107.3" y="499.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="110.3" y="510.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.20%)</title><rect x="108.5" y="499.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="111.5" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.20%)</title><rect x="108.5" y="483.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="111.5" y="494.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.10%)</title><rect x="109.7" y="467.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="112.7" y="478.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.10%)</title><rect x="110.9" y="499.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="113.9" y="510.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.10%)</title><rect x="112.1" y="515.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="115.1" y="526.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.10%)</title><rect x="113.3" y="531.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="116.3" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.10%)</title><rect x="113.3" y="515.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="116.3" y="526.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.10%)</title><rect x="114.5" y="531.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="117.5" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.10%)</title><rect x="115.7" y="531.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="118.7" y="542.0"></text>
</g>
<g>
<title>tcp_push (59 samples, 5.94%)</title><rect x="116.8" y="531.0" width="70.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="119.8" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (58 samples, 5.84%)</title><rect x="118.0" y="515.0" width="68.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="121.0" y="526.0">__tcp_p..</text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.10%)</title><rect x="118.0" y="499.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="121.0" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (57 samples, 5.73%)</title><rect x="119.2" y="499.0" width="67.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="122.2" y="510.0">tcp_wri..</text>
</g>
<g>
<title>__tcp_transmit_skb (54 samples, 5.43%)</title><rect x="120.4" y="483.0" width="64.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="123.4" y="494.0">__tcp_t..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.10%)</title><rect x="125.2" y="467.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="128.2" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (49 samples, 4.93%)</title><rect x="126.3" y="467.0" width="58.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="129.3" y="478.0">ip_que..</text>
</g>
<g>
<title>__ip_queue_xmit (48 samples, 4.83%)</title><rect x="127.5" y="451.0" width="57.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="130.5" y="462.0">__ip_q..</text>
</g>
<g>
<title>ip_local_out (47 samples, 4.73%)</title><rect x="127.5" y="435.0" width="55.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="130.5" y="446.0">ip_lo..</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.40%)</title><rect x="127.5" y="419.0" width="4.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="130.5" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.10%)</title><rect x="127.5" y="403.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="130.5" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.30%)</title><rect x="128.7" y="403.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="131.7" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (3 samples, 0.30%)</title><rect x="128.7" y="387.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="131.7" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.30%)</title><rect x="128.7" y="371.0" width="3.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="131.7" y="382.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.10%)</title><rect x="128.7" y="355.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="131.7" y="366.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.20%)</title><rect x="129.9" y="355.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="132.9" y="366.0"></text>
</g>
<g>
<title>ip_output (43 samples, 4.33%)</title><rect x="132.3" y="419.0" width="51.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="135.3" y="430.0">ip_ou..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.10%)</title><rect x="132.3" y="403.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="135.3" y="414.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.10%)</title><rect x="133.5" y="403.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="136.5" y="414.0"></text>
</g>
<g>
<title>ip_finish_output (41 samples, 4.12%)</title><rect x="134.6" y="403.0" width="48.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="137.6" y="414.0">ip_f..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.10%)</title><rect x="134.6" y="387.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="137.6" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (40 samples, 4.02%)</title><rect x="135.8" y="387.0" width="47.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="138.8" y="398.0">__ip..</text>
</g>
<g>
<title>ip_finish_output2 (40 samples, 4.02%)</title><rect x="135.8" y="371.0" width="47.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="138.8" y="382.0">ip_f..</text>
</g>
<g>
<title>__local_bh_enable_ip (35 samples, 3.52%)</title><rect x="139.4" y="355.0" width="41.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="142.4" y="366.0">__l..</text>
</g>
<g>
<title>do_softirq.part.20 (35 samples, 3.52%)</title><rect x="139.4" y="339.0" width="41.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="142.4" y="350.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (35 samples, 3.52%)</title><rect x="139.4" y="323.0" width="41.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="142.4" y="334.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (35 samples, 3.52%)</title><rect x="139.4" y="307.0" width="41.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="142.4" y="318.0">__s..</text>
</g>
<g>
<title>net_rx_action (33 samples, 3.32%)</title><rect x="140.6" y="291.0" width="39.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="143.6" y="302.0">net..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.10%)</title><rect x="141.8" y="275.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="144.8" y="286.0"></text>
</g>
<g>
<title>process_backlog (31 samples, 3.12%)</title><rect x="143.0" y="275.0" width="36.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.0" y="286.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (31 samples, 3.12%)</title><rect x="143.0" y="259.0" width="36.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="146.0" y="270.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (31 samples, 3.12%)</title><rect x="143.0" y="243.0" width="36.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="146.0" y="254.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.10%)</title><rect x="143.0" y="227.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="146.0" y="238.0"></text>
</g>
<g>
<title>ip_rcv (30 samples, 3.02%)</title><rect x="144.1" y="227.0" width="35.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="147.1" y="238.0">ip_..</text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.10%)</title><rect x="144.1" y="211.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="147.1" y="222.0"></text>
</g>
<g>
<title>ip_rcv_finish (29 samples, 2.92%)</title><rect x="145.3" y="211.0" width="34.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="148.3" y="222.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (27 samples, 2.72%)</title><rect x="145.3" y="195.0" width="32.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="148.3" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (27 samples, 2.72%)</title><rect x="145.3" y="179.0" width="32.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="148.3" y="190.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (27 samples, 2.72%)</title><rect x="145.3" y="163.0" width="32.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="148.3" y="174.0">ip..</text>
</g>
<g>
<title>tcp_v4_rcv (27 samples, 2.72%)</title><rect x="145.3" y="147.0" width="32.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="148.3" y="158.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.20%)</title><rect x="145.3" y="131.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="148.3" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.30%)</title><rect x="147.7" y="131.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.7" y="142.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.10%)</title><rect x="147.7" y="115.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="150.7" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.20%)</title><rect x="148.9" y="115.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="151.9" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (22 samples, 2.21%)</title><rect x="151.3" y="131.0" width="26.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="154.3" y="142.0">t..</text>
</g>
<g>
<title>tcp_rcv_established (22 samples, 2.21%)</title><rect x="151.3" y="115.0" width="26.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="154.3" y="126.0">t..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.30%)</title><rect x="151.3" y="99.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="154.3" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.30%)</title><rect x="151.3" y="83.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="154.3" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.30%)</title><rect x="151.3" y="67.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.3" y="78.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.30%)</title><rect x="151.3" y="51.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.3" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.30%)</title><rect x="151.3" y="35.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="154.3" y="46.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.10%)</title><rect x="154.8" y="99.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="157.8" y="110.0"></text>
</g>
<g>
<title>tcp_ack (7 samples, 0.70%)</title><rect x="156.0" y="99.0" width="8.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="159.0" y="110.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.10%)</title><rect x="158.4" y="83.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="161.4" y="94.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.10%)</title><rect x="159.6" y="83.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="162.6" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.20%)</title><rect x="160.8" y="83.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="163.8" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="162.0" y="67.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="165.0" y="78.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.10%)</title><rect x="162.0" y="51.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="165.0" y="62.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.10%)</title><rect x="163.1" y="83.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="166.1" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (10 samples, 1.01%)</title><rect x="164.3" y="99.0" width="11.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="167.3" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (10 samples, 1.01%)</title><rect x="164.3" y="83.0" width="11.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="167.3" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (9 samples, 0.91%)</title><rect x="165.5" y="67.0" width="10.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="168.5" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.10%)</title><rect x="165.5" y="51.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="168.5" y="62.0"></text>
</g>
<g>
<title>__wake_up_common_lock (8 samples, 0.80%)</title><rect x="166.7" y="51.0" width="9.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="169.7" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.80%)</title><rect x="166.7" y="35.0" width="9.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="169.7" y="46.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.10%)</title><rect x="176.2" y="99.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="179.2" y="110.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.10%)</title><rect x="176.2" y="83.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="179.2" y="94.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.10%)</title><rect x="176.2" y="67.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="179.2" y="78.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (1 samples, 0.10%)</title><rect x="177.4" y="195.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="180.4" y="206.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.10%)</title><rect x="178.6" y="195.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="181.6" y="206.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.10%)</title><rect x="179.8" y="291.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="182.8" y="302.0"></text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 0.20%)</title><rect x="180.9" y="355.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="183.9" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 0.20%)</title><rect x="180.9" y="339.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="183.9" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.10%)</title><rect x="182.1" y="323.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="185.1" y="334.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.10%)</title><rect x="183.3" y="435.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="186.3" y="446.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.10%)</title><rect x="184.5" y="483.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="187.5" y="494.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.10%)</title><rect x="185.7" y="483.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="188.7" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.10%)</title><rect x="186.9" y="531.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="189.9" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.10%)</title><rect x="186.9" y="515.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="189.9" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.10%)</title><rect x="186.9" y="499.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="189.9" y="510.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.30%)</title><rect x="188.1" y="579.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="191.1" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.30%)</title><rect x="188.1" y="563.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="191.1" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.30%)</title><rect x="188.1" y="547.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="191.1" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.20%)</title><rect x="189.3" y="531.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="192.3" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (2 samples, 0.20%)</title><rect x="189.3" y="515.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="192.3" y="526.0"></text>
</g>
<g>
<title>aa_check_perms (1 samples, 0.10%)</title><rect x="189.3" y="499.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="192.3" y="510.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.10%)</title><rect x="190.4" y="499.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="193.4" y="510.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.30%)</title><rect x="191.6" y="595.0" width="3.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="194.6" y="606.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.20%)</title><rect x="191.6" y="579.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="194.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.20%)</title><rect x="191.6" y="563.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="194.6" y="574.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.20%)</title><rect x="191.6" y="547.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="194.6" y="558.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="194.0" y="579.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="197.0" y="590.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="195.2" y="643.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="198.2" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.10%)</title><rect x="196.4" y="755.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (766 samples, 77.06%)</title><rect x="197.6" y="771.0" width="909.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.6" y="782.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (766 samples, 77.06%)</title><rect x="197.6" y="755.0" width="909.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.6" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (766 samples, 77.06%)</title><rect x="197.6" y="739.0" width="909.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.40%)</title><rect x="198.8" y="723.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.8" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (597 samples, 60.06%)</title><rect x="203.5" y="723.0" width="708.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="206.5" y="734.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.10%)</title><rect x="203.5" y="707.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="206.5" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (1 samples, 0.10%)</title><rect x="204.7" y="707.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="207.7" y="718.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (1 samples, 0.10%)</title><rect x="205.9" y="707.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="208.9" y="718.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (594 samples, 59.76%)</title><rect x="207.1" y="707.0" width="705.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.1" y="718.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHand..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.10%)</title><rect x="207.1" y="691.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="210.1" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="207.1" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="210.1" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.20%)</title><rect x="208.2" y="691.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="211.2" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="209.4" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="212.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (589 samples, 59.26%)</title><rect x="210.6" y="691.0" width="699.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="213.6" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.10%)</title><rect x="213.0" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="216.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (586 samples, 58.95%)</title><rect x="214.2" y="675.0" width="695.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.2" y="686.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice c..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (585 samples, 58.85%)</title><rect x="214.2" y="659.0" width="694.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.2" y="670.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="215.4" y="643.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="218.4" y="654.0"></text>
</g>
<g>
<title>free@plt (1 samples, 0.10%)</title><rect x="216.6" y="643.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="219.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (575 samples, 57.85%)</title><rect x="217.7" y="643.0" width="682.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.7" y="654.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="217.7" y="627.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="220.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (1 samples, 0.10%)</title><rect x="218.9" y="627.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="221.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (570 samples, 57.34%)</title><rect x="220.1" y="627.0" width="676.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="223.1" y="638.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteC..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="226.1" y="611.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="229.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (11 samples, 1.11%)</title><rect x="227.2" y="611.0" width="13.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="230.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.40%)</title><rect x="227.2" y="595.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="230.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (3 samples, 0.30%)</title><rect x="228.4" y="579.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="231.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (6 samples, 0.60%)</title><rect x="232.0" y="595.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (6 samples, 0.60%)</title><rect x="232.0" y="579.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="235.0" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="232.0" y="563.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="235.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.30%)</title><rect x="233.2" y="563.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (1 samples, 0.10%)</title><rect x="233.2" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="236.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (2 samples, 0.20%)</title><rect x="234.4" y="547.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="237.4" y="558.0"></text>
</g>
<g>
<title>__GI_write (1 samples, 0.10%)</title><rect x="235.6" y="531.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="238.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.10%)</title><rect x="236.7" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="239.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.10%)</title><rect x="237.9" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="240.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="239.1" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="242.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.10%)</title><rect x="240.3" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="243.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.10%)</title><rect x="241.5" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="244.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (6 samples, 0.60%)</title><rect x="242.7" y="611.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="245.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (6 samples, 0.60%)</title><rect x="242.7" y="595.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="245.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 0.60%)</title><rect x="242.7" y="579.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="245.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.60%)</title><rect x="242.7" y="563.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="245.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (6 samples, 0.60%)</title><rect x="242.7" y="547.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="245.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.60%)</title><rect x="242.7" y="531.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="245.7" y="542.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (6 samples, 0.60%)</title><rect x="242.7" y="515.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="245.7" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (4 samples, 0.40%)</title><rect x="242.7" y="499.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="245.7" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="243.9" y="483.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="243.9" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="246.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="243.9" y="451.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="246.9" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="243.9" y="435.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="246.9" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="243.9" y="419.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="246.9" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="243.9" y="403.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="246.9" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="243.9" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="246.9" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="243.9" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="246.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.20%)</title><rect x="245.1" y="483.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="248.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.20%)</title><rect x="245.1" y="467.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="248.1" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.20%)</title><rect x="245.1" y="451.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="248.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="245.1" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="248.1" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="246.2" y="435.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="249.2" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="246.2" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="249.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.20%)</title><rect x="247.4" y="499.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="250.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.20%)</title><rect x="247.4" y="483.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="250.4" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.20%)</title><rect x="247.4" y="467.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="250.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="247.4" y="451.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="250.4" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.10%)</title><rect x="248.6" y="451.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="251.6" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="248.6" y="435.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="251.6" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="248.6" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.6" y="430.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="248.6" y="403.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="251.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (441 samples, 44.37%)</title><rect x="249.8" y="611.0" width="523.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.8" y="622.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, u..</text>
</g>
<g>
<title>free@plt (1 samples, 0.10%)</title><rect x="252.2" y="595.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="255.2" y="606.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.10%)</title><rect x="253.4" y="595.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="256.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.20%)</title><rect x="254.5" y="595.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="257.5" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="254.5" y="579.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="257.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.10%)</title><rect x="255.7" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="258.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (435 samples, 43.76%)</title><rect x="256.9" y="595.0" width="516.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.9" y="606.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (435 samples, 43.76%)</title><rect x="256.9" y="579.0" width="516.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="259.9" y="590.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksd..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (432 samples, 43.46%)</title><rect x="259.3" y="563.0" width="512.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="262.3" y="574.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, r..</text>
</g>
<g>
<title>__malloc (1 samples, 0.10%)</title><rect x="261.7" y="547.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="264.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.10%)</title><rect x="262.9" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="265.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.10%)</title><rect x="264.0" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="267.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.10%)</title><rect x="265.2" y="547.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="268.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (426 samples, 42.86%)</title><rect x="266.4" y="547.0" width="505.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="269.4" y="558.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice cons..</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (1 samples, 0.10%)</title><rect x="267.6" y="531.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="270.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (424 samples, 42.66%)</title><rect x="268.8" y="531.0" width="503.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.8" y="542.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Sl..</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (2 samples, 0.20%)</title><rect x="268.8" y="515.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="271.8" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="268.8" y="499.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="271.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (422 samples, 42.45%)</title><rect x="271.2" y="515.0" width="500.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="274.2" y="526.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (422 samples, 42.45%)</title><rect x="271.2" y="499.0" width="500.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="274.2" y="510.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator cons..</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (384 samples, 38.63%)</title><rect x="273.5" y="483.0" width="455.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="276.5" y="494.0">/tmp/librocksdbjni10546891661304564868.so</text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (373 samples, 37.53%)</title><rect x="285.4" y="467.0" width="442.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.4" y="478.0">/tmp/librocksdbjni10546891661304564868.so</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="285.4" y="451.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="288.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (372 samples, 37.42%)</title><rect x="286.6" y="451.0" width="441.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="289.6" y="462.0">rocksdb::MemTable::KeyComparator::operator()(char const*, roc..</text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.10%)</title><rect x="289.0" y="435.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="292.0" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.10%)</title><rect x="290.2" y="435.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="293.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (365 samples, 36.72%)</title><rect x="291.3" y="435.0" width="433.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="294.3" y="446.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice ..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (24 samples, 2.41%)</title><rect x="297.3" y="419.0" width="28.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.3" y="430.0">JN..</text>
</g>
<g>
<title>jni_CallIntMethodV (24 samples, 2.41%)</title><rect x="297.3" y="403.0" width="28.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="300.3" y="414.0">jn..</text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.20%)</title><rect x="299.7" y="387.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="302.7" y="398.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.10%)</title><rect x="302.0" y="387.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.0" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.20%)</title><rect x="303.2" y="387.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="306.2" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (17 samples, 1.71%)</title><rect x="305.6" y="387.0" width="20.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="308.6" y="398.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.10%)</title><rect x="311.5" y="371.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="314.5" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.20%)</title><rect x="312.7" y="371.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="315.7" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.50%)</title><rect x="315.1" y="371.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.1" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.30%)</title><rect x="315.1" y="355.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="318.1" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.30%)</title><rect x="315.1" y="339.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.1" y="350.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.10%)</title><rect x="318.7" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.7" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="319.8" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="322.8" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="321.0" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.0" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.30%)</title><rect x="322.2" y="371.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="325.2" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (69 samples, 6.94%)</title><rect x="325.8" y="419.0" width="81.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="328.8" y="430.0">JNIEnv_::..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="331.7" y="403.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="334.7" y="414.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (63 samples, 6.34%)</title><rect x="332.9" y="403.0" width="74.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="335.9" y="414.0">jni_Call..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.30%)</title><rect x="337.6" y="387.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="340.6" y="398.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.10%)</title><rect x="341.2" y="387.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="344.2" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="342.4" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="345.4" y="398.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.30%)</title><rect x="343.6" y="387.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="346.6" y="398.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.10%)</title><rect x="347.1" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.1" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="348.3" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="351.3" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="349.5" y="387.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="352.5" y="398.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.20%)</title><rect x="350.7" y="387.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="353.7" y="398.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="353.1" y="387.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="356.1" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.40%)</title><rect x="354.3" y="387.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="357.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.40%)</title><rect x="359.0" y="387.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.0" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (35 samples, 3.52%)</title><rect x="363.8" y="387.0" width="41.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="366.8" y="398.0">jni..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.10%)</title><rect x="376.8" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="379.8" y="382.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="378.0" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="381.0" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="379.2" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="382.2" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.30%)</title><rect x="380.4" y="371.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.4" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (16 samples, 1.61%)</title><rect x="383.9" y="371.0" width="19.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="386.9" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.20%)</title><rect x="386.3" y="355.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="389.3" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.10%)</title><rect x="388.7" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="391.7" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (10 samples, 1.01%)</title><rect x="389.9" y="355.0" width="11.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="392.9" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.30%)</title><rect x="398.2" y="339.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="401.2" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.10%)</title><rect x="401.8" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="404.8" y="366.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.10%)</title><rect x="401.8" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="404.8" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="402.9" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="405.9" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.10%)</title><rect x="404.1" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="407.1" y="382.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.20%)</title><rect x="405.3" y="387.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="407.7" y="419.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.7" y="430.0"></text>
</g>
<g>
<title>__lll_lock_wait (100 samples, 10.06%)</title><rect x="408.9" y="419.0" width="118.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="411.9" y="430.0">__lll_lock_wait</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.10%)</title><rect x="440.9" y="403.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="443.9" y="414.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="440.9" y="387.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="443.9" y="398.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.10%)</title><rect x="440.9" y="371.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="443.9" y="382.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="440.9" y="355.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="443.9" y="366.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.10%)</title><rect x="440.9" y="339.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="443.9" y="350.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.10%)</title><rect x="440.9" y="323.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="443.9" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.10%)</title><rect x="440.9" y="307.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="443.9" y="318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (72 samples, 7.24%)</title><rect x="442.1" y="403.0" width="85.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="445.1" y="414.0">entry_SYSC..</text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.30%)</title><rect x="442.1" y="387.0" width="3.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="445.1" y="398.0"></text>
</g>
<g>
<title>do_syscall_64 (68 samples, 6.84%)</title><rect x="445.7" y="387.0" width="80.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="448.7" y="398.0">do_syscal..</text>
</g>
<g>
<title>__x64_sys_futex (42 samples, 4.23%)</title><rect x="456.4" y="371.0" width="49.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="459.4" y="382.0">__x64..</text>
</g>
<g>
<title>do_futex (38 samples, 3.82%)</title><rect x="459.9" y="355.0" width="45.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="462.9" y="366.0">do_f..</text>
</g>
<g>
<title>futex_wait (32 samples, 3.22%)</title><rect x="464.7" y="339.0" width="38.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="467.7" y="350.0">fut..</text>
</g>
<g>
<title>futex_wait_queue_me (13 samples, 1.31%)</title><rect x="471.8" y="323.0" width="15.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="474.8" y="334.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="475.4" y="307.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="478.4" y="318.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.30%)</title><rect x="476.5" y="307.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="479.5" y="318.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.10%)</title><rect x="480.1" y="307.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="483.1" y="318.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.50%)</title><rect x="481.3" y="307.0" width="5.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="484.3" y="318.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.50%)</title><rect x="481.3" y="291.0" width="5.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="484.3" y="302.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.40%)</title><rect x="482.5" y="275.0" width="4.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="485.5" y="286.0"></text>
</g>
<g>
<title>futex_wait_setup (12 samples, 1.21%)</title><rect x="487.2" y="323.0" width="14.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="490.2" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="494.3" y="307.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="497.3" y="318.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.20%)</title><rect x="495.5" y="307.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="498.5" y="318.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.10%)</title><rect x="496.7" y="291.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="499.7" y="302.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (2 samples, 0.20%)</title><rect x="497.9" y="307.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="500.9" y="318.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.10%)</title><rect x="500.3" y="307.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="503.3" y="318.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.10%)</title><rect x="501.5" y="323.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="504.5" y="334.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="502.7" y="339.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="505.7" y="350.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="503.8" y="339.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="506.8" y="350.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.10%)</title><rect x="505.0" y="355.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="508.0" y="366.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (14 samples, 1.41%)</title><rect x="506.2" y="371.0" width="16.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="509.2" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_exit (10 samples, 1.01%)</title><rect x="511.0" y="355.0" width="11.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="514.0" y="366.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.10%)</title><rect x="518.1" y="339.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="521.1" y="350.0"></text>
</g>
<g>
<title>unroll_tree_refs (3 samples, 0.30%)</title><rect x="519.3" y="339.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="522.3" y="350.0"></text>
</g>
<g>
<title>syscall_trace_enter (3 samples, 0.30%)</title><rect x="522.8" y="371.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="525.8" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="525.2" y="355.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="528.2" y="366.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="526.4" y="387.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="529.4" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (135 samples, 13.58%)</title><rect x="527.6" y="419.0" width="160.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="530.6" y="430.0">__lll_unlock_wake</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (130 samples, 13.08%)</title><rect x="533.5" y="403.0" width="154.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="536.5" y="414.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (130 samples, 13.08%)</title><rect x="533.5" y="387.0" width="154.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="536.5" y="398.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (117 samples, 11.77%)</title><rect x="539.5" y="371.0" width="138.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="542.5" y="382.0">__x64_sys_futex</text>
</g>
<g>
<title>do_futex (116 samples, 11.67%)</title><rect x="540.6" y="355.0" width="137.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="543.6" y="366.0">do_futex</text>
</g>
<g>
<title>futex_wake (114 samples, 11.47%)</title><rect x="541.8" y="339.0" width="135.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="544.8" y="350.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="549.0" y="323.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="552.0" y="334.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.30%)</title><rect x="550.1" y="323.0" width="3.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="553.1" y="334.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (2 samples, 0.20%)</title><rect x="551.3" y="307.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="554.3" y="318.0"></text>
</g>
<g>
<title>mark_wake_futex (12 samples, 1.21%)</title><rect x="553.7" y="323.0" width="14.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="556.7" y="334.0"></text>
</g>
<g>
<title>__unqueue_futex (4 samples, 0.40%)</title><rect x="562.0" y="307.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="565.0" y="318.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.10%)</title><rect x="566.8" y="307.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="569.8" y="318.0"></text>
</g>
<g>
<title>wake_up_q (92 samples, 9.26%)</title><rect x="567.9" y="323.0" width="109.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="570.9" y="334.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (90 samples, 9.05%)</title><rect x="570.3" y="307.0" width="106.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="573.3" y="318.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (90 samples, 9.05%)</title><rect x="570.3" y="291.0" width="106.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="573.3" y="302.0">__lock_text_s..</text>
</g>
<g>
<title>wake_up_q (1 samples, 0.10%)</title><rect x="677.2" y="339.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="680.2" y="350.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="678.4" y="371.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="681.4" y="382.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (4 samples, 0.40%)</title><rect x="679.5" y="371.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="682.5" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.20%)</title><rect x="680.7" y="355.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="683.7" y="366.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.10%)</title><rect x="683.1" y="355.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="686.1" y="366.0"></text>
</g>
<g>
<title>syscall_trace_enter (3 samples, 0.30%)</title><rect x="684.3" y="371.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="687.3" y="382.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="686.7" y="355.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="689.7" y="366.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.20%)</title><rect x="687.8" y="419.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="690.8" y="430.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.20%)</title><rect x="690.2" y="419.0" width="2.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="693.2" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.50%)</title><rect x="692.6" y="419.0" width="5.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="695.6" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.20%)</title><rect x="693.8" y="403.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.8" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.20%)</title><rect x="696.2" y="403.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.2" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.20%)</title><rect x="698.5" y="419.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="701.5" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.80%)</title><rect x="700.9" y="419.0" width="9.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="703.9" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.50%)</title><rect x="710.4" y="419.0" width="5.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="713.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.20%)</title><rect x="716.3" y="419.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="719.3" y="430.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.20%)</title><rect x="716.3" y="403.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="719.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="717.5" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="720.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (5 samples, 0.50%)</title><rect x="718.7" y="419.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="721.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.10%)</title><rect x="724.6" y="435.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() [clone .plt] (1 samples, 0.10%)</title><rect x="725.8" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="728.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() [clone .plt] (1 samples, 0.10%)</title><rect x="727.0" y="435.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="730.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.10%)</title><rect x="728.2" y="467.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="731.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (33 samples, 3.32%)</title><rect x="729.4" y="483.0" width="39.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="732.4" y="494.0">roc..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (33 samples, 3.32%)</title><rect x="729.4" y="467.0" width="39.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="732.4" y="478.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (5 samples, 0.50%)</title><rect x="729.4" y="451.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="732.4" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (5 samples, 0.50%)</title><rect x="729.4" y="435.0" width="5.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="732.4" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.10%)</title><rect x="729.4" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="732.4" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.20%)</title><rect x="730.6" y="419.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.6" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.20%)</title><rect x="733.0" y="419.0" width="2.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="736.0" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="734.1" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.1" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (8 samples, 0.80%)</title><rect x="735.3" y="451.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="738.3" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (8 samples, 0.80%)</title><rect x="735.3" y="435.0" width="9.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="738.3" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.60%)</title><rect x="735.3" y="419.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="738.3" y="430.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="736.5" y="403.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="739.5" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.20%)</title><rect x="737.7" y="403.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="740.7" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="740.1" y="403.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="743.1" y="414.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.10%)</title><rect x="740.1" y="387.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="743.1" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="741.3" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.3" y="414.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.20%)</title><rect x="742.5" y="419.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.5" y="430.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.30%)</title><rect x="744.8" y="451.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="747.8" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="746.0" y="435.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="749.0" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="746.0" y="419.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="749.0" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.20%)</title><rect x="746.0" y="403.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="749.0" y="414.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.20%)</title><rect x="746.0" y="387.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="749.0" y="398.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.20%)</title><rect x="746.0" y="371.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="749.0" y="382.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="746.0" y="355.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="749.0" y="366.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.10%)</title><rect x="746.0" y="339.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="749.0" y="350.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="747.2" y="355.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="750.2" y="366.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.10%)</title><rect x="747.2" y="339.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="750.2" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (12 samples, 1.21%)</title><rect x="748.4" y="451.0" width="14.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="751.4" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.21%)</title><rect x="748.4" y="435.0" width="14.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="751.4" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.21%)</title><rect x="748.4" y="419.0" width="14.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="751.4" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 1.21%)</title><rect x="748.4" y="403.0" width="14.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="751.4" y="414.0"></text>
</g>
<g>
<title>do_futex (12 samples, 1.21%)</title><rect x="748.4" y="387.0" width="14.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="751.4" y="398.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 1.21%)</title><rect x="748.4" y="371.0" width="14.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="751.4" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="748.4" y="355.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="751.4" y="366.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.20%)</title><rect x="749.6" y="355.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="752.6" y="366.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.20%)</title><rect x="749.6" y="339.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="752.6" y="350.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 0.91%)</title><rect x="752.0" y="355.0" width="10.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="755.0" y="366.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 0.91%)</title><rect x="752.0" y="339.0" width="10.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="755.0" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.91%)</title><rect x="752.0" y="323.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="755.0" y="334.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.20%)</title><rect x="762.6" y="451.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="765.6" y="462.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="763.8" y="435.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="766.8" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="765.0" y="451.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="768.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.20%)</title><rect x="766.2" y="451.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.2" y="462.0"></text>
</g>
<g>
<title>void rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindSpliceForLevel&lt;false&gt;(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node*, int, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Node**) (3 samples, 0.30%)</title><rect x="768.6" y="483.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="771.6" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni10546891661304564868.so (3 samples, 0.30%)</title><rect x="768.6" y="467.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="771.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.30%)</title><rect x="768.6" y="451.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="771.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.30%)</title><rect x="768.6" y="435.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.6" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.10%)</title><rect x="768.6" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.6" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.10%)</title><rect x="768.6" y="403.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="771.6" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.10%)</title><rect x="768.6" y="387.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="771.6" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="768.6" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="771.6" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.10%)</title><rect x="768.6" y="355.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.6" y="366.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="769.8" y="419.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="772.8" y="430.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="769.8" y="403.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="772.8" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="769.8" y="387.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="772.8" y="398.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.20%)</title><rect x="769.8" y="371.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="772.8" y="382.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.20%)</title><rect x="769.8" y="355.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="772.8" y="366.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.20%)</title><rect x="769.8" y="339.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="772.8" y="350.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.20%)</title><rect x="769.8" y="323.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="772.8" y="334.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.20%)</title><rect x="769.8" y="307.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="772.8" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="769.8" y="291.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="772.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.10%)</title><rect x="772.1" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="775.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (42 samples, 4.23%)</title><rect x="773.3" y="611.0" width="49.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.3" y="622.0">rocks..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="817.2" y="595.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="820.2" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="817.2" y="579.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="820.2" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="817.2" y="563.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="820.2" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="817.2" y="547.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="820.2" y="558.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="817.2" y="531.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="820.2" y="542.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.10%)</title><rect x="817.2" y="515.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="820.2" y="526.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="818.4" y="547.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="821.4" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="818.4" y="531.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="821.4" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="819.6" y="595.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="822.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.10%)</title><rect x="820.8" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.8" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="822.0" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="825.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="822.0" y="579.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="825.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="822.0" y="563.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="825.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (58 samples, 5.84%)</title><rect x="823.2" y="611.0" width="68.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.2" y="622.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (43 samples, 4.33%)</title><rect x="823.2" y="595.0" width="51.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="826.2" y="606.0">rocks..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="871.9" y="579.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="874.9" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="871.9" y="563.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="874.9" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="871.9" y="547.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="874.9" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="873.0" y="531.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="876.0" y="542.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="873.0" y="515.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="876.0" y="526.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.10%)</title><rect x="873.0" y="499.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="876.0" y="510.0"></text>
</g>
<g>
<title>sched_yield (15 samples, 1.51%)</title><rect x="874.2" y="595.0" width="17.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="877.2" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 1.41%)</title><rect x="875.4" y="579.0" width="16.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="878.4" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 1.41%)</title><rect x="875.4" y="563.0" width="16.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="878.4" y="574.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (8 samples, 0.80%)</title><rect x="880.2" y="547.0" width="9.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="883.2" y="558.0"></text>
</g>
<g>
<title>do_sched_yield (8 samples, 0.80%)</title><rect x="880.2" y="531.0" width="9.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="883.2" y="542.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.80%)</title><rect x="880.2" y="515.0" width="9.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="883.2" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (8 samples, 0.80%)</title><rect x="880.2" y="499.0" width="9.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="883.2" y="510.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="889.7" y="547.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="892.7" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="889.7" y="531.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="892.7" y="542.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="890.8" y="547.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="893.8" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="890.8" y="531.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="893.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="892.0" y="611.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.10%)</title><rect x="892.0" y="595.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="895.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.10%)</title><rect x="893.2" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="896.2" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.10%)</title><rect x="893.2" y="595.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="896.2" y="606.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.10%)</title><rect x="894.4" y="611.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="897.4" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="894.4" y="595.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.4" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="894.4" y="579.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.4" y="590.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="894.4" y="563.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="897.4" y="574.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="894.4" y="547.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="897.4" y="558.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) (1 samples, 0.10%)</title><rect x="895.6" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1 samples, 0.10%)</title><rect x="896.8" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.10%)</title><rect x="898.0" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.0" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="899.2" y="627.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="902.2" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="899.2" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="902.2" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="899.2" y="595.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="902.2" y="606.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="899.2" y="579.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="902.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="899.2" y="563.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="902.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="899.2" y="547.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="902.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.50%)</title><rect x="900.3" y="643.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.20%)</title><rect x="900.3" y="627.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.10%)</title><rect x="902.7" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.20%)</title><rect x="903.9" y="627.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="906.9" y="638.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() [clone .plt] (1 samples, 0.10%)</title><rect x="905.1" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.1" y="622.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.10%)</title><rect x="906.3" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.3" y="654.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.10%)</title><rect x="907.5" y="643.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="910.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.10%)</title><rect x="908.7" y="659.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="911.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.10%)</title><rect x="909.8" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.8" y="702.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.10%)</title><rect x="911.0" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 2.82%)</title><rect x="912.2" y="723.0" width="33.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="915.2" y="734.0">[u..</text>
</g>
<g>
<title>__GI_write (11 samples, 1.11%)</title><rect x="912.2" y="707.0" width="13.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="915.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.01%)</title><rect x="913.4" y="691.0" width="11.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="916.4" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 1.01%)</title><rect x="913.4" y="675.0" width="11.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="916.4" y="686.0"></text>
</g>
<g>
<title>__x64_sys_write (10 samples, 1.01%)</title><rect x="913.4" y="659.0" width="11.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="916.4" y="670.0"></text>
</g>
<g>
<title>ksys_write (10 samples, 1.01%)</title><rect x="913.4" y="643.0" width="11.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="916.4" y="654.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.20%)</title><rect x="913.4" y="627.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="916.4" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="914.6" y="611.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="917.6" y="622.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="914.6" y="595.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="917.6" y="606.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.10%)</title><rect x="915.8" y="627.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="918.8" y="638.0"></text>
</g>
<g>
<title>vfs_write (7 samples, 0.70%)</title><rect x="917.0" y="627.0" width="8.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="920.0" y="638.0"></text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.10%)</title><rect x="917.0" y="611.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="920.0" y="622.0"></text>
</g>
<g>
<title>__vfs_write (5 samples, 0.50%)</title><rect x="918.1" y="611.0" width="6.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="921.1" y="622.0"></text>
</g>
<g>
<title>new_sync_write (5 samples, 0.50%)</title><rect x="918.1" y="595.0" width="6.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="921.1" y="606.0"></text>
</g>
<g>
<title>ext4_file_write_iter (5 samples, 0.50%)</title><rect x="918.1" y="579.0" width="6.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="921.1" y="590.0"></text>
</g>
<g>
<title>__generic_file_write_iter (5 samples, 0.50%)</title><rect x="918.1" y="563.0" width="6.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="921.1" y="574.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 0.50%)</title><rect x="918.1" y="547.0" width="6.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="921.1" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.10%)</title><rect x="918.1" y="531.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="921.1" y="542.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.10%)</title><rect x="918.1" y="515.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="921.1" y="526.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.10%)</title><rect x="918.1" y="499.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="921.1" y="510.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.10%)</title><rect x="918.1" y="483.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="921.1" y="494.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.10%)</title><rect x="918.1" y="467.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="921.1" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_end (4 samples, 0.40%)</title><rect x="919.3" y="531.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="922.3" y="542.0"></text>
</g>
<g>
<title>generic_write_end (4 samples, 0.40%)</title><rect x="919.3" y="515.0" width="4.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="922.3" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (4 samples, 0.40%)</title><rect x="919.3" y="499.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="922.3" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (4 samples, 0.40%)</title><rect x="919.3" y="483.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="922.3" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (4 samples, 0.40%)</title><rect x="919.3" y="467.0" width="4.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="922.3" y="478.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (3 samples, 0.30%)</title><rect x="919.3" y="451.0" width="3.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="922.3" y="462.0"></text>
</g>
<g>
<title>ext4_do_update_inode (3 samples, 0.30%)</title><rect x="919.3" y="435.0" width="3.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="922.3" y="446.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.10%)</title><rect x="919.3" y="419.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="922.3" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.10%)</title><rect x="920.5" y="419.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="923.5" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.10%)</title><rect x="920.5" y="403.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="923.5" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.10%)</title><rect x="920.5" y="387.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="923.5" y="398.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.10%)</title><rect x="920.5" y="371.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="923.5" y="382.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.10%)</title><rect x="921.7" y="419.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="924.7" y="430.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.10%)</title><rect x="921.7" y="403.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="924.7" y="414.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.10%)</title><rect x="922.9" y="451.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="925.9" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.10%)</title><rect x="922.9" y="435.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="925.9" y="446.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.10%)</title><rect x="922.9" y="419.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="925.9" y="430.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.10%)</title><rect x="922.9" y="403.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="925.9" y="414.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.10%)</title><rect x="924.1" y="611.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="927.1" y="622.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.10%)</title><rect x="924.1" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="927.1" y="606.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.10%)</title><rect x="924.1" y="579.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="927.1" y="590.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.10%)</title><rect x="924.1" y="563.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="927.1" y="574.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.10%)</title><rect x="924.1" y="547.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="927.1" y="558.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.10%)</title><rect x="925.3" y="707.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="928.3" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="925.3" y="691.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="928.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="925.3" y="675.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="928.3" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.10%)</title><rect x="925.3" y="659.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="928.3" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="925.3" y="643.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="928.3" y="654.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.10%)</title><rect x="925.3" y="627.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="928.3" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="925.3" y="611.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="928.3" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="926.5" y="707.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="929.5" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="927.6" y="707.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="930.6" y="718.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.30%)</title><rect x="928.8" y="707.0" width="3.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="931.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="928.8" y="691.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="931.8" y="702.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.20%)</title><rect x="930.0" y="691.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="933.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="930.0" y="675.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="933.0" y="686.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (11 samples, 1.11%)</title><rect x="932.4" y="707.0" width="13.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="935.4" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.91%)</title><rect x="934.8" y="691.0" width="10.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="937.8" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.91%)</title><rect x="934.8" y="675.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="937.8" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.40%)</title><rect x="937.1" y="659.0" width="4.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="940.1" y="670.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.40%)</title><rect x="937.1" y="643.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="940.1" y="654.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.30%)</title><rect x="938.3" y="627.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="941.3" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.10%)</title><rect x="939.5" y="611.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="942.5" y="622.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="939.5" y="595.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="942.5" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.10%)</title><rect x="939.5" y="579.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="942.5" y="590.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="940.7" y="611.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="943.7" y="622.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (3 samples, 0.30%)</title><rect x="941.9" y="659.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="944.9" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.20%)</title><rect x="943.1" y="643.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="946.1" y="654.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.10%)</title><rect x="944.3" y="627.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="947.3" y="638.0"></text>
</g>
<g>
<title>__malloc (3 samples, 0.30%)</title><rect x="945.5" y="723.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="948.5" y="734.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="949.0" y="723.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="952.0" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (18 samples, 1.81%)</title><rect x="950.2" y="723.0" width="21.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="953.2" y="734.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (18 samples, 1.81%)</title><rect x="950.2" y="707.0" width="21.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="953.2" y="718.0">e..</text>
</g>
<g>
<title>do_syscall_64 (18 samples, 1.81%)</title><rect x="950.2" y="691.0" width="21.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="953.2" y="702.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (17 samples, 1.71%)</title><rect x="950.2" y="675.0" width="20.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="953.2" y="686.0"></text>
</g>
<g>
<title>do_futex (17 samples, 1.71%)</title><rect x="950.2" y="659.0" width="20.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="953.2" y="670.0"></text>
</g>
<g>
<title>futex_wake (16 samples, 1.61%)</title><rect x="950.2" y="643.0" width="19.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="953.2" y="654.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.20%)</title><rect x="952.6" y="627.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="955.6" y="638.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 1.21%)</title><rect x="954.9" y="627.0" width="14.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="957.9" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (12 samples, 1.21%)</title><rect x="954.9" y="611.0" width="14.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="957.9" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (12 samples, 1.21%)</title><rect x="954.9" y="595.0" width="14.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="957.9" y="606.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.10%)</title><rect x="969.2" y="643.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="972.2" y="654.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.10%)</title><rect x="970.4" y="675.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="973.4" y="686.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.10%)</title><rect x="970.4" y="659.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="973.4" y="670.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.20%)</title><rect x="971.6" y="723.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="974.6" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (18 samples, 1.81%)</title><rect x="973.9" y="723.0" width="21.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="976.9" y="734.0">o..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (94 samples, 9.46%)</title><rect x="995.3" y="723.0" width="111.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="998.3" y="734.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (92 samples, 9.26%)</title><rect x="997.7" y="707.0" width="109.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1000.7" y="718.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.20%)</title><rect x="1000.1" y="691.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1003.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.20%)</title><rect x="1000.1" y="675.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1003.1" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (88 samples, 8.85%)</title><rect x="1002.4" y="691.0" width="104.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.4" y="702.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (6 samples, 0.60%)</title><rect x="1002.4" y="675.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.4" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (82 samples, 8.25%)</title><rect x="1009.6" y="675.0" width="97.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1012.6" y="686.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (80 samples, 8.05%)</title><rect x="1011.9" y="659.0" width="95.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.9" y="670.0">org/rocksdb..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (72 samples, 7.24%)</title><rect x="1019.1" y="643.0" width="85.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1022.1" y="654.0">Java_org_r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.20%)</title><rect x="1020.2" y="627.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.2" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.40%)</title><rect x="1022.6" y="627.0" width="4.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1025.6" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.80%)</title><rect x="1027.4" y="627.0" width="9.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1030.4" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="1028.6" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.6" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.40%)</title><rect x="1029.7" y="611.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.7" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.20%)</title><rect x="1034.5" y="611.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.5" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (41 samples, 4.12%)</title><rect x="1036.9" y="627.0" width="48.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1039.9" y="638.0">jni_..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.40%)</title><rect x="1042.8" y="611.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.8" y="622.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.30%)</title><rect x="1047.5" y="611.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.5" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.50%)</title><rect x="1051.1" y="611.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.1" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (7 samples, 0.70%)</title><rect x="1057.0" y="611.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.0" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 1.71%)</title><rect x="1065.4" y="611.0" width="20.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (13 samples, 1.31%)</title><rect x="1068.9" y="595.0" width="15.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.9" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.70%)</title><rect x="1072.5" y="579.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.5" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="1076.0" y="563.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.0" y="574.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.20%)</title><rect x="1077.2" y="563.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.2" y="574.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.10%)</title><rect x="1079.6" y="563.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1082.6" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="1080.8" y="579.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1083.8" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.20%)</title><rect x="1082.0" y="579.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1085.0" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="1084.3" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.3" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 1.31%)</title><rect x="1085.5" y="627.0" width="15.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1088.5" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="1089.1" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.1" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1090.3" y="611.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.3" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.10%)</title><rect x="1091.5" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.5" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.60%)</title><rect x="1092.7" y="611.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.7" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="1099.8" y="611.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1102.8" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="1099.8" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.8" y="606.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.10%)</title><rect x="1101.0" y="627.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1104.0" y="638.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.20%)</title><rect x="1102.2" y="627.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.2" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.10%)</title><rect x="1104.5" y="643.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1107.5" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.10%)</title><rect x="1105.7" y="643.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1108.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.fromBytes (1 samples, 0.10%)</title><rect x="1106.9" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1109.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.10%)</title><rect x="1106.9" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1109.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.10%)</title><rect x="1106.9" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1109.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1106.9" y="723.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1109.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1106.9" y="707.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1109.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1106.9" y="691.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1109.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1106.9" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1109.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1106.9" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.9" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (56 samples, 5.63%)</title><rect x="1108.1" y="867.0" width="66.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1111.1" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (18 samples, 1.81%)</title><rect x="1110.5" y="851.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.5" y="862.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (18 samples, 1.81%)</title><rect x="1110.5" y="835.0" width="21.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1113.5" y="846.0">o..</text>
</g>
<g>
<title>[unknown] (16 samples, 1.61%)</title><rect x="1111.6" y="819.0" width="19.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1114.6" y="830.0"></text>
</g>
<g>
<title>epoll_wait (16 samples, 1.61%)</title><rect x="1111.6" y="803.0" width="19.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1114.6" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (15 samples, 1.51%)</title><rect x="1112.8" y="787.0" width="17.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1115.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (15 samples, 1.51%)</title><rect x="1112.8" y="771.0" width="17.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1115.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (14 samples, 1.41%)</title><rect x="1114.0" y="755.0" width="16.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1117.0" y="766.0"></text>
</g>
<g>
<title>do_epoll_wait (14 samples, 1.41%)</title><rect x="1114.0" y="739.0" width="16.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1117.0" y="750.0"></text>
</g>
<g>
<title>ep_poll (12 samples, 1.21%)</title><rect x="1115.2" y="723.0" width="14.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1118.2" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (7 samples, 0.70%)</title><rect x="1118.8" y="707.0" width="8.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1121.8" y="718.0"></text>
</g>
<g>
<title>ep_send_events_proc (6 samples, 0.60%)</title><rect x="1120.0" y="691.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1123.0" y="702.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (5 samples, 0.50%)</title><rect x="1120.0" y="675.0" width="5.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1123.0" y="686.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.30%)</title><rect x="1122.3" y="659.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1125.3" y="670.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.10%)</title><rect x="1124.7" y="643.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1127.7" y="654.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.10%)</title><rect x="1125.9" y="675.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1128.9" y="686.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.20%)</title><rect x="1127.1" y="707.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1130.1" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.10%)</title><rect x="1128.3" y="691.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.10%)</title><rect x="1129.5" y="723.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1132.5" y="734.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.10%)</title><rect x="1130.6" y="819.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1133.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (36 samples, 3.62%)</title><rect x="1131.8" y="851.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1134.8" y="862.0">one/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.10%)</title><rect x="1131.8" y="835.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1134.8" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (35 samples, 3.52%)</title><rect x="1133.0" y="835.0" width="41.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1136.0" y="846.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (17 samples, 1.71%)</title><rect x="1133.0" y="819.0" width="20.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1136.0" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="1134.2" y="803.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1137.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.60%)</title><rect x="1135.4" y="803.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1138.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.60%)</title><rect x="1135.4" y="787.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1138.4" y="798.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (5 samples, 0.50%)</title><rect x="1135.4" y="771.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (5 samples, 0.50%)</title><rect x="1135.4" y="755.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1138.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.50%)</title><rect x="1135.4" y="739.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 0.50%)</title><rect x="1135.4" y="723.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (5 samples, 0.50%)</title><rect x="1135.4" y="707.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.50%)</title><rect x="1135.4" y="691.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1138.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.50%)</title><rect x="1135.4" y="675.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.50%)</title><rect x="1135.4" y="659.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.50%)</title><rect x="1135.4" y="643.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.40%)</title><rect x="1136.6" y="627.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1139.6" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.10%)</title><rect x="1136.6" y="611.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1139.6" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="1136.6" y="595.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1139.6" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.30%)</title><rect x="1137.8" y="611.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1140.8" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="1139.0" y="595.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1142.0" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="1139.0" y="579.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1142.0" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.20%)</title><rect x="1139.0" y="563.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1142.0" y="574.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.20%)</title><rect x="1139.0" y="547.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1142.0" y="558.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.20%)</title><rect x="1139.0" y="531.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1142.0" y="542.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.20%)</title><rect x="1139.0" y="515.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1142.0" y="526.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.20%)</title><rect x="1139.0" y="499.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1142.0" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.20%)</title><rect x="1139.0" y="483.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1142.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.10%)</title><rect x="1141.3" y="771.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1144.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="1141.3" y="755.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1144.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="1141.3" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1144.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="1141.3" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.20%)</title><rect x="1142.5" y="803.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1145.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1142.5" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1145.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1142.5" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="1142.5" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1145.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.10%)</title><rect x="1143.7" y="787.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1146.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.10%)</title><rect x="1144.9" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1147.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.10%)</title><rect x="1144.9" y="787.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1147.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.30%)</title><rect x="1146.1" y="803.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1149.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.20%)</title><rect x="1147.3" y="787.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1150.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.20%)</title><rect x="1147.3" y="771.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1150.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.30%)</title><rect x="1149.6" y="803.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1152.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.20%)</title><rect x="1150.8" y="787.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 1.81%)</title><rect x="1153.2" y="819.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.2" y="830.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (18 samples, 1.81%)</title><rect x="1153.2" y="803.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1156.2" y="814.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.50%)</title><rect x="1154.4" y="787.0" width="5.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.20%)</title><rect x="1154.4" y="771.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.4" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.10%)</title><rect x="1156.8" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="782.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="1157.9" y="771.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1160.9" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.10%)</title><rect x="1159.1" y="771.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1162.1" y="782.0"></text>
</g>
<g>
<title>__GI___recv (12 samples, 1.21%)</title><rect x="1160.3" y="787.0" width="14.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1163.3" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.21%)</title><rect x="1160.3" y="771.0" width="14.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.21%)</title><rect x="1160.3" y="755.0" width="14.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.10%)</title><rect x="1160.3" y="739.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1163.3" y="750.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (10 samples, 1.01%)</title><rect x="1161.5" y="739.0" width="11.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1164.5" y="750.0"></text>
</g>
<g>
<title>__sys_recvfrom (10 samples, 1.01%)</title><rect x="1161.5" y="723.0" width="11.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1164.5" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (10 samples, 1.01%)</title><rect x="1161.5" y="707.0" width="11.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.10%)</title><rect x="1161.5" y="691.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>inet6_recvmsg (8 samples, 0.80%)</title><rect x="1162.7" y="691.0" width="9.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (6 samples, 0.60%)</title><rect x="1165.1" y="675.0" width="7.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1168.1" y="686.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="1166.3" y="659.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.10%)</title><rect x="1166.3" y="643.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1169.3" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.10%)</title><rect x="1166.3" y="627.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1169.3" y="638.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="1167.4" y="659.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1170.4" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="1167.4" y="643.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1170.4" y="654.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.30%)</title><rect x="1168.6" y="659.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1171.6" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (3 samples, 0.30%)</title><rect x="1168.6" y="643.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1171.6" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.20%)</title><rect x="1169.8" y="627.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1172.8" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.20%)</title><rect x="1169.8" y="611.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1172.8" y="622.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.20%)</title><rect x="1169.8" y="595.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1172.8" y="606.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.10%)</title><rect x="1172.2" y="691.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1175.2" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.10%)</title><rect x="1172.2" y="675.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.10%)</title><rect x="1172.2" y="659.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.10%)</title><rect x="1172.2" y="643.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.10%)</title><rect x="1173.4" y="739.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1176.4" y="750.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.10%)</title><rect x="1173.4" y="723.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1176.4" y="734.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.10%)</title><rect x="1173.4" y="707.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1176.4" y="718.0"></text>
</g>
<g>
<title>start_thread (13 samples, 1.31%)</title><rect x="1174.6" y="867.0" width="15.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1177.6" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 1.31%)</title><rect x="1174.6" y="851.0" width="15.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.6" y="862.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 1.31%)</title><rect x="1174.6" y="835.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.6" y="846.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.70%)</title><rect x="1174.6" y="819.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 0.70%)</title><rect x="1174.6" y="803.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.6" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.50%)</title><rect x="1174.6" y="787.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.6" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1174.6" y="771.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1174.6" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.40%)</title><rect x="1175.8" y="771.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="1180.5" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="1180.5" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1180.5" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1180.5" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.10%)</title><rect x="1180.5" y="723.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.10%)</title><rect x="1180.5" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1180.5" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="1181.7" y="787.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.10%)</title><rect x="1181.7" y="771.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="1181.7" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.10%)</title><rect x="1181.7" y="739.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.10%)</title><rect x="1181.7" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.10%)</title><rect x="1181.7" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1181.7" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.60%)</title><rect x="1182.9" y="819.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 0.60%)</title><rect x="1182.9" y="803.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 0.60%)</title><rect x="1182.9" y="787.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.60%)</title><rect x="1182.9" y="771.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 0.60%)</title><rect x="1182.9" y="755.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.30%)</title><rect x="1182.9" y="739.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.30%)</title><rect x="1182.9" y="723.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1182.9" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1184.1" y="707.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1184.1" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1185.3" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.30%)</title><rect x="1186.4" y="739.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="750.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (2 samples, 0.20%)</title><rect x="1186.4" y="723.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.20%)</title><rect x="1186.4" y="707.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1186.4" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1186.4" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.4" y="686.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1186.4" y="659.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) [clone .part.101] (1 samples, 0.10%)</title><rect x="1187.6" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
</g>
</svg>
