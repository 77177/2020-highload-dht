<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (215 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.47%)</title><rect x="10.0" y="883.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.47%)</title><rect x="10.0" y="867.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.47%)</title><rect x="10.0" y="851.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.47%)</title><rect x="10.0" y="835.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.47%)</title><rect x="10.0" y="819.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.47%)</title><rect x="15.5" y="883.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.5" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.47%)</title><rect x="15.5" y="867.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.5" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.47%)</title><rect x="15.5" y="851.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.5" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.47%)</title><rect x="15.5" y="835.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.5" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.47%)</title><rect x="15.5" y="819.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 1.40%)</title><rect x="21.0" y="883.0" width="16.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="24.0" y="894.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.47%)</title><rect x="21.0" y="867.0" width="5.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="24.0" y="878.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.93%)</title><rect x="26.5" y="867.0" width="10.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.5" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.93%)</title><rect x="26.5" y="851.0" width="10.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="29.5" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.47%)</title><rect x="26.5" y="835.0" width="5.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="29.5" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.47%)</title><rect x="32.0" y="835.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="35.0" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.47%)</title><rect x="32.0" y="819.0" width="5.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.0" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.47%)</title><rect x="32.0" y="803.0" width="5.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="35.0" y="814.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.47%)</title><rect x="32.0" y="787.0" width="5.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="35.0" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.47%)</title><rect x="32.0" y="771.0" width="5.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="35.0" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.47%)</title><rect x="32.0" y="755.0" width="5.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="35.0" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 2.79%)</title><rect x="37.4" y="883.0" width="33.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.4" y="894.0">[u..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.33%)</title><rect x="37.4" y="867.0" width="27.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="40.4" y="878.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.33%)</title><rect x="37.4" y="851.0" width="27.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="40.4" y="862.0">e..</text>
</g>
<g>
<title>do_syscall_64 (5 samples, 2.33%)</title><rect x="37.4" y="835.0" width="27.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="40.4" y="846.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 1.40%)</title><rect x="37.4" y="819.0" width="16.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="40.4" y="830.0"></text>
</g>
<g>
<title>do_futex (3 samples, 1.40%)</title><rect x="37.4" y="803.0" width="16.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="40.4" y="814.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 1.40%)</title><rect x="37.4" y="787.0" width="16.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="40.4" y="798.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 1.40%)</title><rect x="37.4" y="771.0" width="16.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="40.4" y="782.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 1.40%)</title><rect x="37.4" y="755.0" width="16.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="40.4" y="766.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 1.40%)</title><rect x="37.4" y="739.0" width="16.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="40.4" y="750.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.47%)</title><rect x="53.9" y="819.0" width="5.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="56.9" y="830.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.47%)</title><rect x="53.9" y="803.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="56.9" y="814.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.47%)</title><rect x="59.4" y="819.0" width="5.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="62.4" y="830.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.47%)</title><rect x="59.4" y="803.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="62.4" y="814.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.47%)</title><rect x="64.9" y="867.0" width="5.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="67.9" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.93%)</title><rect x="70.4" y="883.0" width="10.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="73.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer$FinalizerThread.run (1 samples, 0.47%)</title><rect x="81.3" y="883.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.47%)</title><rect x="81.3" y="867.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.47%)</title><rect x="81.3" y="851.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.47%)</title><rect x="81.3" y="835.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.3" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (149 samples, 69.30%)</title><rect x="86.8" y="883.0" width="817.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.8" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.47%)</title><rect x="114.3" y="867.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5 samples, 2.33%)</title><rect x="119.8" y="867.0" width="27.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.8" y="878.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (5 samples, 2.33%)</title><rect x="119.8" y="851.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.8" y="862.0">o..</text>
</g>
<g>
<title>[unknown] (4 samples, 1.86%)</title><rect x="119.8" y="835.0" width="21.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="122.8" y="846.0">[..</text>
</g>
<g>
<title>epoll_wait (4 samples, 1.86%)</title><rect x="119.8" y="819.0" width="21.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="122.8" y="830.0">e..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.86%)</title><rect x="119.8" y="803.0" width="21.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="122.8" y="814.0">e..</text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.86%)</title><rect x="119.8" y="787.0" width="21.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="122.8" y="798.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.93%)</title><rect x="125.3" y="771.0" width="10.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="128.3" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.93%)</title><rect x="125.3" y="755.0" width="10.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="128.3" y="766.0"></text>
</g>
<g>
<title>ep_poll (2 samples, 0.93%)</title><rect x="125.3" y="739.0" width="10.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="128.3" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.47%)</title><rect x="125.3" y="723.0" width="5.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="128.3" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.47%)</title><rect x="125.3" y="707.0" width="5.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="128.3" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.47%)</title><rect x="125.3" y="691.0" width="5.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="128.3" y="702.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.47%)</title><rect x="125.3" y="675.0" width="5.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="128.3" y="686.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.47%)</title><rect x="130.7" y="723.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="133.7" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.47%)</title><rect x="130.7" y="707.0" width="5.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="133.7" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.47%)</title><rect x="130.7" y="691.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="133.7" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.47%)</title><rect x="130.7" y="675.0" width="5.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="133.7" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.47%)</title><rect x="130.7" y="659.0" width="5.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="133.7" y="670.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.47%)</title><rect x="136.2" y="771.0" width="5.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="139.2" y="782.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.47%)</title><rect x="141.7" y="835.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="144.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (138 samples, 64.19%)</title><rect x="147.2" y="867.0" width="757.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="150.2" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (138 samples, 64.19%)</title><rect x="147.2" y="851.0" width="757.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.2" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (131 samples, 60.93%)</title><rect x="147.2" y="835.0" width="719.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.2" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (129 samples, 60.00%)</title><rect x="147.2" y="819.0" width="708.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.2" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (129 samples, 60.00%)</title><rect x="147.2" y="803.0" width="708.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.2" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (128 samples, 59.53%)</title><rect x="147.2" y="787.0" width="702.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.2" y="798.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 15.35%)</title><rect x="147.2" y="771.0" width="181.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.2" y="782.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (33 samples, 15.35%)</title><rect x="147.2" y="755.0" width="181.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.2" y="766.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 15.35%)</title><rect x="147.2" y="739.0" width="181.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.2" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 15.35%)</title><rect x="147.2" y="723.0" width="181.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.2" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (33 samples, 15.35%)</title><rect x="147.2" y="707.0" width="181.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.2" y="718.0">one/nio/net/Session$Arr..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (33 samples, 15.35%)</title><rect x="147.2" y="691.0" width="181.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.2" y="702.0">one/nio/net/NativeSocke..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.93%)</title><rect x="147.2" y="675.0" width="11.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="150.2" y="686.0"></text>
</g>
<g>
<title>__libc_send (30 samples, 13.95%)</title><rect x="158.2" y="675.0" width="164.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="161.2" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 13.95%)</title><rect x="158.2" y="659.0" width="164.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="161.2" y="670.0">entry_SYSCALL_64_afte..</text>
</g>
<g>
<title>do_syscall_64 (30 samples, 13.95%)</title><rect x="158.2" y="643.0" width="164.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="161.2" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (30 samples, 13.95%)</title><rect x="158.2" y="627.0" width="164.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="161.2" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (30 samples, 13.95%)</title><rect x="158.2" y="611.0" width="164.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="161.2" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (27 samples, 12.56%)</title><rect x="163.7" y="595.0" width="148.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="166.7" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (27 samples, 12.56%)</title><rect x="163.7" y="579.0" width="148.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="166.7" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (27 samples, 12.56%)</title><rect x="163.7" y="563.0" width="148.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="166.7" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_push (2 samples, 0.93%)</title><rect x="163.7" y="547.0" width="11.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="166.7" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (24 samples, 11.16%)</title><rect x="174.7" y="547.0" width="131.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="177.7" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.47%)</title><rect x="180.1" y="531.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="183.1" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.47%)</title><rect x="180.1" y="515.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="183.1" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.47%)</title><rect x="180.1" y="499.0" width="5.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="183.1" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.47%)</title><rect x="185.6" y="531.0" width="5.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="188.6" y="542.0"></text>
</g>
<g>
<title>tcp_push (21 samples, 9.77%)</title><rect x="191.1" y="531.0" width="115.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="194.1" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (21 samples, 9.77%)</title><rect x="191.1" y="515.0" width="115.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="194.1" y="526.0">__tcp_push_pen..</text>
</g>
<g>
<title>tcp_write_xmit (21 samples, 9.77%)</title><rect x="191.1" y="499.0" width="115.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="194.1" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 9.30%)</title><rect x="191.1" y="483.0" width="109.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="194.1" y="494.0">__tcp_transmi..</text>
</g>
<g>
<title>ip_queue_xmit (19 samples, 8.84%)</title><rect x="196.6" y="467.0" width="104.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="199.6" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (19 samples, 8.84%)</title><rect x="196.6" y="451.0" width="104.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="199.6" y="462.0">__ip_queue_x..</text>
</g>
<g>
<title>ip_local_out (19 samples, 8.84%)</title><rect x="196.6" y="435.0" width="104.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="199.6" y="446.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 1.86%)</title><rect x="196.6" y="419.0" width="22.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="199.6" y="430.0">_..</text>
</g>
<g>
<title>nf_hook_slow (4 samples, 1.86%)</title><rect x="196.6" y="403.0" width="22.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="199.6" y="414.0">n..</text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (4 samples, 1.86%)</title><rect x="196.6" y="387.0" width="22.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="199.6" y="398.0">i..</text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 1.40%)</title><rect x="196.6" y="371.0" width="16.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="199.6" y="382.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (2 samples, 0.93%)</title><rect x="202.1" y="355.0" width="11.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="205.1" y="366.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (1 samples, 0.47%)</title><rect x="207.6" y="339.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="210.6" y="350.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (1 samples, 0.47%)</title><rect x="213.1" y="371.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="216.1" y="382.0"></text>
</g>
<g>
<title>ip_output (15 samples, 6.98%)</title><rect x="218.6" y="419.0" width="82.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="221.6" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (14 samples, 6.51%)</title><rect x="224.0" y="403.0" width="76.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="227.0" y="414.0">ip_finis..</text>
</g>
<g>
<title>__ip_finish_output (14 samples, 6.51%)</title><rect x="224.0" y="387.0" width="76.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="227.0" y="398.0">__ip_fin..</text>
</g>
<g>
<title>ip_finish_output2 (14 samples, 6.51%)</title><rect x="224.0" y="371.0" width="76.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="227.0" y="382.0">ip_finis..</text>
</g>
<g>
<title>__local_bh_enable_ip (12 samples, 5.58%)</title><rect x="235.0" y="355.0" width="65.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="238.0" y="366.0">__local..</text>
</g>
<g>
<title>do_softirq.part.20 (11 samples, 5.12%)</title><rect x="240.5" y="339.0" width="60.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="243.5" y="350.0">do_sof..</text>
</g>
<g>
<title>do_softirq_own_stack (11 samples, 5.12%)</title><rect x="240.5" y="323.0" width="60.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="243.5" y="334.0">do_sof..</text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 5.12%)</title><rect x="240.5" y="307.0" width="60.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="243.5" y="318.0">__soft..</text>
</g>
<g>
<title>net_rx_action (11 samples, 5.12%)</title><rect x="240.5" y="291.0" width="60.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="243.5" y="302.0">net_rx..</text>
</g>
<g>
<title>process_backlog (11 samples, 5.12%)</title><rect x="240.5" y="275.0" width="60.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="243.5" y="286.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (10 samples, 4.65%)</title><rect x="240.5" y="259.0" width="54.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="243.5" y="270.0">__net..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (10 samples, 4.65%)</title><rect x="240.5" y="243.0" width="54.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="243.5" y="254.0">__net..</text>
</g>
<g>
<title>ip_rcv (9 samples, 4.19%)</title><rect x="240.5" y="227.0" width="49.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="243.5" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (9 samples, 4.19%)</title><rect x="240.5" y="211.0" width="49.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="243.5" y="222.0">ip_rc..</text>
</g>
<g>
<title>ip_local_deliver (9 samples, 4.19%)</title><rect x="240.5" y="195.0" width="49.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="243.5" y="206.0">ip_lo..</text>
</g>
<g>
<title>ip_local_deliver_finish (9 samples, 4.19%)</title><rect x="240.5" y="179.0" width="49.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="243.5" y="190.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (9 samples, 4.19%)</title><rect x="240.5" y="163.0" width="49.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="243.5" y="174.0">ip_pr..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.47%)</title><rect x="240.5" y="147.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="243.5" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (8 samples, 3.72%)</title><rect x="246.0" y="147.0" width="43.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="249.0" y="158.0">tcp_..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.47%)</title><rect x="246.0" y="131.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="249.0" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.47%)</title><rect x="246.0" y="115.0" width="5.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="249.0" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (7 samples, 3.26%)</title><rect x="251.5" y="131.0" width="38.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="254.5" y="142.0">tcp..</text>
</g>
<g>
<title>tcp_rcv_established (7 samples, 3.26%)</title><rect x="251.5" y="115.0" width="38.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="254.5" y="126.0">tcp..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.93%)</title><rect x="251.5" y="99.0" width="11.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="254.5" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.93%)</title><rect x="251.5" y="83.0" width="11.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="254.5" y="94.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.47%)</title><rect x="251.5" y="67.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="254.5" y="78.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.47%)</title><rect x="257.0" y="67.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="260.0" y="78.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.47%)</title><rect x="257.0" y="51.0" width="5.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="260.0" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.47%)</title><rect x="257.0" y="35.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="260.0" y="46.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.47%)</title><rect x="262.5" y="99.0" width="5.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="265.5" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.47%)</title><rect x="262.5" y="83.0" width="5.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="265.5" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.47%)</title><rect x="262.5" y="67.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="265.5" y="78.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.47%)</title><rect x="262.5" y="51.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="265.5" y="62.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.47%)</title><rect x="262.5" y="35.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="265.5" y="46.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.47%)</title><rect x="268.0" y="99.0" width="5.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="271.0" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (2 samples, 0.93%)</title><rect x="273.4" y="99.0" width="11.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="276.4" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (2 samples, 0.93%)</title><rect x="273.4" y="83.0" width="11.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="276.4" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.47%)</title><rect x="278.9" y="67.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="281.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.47%)</title><rect x="278.9" y="51.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="281.9" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.47%)</title><rect x="278.9" y="35.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="281.9" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.47%)</title><rect x="284.4" y="99.0" width="5.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="287.4" y="110.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.47%)</title><rect x="289.9" y="227.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="292.9" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.47%)</title><rect x="295.4" y="259.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="298.4" y="270.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.47%)</title><rect x="300.9" y="483.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="303.9" y="494.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.47%)</title><rect x="306.4" y="547.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="309.4" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.93%)</title><rect x="311.9" y="595.0" width="10.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="314.9" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.47%)</title><rect x="317.3" y="579.0" width="5.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="320.3" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.47%)</title><rect x="317.3" y="563.0" width="5.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="320.3" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.47%)</title><rect x="317.3" y="547.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="320.3" y="558.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.47%)</title><rect x="322.8" y="675.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="325.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.47%)</title><rect x="328.3" y="771.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.47%)</title><rect x="328.3" y="755.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.47%)</title><rect x="328.3" y="739.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.47%)</title><rect x="328.3" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.47%)</title><rect x="328.3" y="707.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.get (94 samples, 43.72%)</title><rect x="333.8" y="771.0" width="515.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.8" y="782.0">ru/mail/polis/service/stasyanoi/CustomServer.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (3 samples, 1.40%)</title><rect x="333.8" y="755.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 1.40%)</title><rect x="333.8" y="739.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.47%)</title><rect x="339.3" y="723.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.47%)</title><rect x="344.8" y="723.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.47%)</title><rect x="344.8" y="707.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.47%)</title><rect x="344.8" y="691.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.get (91 samples, 42.33%)</title><rect x="350.3" y="755.0" width="499.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.3" y="766.0">ru/mail/polis/dao/stasyanoi/DAOImpl.get</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (3 samples, 1.40%)</title><rect x="361.3" y="739.0" width="16.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="364.3" y="750.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.47%)</title><rect x="366.7" y="723.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="369.7" y="734.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.47%)</title><rect x="372.2" y="723.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="375.2" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.47%)</title><rect x="372.2" y="707.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.2" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.47%)</title><rect x="372.2" y="691.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="375.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.47%)</title><rect x="377.7" y="739.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (1 samples, 0.47%)</title><rect x="383.2" y="739.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.iterator (79 samples, 36.74%)</title><rect x="388.7" y="739.0" width="433.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.7" y="750.0">ru/mail/polis/dao/stasyanoi/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator (78 samples, 36.28%)</title><rect x="394.2" y="723.0" width="428.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="397.2" y="734.0">ru/mail/polis/dao/stasyanoi/DAOImpl.getIterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (11 samples, 5.12%)</title><rect x="399.7" y="707.0" width="60.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.7" y="718.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (10 samples, 4.65%)</title><rect x="399.7" y="691.0" width="54.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.7" y="702.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (9 samples, 4.19%)</title><rect x="399.7" y="675.0" width="49.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="402.7" y="686.0">Java_..</text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.47%)</title><rect x="399.7" y="659.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="402.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (8 samples, 3.72%)</title><rect x="405.2" y="659.0" width="43.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="408.2" y="670.0">rock..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::GetRangeDelAggregator() (1 samples, 0.47%)</title><rect x="405.2" y="643.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="408.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (6 samples, 2.79%)</title><rect x="410.7" y="643.0" width="32.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="413.7" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.93%)</title><rect x="410.7" y="627.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="413.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.47%)</title><rect x="410.7" y="611.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.47%)</title><rect x="410.7" y="595.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="413.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.47%)</title><rect x="410.7" y="579.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="413.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.47%)</title><rect x="416.1" y="611.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="419.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (1 samples, 0.47%)</title><rect x="421.6" y="627.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="424.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::AddIterator(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.47%)</title><rect x="421.6" y="611.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="424.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.47%)</title><rect x="427.1" y="627.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="430.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (1 samples, 0.47%)</title><rect x="432.6" y="627.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="435.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::OptimizeBlockSize(unsigned long) (1 samples, 0.47%)</title><rect x="432.6" y="611.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="435.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.47%)</title><rect x="438.1" y="627.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) [clone .plt] (1 samples, 0.47%)</title><rect x="443.6" y="643.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.6" y="654.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) (1 samples, 0.47%)</title><rect x="449.1" y="675.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="452.1" y="686.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.47%)</title><rect x="454.6" y="691.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="457.6" y="702.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.47%)</title><rect x="454.6" y="675.0" width="5.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="457.6" y="686.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.47%)</title><rect x="454.6" y="659.0" width="5.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="457.6" y="670.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.47%)</title><rect x="454.6" y="643.0" width="5.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="457.6" y="654.0"></text>
</g>
<g>
<title>mem_cgroup_from_task (1 samples, 0.47%)</title><rect x="454.6" y="627.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="457.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.&lt;init&gt; (58 samples, 26.98%)</title><rect x="460.0" y="707.0" width="318.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.0" y="718.0">ru/mail/polis/service/stasyanoi/IteratorImp..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (58 samples, 26.98%)</title><rect x="460.0" y="691.0" width="318.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.0" y="702.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (58 samples, 26.98%)</title><rect x="460.0" y="675.0" width="318.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.0" y="686.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (38 samples, 17.67%)</title><rect x="460.0" y="659.0" width="208.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="463.0" y="670.0">Java_org_rocksdb_RocksItera..</text>
</g>
<g>
<title>os::free(void*) (1 samples, 0.47%)</title><rect x="460.0" y="643.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="463.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (37 samples, 17.21%)</title><rect x="465.5" y="643.0" width="203.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="468.5" y="654.0">rocksdb::DBIter::Seek(rocks..</text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.47%)</title><rect x="465.5" y="627.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="468.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (35 samples, 16.28%)</title><rect x="471.0" y="627.0" width="192.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="474.0" y="638.0">rocksdb::MemTableIterator..</text>
</g>
<g>
<title>/tmp/librocksdbjni17742705423742193893.so (35 samples, 16.28%)</title><rect x="471.0" y="611.0" width="192.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="474.0" y="622.0">/tmp/librocksdbjni1774270..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (35 samples, 16.28%)</title><rect x="471.0" y="595.0" width="192.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="474.0" y="606.0">rocksdb::InlineSkipList&lt;r..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (34 samples, 15.81%)</title><rect x="476.5" y="579.0" width="186.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="479.5" y="590.0">rocksdb::MemTable::KeyCo..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.47%)</title><rect x="476.5" y="563.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="479.5" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.47%)</title><rect x="482.0" y="563.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="485.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (31 samples, 14.42%)</title><rect x="487.5" y="563.0" width="170.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="490.5" y="574.0">rocksdb::BaseComparato..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 1.86%)</title><rect x="498.5" y="547.0" width="21.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.5" y="558.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 1.86%)</title><rect x="498.5" y="531.0" width="21.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="501.5" y="542.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.47%)</title><rect x="498.5" y="515.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.5" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 1.40%)</title><rect x="504.0" y="515.0" width="16.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="507.0" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.47%)</title><rect x="504.0" y="499.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="507.0" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.47%)</title><rect x="509.4" y="499.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.4" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.47%)</title><rect x="514.9" y="499.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.9" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.47%)</title><rect x="514.9" y="483.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.9" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (17 samples, 7.91%)</title><rect x="520.4" y="547.0" width="93.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="523.4" y="558.0">JNIEnv_::Ca..</text>
</g>
<g>
<title>jni_CallVoidMethodV (17 samples, 7.91%)</title><rect x="520.4" y="531.0" width="93.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="523.4" y="542.0">jni_CallVoi..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.93%)</title><rect x="525.9" y="515.0" width="11.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="528.9" y="526.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.47%)</title><rect x="536.9" y="515.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.9" y="526.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.93%)</title><rect x="542.4" y="515.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="545.4" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (11 samples, 5.12%)</title><rect x="553.3" y="515.0" width="60.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="556.3" y="526.0">jni_in..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.47%)</title><rect x="564.3" y="499.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 3.26%)</title><rect x="569.8" y="499.0" width="38.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="572.8" y="510.0">Jav..</text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 1.40%)</title><rect x="580.8" y="483.0" width="16.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="583.8" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.47%)</title><rect x="591.8" y="467.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.8" y="478.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.47%)</title><rect x="597.3" y="483.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="600.3" y="494.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.47%)</title><rect x="602.7" y="483.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="605.7" y="494.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.47%)</title><rect x="608.2" y="499.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.2" y="510.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 1.86%)</title><rect x="613.7" y="547.0" width="22.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="616.7" y="558.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.47%)</title><rect x="619.2" y="531.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="622.2" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.93%)</title><rect x="624.7" y="531.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="627.7" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.93%)</title><rect x="635.7" y="547.0" width="11.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="638.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.93%)</title><rect x="646.7" y="547.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="649.7" y="558.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (2 samples, 0.93%)</title><rect x="646.7" y="531.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="649.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.47%)</title><rect x="657.6" y="563.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::key() const (1 samples, 0.47%)</title><rect x="663.1" y="627.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.47%)</title><rect x="668.6" y="659.0" width="5.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="671.6" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.47%)</title><rect x="668.6" y="643.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.6" y="654.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.47%)</title><rect x="674.1" y="659.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="677.1" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (2 samples, 0.93%)</title><rect x="679.6" y="659.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.47%)</title><rect x="690.6" y="659.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="693.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (15 samples, 6.98%)</title><rect x="696.0" y="659.0" width="82.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.0" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (14 samples, 6.51%)</title><rect x="701.5" y="643.0" width="76.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.5" y="654.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.47%)</title><rect x="701.5" y="627.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.5" y="638.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.47%)</title><rect x="701.5" y="611.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.5" y="622.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (13 samples, 6.05%)</title><rect x="707.0" y="627.0" width="71.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.0" y="638.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.93%)</title><rect x="707.0" y="611.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="710.0" y="622.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (11 samples, 5.12%)</title><rect x="718.0" y="611.0" width="60.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.0" y="622.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (11 samples, 5.12%)</title><rect x="718.0" y="595.0" width="60.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.0" y="606.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (10 samples, 4.65%)</title><rect x="723.5" y="579.0" width="54.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="726.5" y="590.0">Java_..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 1.40%)</title><rect x="723.5" y="563.0" width="16.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="726.5" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.47%)</title><rect x="723.5" y="547.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.5" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.93%)</title><rect x="729.0" y="547.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="732.0" y="558.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 2.79%)</title><rect x="740.0" y="563.0" width="32.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="743.0" y="574.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.47%)</title><rect x="740.0" y="547.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.0" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.47%)</title><rect x="745.4" y="547.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="748.4" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.47%)</title><rect x="750.9" y="547.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.9" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.40%)</title><rect x="756.4" y="547.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="759.4" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 1.40%)</title><rect x="756.4" y="531.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.4" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 1.40%)</title><rect x="756.4" y="515.0" width="16.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.4" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.47%)</title><rect x="756.4" y="499.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.4" y="510.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.47%)</title><rect x="761.9" y="499.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="764.9" y="510.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.47%)</title><rect x="767.4" y="499.0" width="5.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="770.4" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.47%)</title><rect x="772.9" y="563.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="775.9" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.47%)</title><rect x="772.9" y="547.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.close (8 samples, 3.72%)</title><rect x="778.4" y="707.0" width="43.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.4" y="718.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (8 samples, 3.72%)</title><rect x="778.4" y="691.0" width="43.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.4" y="702.0">org/..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.compareAndSet (1 samples, 0.47%)</title><rect x="778.4" y="675.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.4" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.47%)</title><rect x="778.4" y="659.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.47%)</title><rect x="778.4" y="643.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.47%)</title><rect x="778.4" y="627.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.4" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (7 samples, 3.26%)</title><rect x="783.9" y="675.0" width="38.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.9" y="686.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (7 samples, 3.26%)</title><rect x="783.9" y="659.0" width="38.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.9" y="670.0">org..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.47%)</title><rect x="783.9" y="643.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="786.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (6 samples, 2.79%)</title><rect x="789.3" y="643.0" width="33.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.3" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (5 samples, 2.33%)</title><rect x="789.3" y="627.0" width="27.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="792.3" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (5 samples, 2.33%)</title><rect x="789.3" y="611.0" width="27.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="792.3" y="622.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni17742705423742193893.so (2 samples, 0.93%)</title><rect x="789.3" y="595.0" width="11.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="792.3" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.47%)</title><rect x="800.3" y="595.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="803.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (2 samples, 0.93%)</title><rect x="805.8" y="595.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.8" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17742705423742193893.so (1 samples, 0.47%)</title><rect x="805.8" y="579.0" width="5.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="808.8" y="590.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.47%)</title><rect x="811.3" y="579.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="814.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (1 samples, 0.47%)</title><rect x="816.8" y="627.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.hasNext (1 samples, 0.47%)</title><rect x="822.3" y="739.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="825.3" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.isValid (1 samples, 0.47%)</title><rect x="822.3" y="723.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.3" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.isValid0 (1 samples, 0.47%)</title><rect x="822.3" y="707.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (4 samples, 1.86%)</title><rect x="827.8" y="739.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.8" y="750.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/IteratorImpl.next (4 samples, 1.86%)</title><rect x="827.8" y="723.0" width="21.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.8" y="734.0">r..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (3 samples, 1.40%)</title><rect x="827.8" y="707.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.8" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (3 samples, 1.40%)</title><rect x="827.8" y="691.0" width="16.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (3 samples, 1.40%)</title><rect x="827.8" y="675.0" width="16.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (3 samples, 1.40%)</title><rect x="827.8" y="659.0" width="16.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="830.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 1.40%)</title><rect x="827.8" y="643.0" width="16.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.8" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.47%)</title><rect x="827.8" y="627.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.8" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.47%)</title><rect x="827.8" y="611.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="830.8" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.47%)</title><rect x="827.8" y="595.0" width="5.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="830.8" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.47%)</title><rect x="827.8" y="579.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.8" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.47%)</title><rect x="833.3" y="627.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.3" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.47%)</title><rect x="833.3" y="611.0" width="5.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="836.3" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.47%)</title><rect x="833.3" y="595.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="836.3" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.47%)</title><rect x="833.3" y="579.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.3" y="590.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.47%)</title><rect x="833.3" y="563.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.3" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.47%)</title><rect x="838.7" y="627.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="841.7" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.47%)</title><rect x="838.7" y="611.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="841.7" y="622.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (1 samples, 0.47%)</title><rect x="844.2" y="707.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.2" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (1 samples, 0.47%)</title><rect x="844.2" y="691.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::key() const (1 samples, 0.47%)</title><rect x="844.2" y="675.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.2" y="686.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (1 samples, 0.47%)</title><rect x="849.7" y="787.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (1 samples, 0.47%)</title><rect x="849.7" y="771.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.47%)</title><rect x="849.7" y="755.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.47%)</title><rect x="855.2" y="819.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.47%)</title><rect x="855.2" y="803.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.47%)</title><rect x="855.2" y="787.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.47%)</title><rect x="860.7" y="819.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="863.7" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.47%)</title><rect x="860.7" y="803.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="863.7" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 3.26%)</title><rect x="866.2" y="835.0" width="38.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.2" y="846.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 3.26%)</title><rect x="866.2" y="819.0" width="38.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.2" y="830.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.93%)</title><rect x="866.2" y="803.0" width="11.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="869.2" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.47%)</title><rect x="866.2" y="787.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="869.2" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.47%)</title><rect x="866.2" y="771.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.2" y="782.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.47%)</title><rect x="871.7" y="787.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="874.7" y="798.0"></text>
</g>
<g>
<title>__GI___recv (5 samples, 2.33%)</title><rect x="877.2" y="803.0" width="27.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="880.2" y="814.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.33%)</title><rect x="877.2" y="787.0" width="27.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="880.2" y="798.0">e..</text>
</g>
<g>
<title>do_syscall_64 (5 samples, 2.33%)</title><rect x="877.2" y="771.0" width="27.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="880.2" y="782.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 1.86%)</title><rect x="877.2" y="755.0" width="21.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="880.2" y="766.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 1.86%)</title><rect x="877.2" y="739.0" width="21.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="880.2" y="750.0">_..</text>
</g>
<g>
<title>sock_recvmsg (4 samples, 1.86%)</title><rect x="877.2" y="723.0" width="21.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="880.2" y="734.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.47%)</title><rect x="877.2" y="707.0" width="5.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="880.2" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.47%)</title><rect x="877.2" y="691.0" width="5.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="880.2" y="702.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.47%)</title><rect x="877.2" y="675.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="880.2" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.47%)</title><rect x="877.2" y="659.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="880.2" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 1.40%)</title><rect x="882.7" y="707.0" width="16.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="885.7" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 1.40%)</title><rect x="882.7" y="691.0" width="16.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="885.7" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 1.40%)</title><rect x="882.7" y="675.0" width="16.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="885.7" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 1.40%)</title><rect x="882.7" y="659.0" width="16.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="885.7" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.47%)</title><rect x="893.6" y="643.0" width="5.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="896.6" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.47%)</title><rect x="893.6" y="627.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="896.6" y="638.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.47%)</title><rect x="899.1" y="755.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="902.1" y="766.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.47%)</title><rect x="899.1" y="739.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="902.1" y="750.0"></text>
</g>
<g>
<title>start_thread (52 samples, 24.19%)</title><rect x="904.6" y="883.0" width="285.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="907.6" y="894.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (52 samples, 24.19%)</title><rect x="904.6" y="867.0" width="285.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="907.6" y="878.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (52 samples, 24.19%)</title><rect x="904.6" y="851.0" width="285.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="907.6" y="862.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.26%)</title><rect x="904.6" y="835.0" width="38.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="907.6" y="846.0">Gan..</text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (7 samples, 3.26%)</title><rect x="904.6" y="819.0" width="38.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="907.6" y="830.0">G1S..</text>
</g>
<g>
<title>RefProcPhase3Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (7 samples, 3.26%)</title><rect x="904.6" y="803.0" width="38.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.6" y="814.0">Ref..</text>
</g>
<g>
<title>ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&amp;, OopClosure*, VoidClosure*) (7 samples, 3.26%)</title><rect x="904.6" y="787.0" width="38.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="907.6" y="798.0">Ref..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.26%)</title><rect x="904.6" y="771.0" width="38.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="907.6" y="782.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.26%)</title><rect x="904.6" y="755.0" width="38.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="907.6" y="766.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.86%)</title><rect x="921.1" y="739.0" width="21.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.1" y="750.0">G..</text>
</g>
<g>
<title>page_fault (1 samples, 0.47%)</title><rect x="932.0" y="723.0" width="5.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="935.0" y="734.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.47%)</title><rect x="932.0" y="707.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="935.0" y="718.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.47%)</title><rect x="932.0" y="691.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="935.0" y="702.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.47%)</title><rect x="932.0" y="675.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="935.0" y="686.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.47%)</title><rect x="932.0" y="659.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="935.0" y="670.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.47%)</title><rect x="932.0" y="643.0" width="5.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="935.0" y="654.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.47%)</title><rect x="937.5" y="723.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.5" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (45 samples, 20.93%)</title><rect x="943.0" y="835.0" width="247.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.0" y="846.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (45 samples, 20.93%)</title><rect x="943.0" y="819.0" width="247.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="946.0" y="830.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (45 samples, 20.93%)</title><rect x="943.0" y="803.0" width="247.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.0" y="814.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (43 samples, 20.00%)</title><rect x="943.0" y="787.0" width="236.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="946.0" y="798.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (43 samples, 20.00%)</title><rect x="943.0" y="771.0" width="236.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.0" y="782.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (25 samples, 11.63%)</title><rect x="943.0" y="755.0" width="137.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="946.0" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.47%)</title><rect x="943.0" y="739.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.0" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.47%)</title><rect x="943.0" y="723.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.0" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.47%)</title><rect x="948.5" y="739.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.5" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.47%)</title><rect x="948.5" y="723.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.5" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.47%)</title><rect x="948.5" y="707.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.5" y="718.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.47%)</title><rect x="948.5" y="691.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="951.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.86%)</title><rect x="954.0" y="739.0" width="22.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.0" y="750.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.86%)</title><rect x="954.0" y="723.0" width="22.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.0" y="734.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="954.0" y="707.0" width="11.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.47%)</title><rect x="959.5" y="691.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.47%)</title><rect x="965.0" y="707.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="965.0" y="691.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.47%)</title><rect x="970.5" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 8.84%)</title><rect x="976.0" y="739.0" width="104.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.0" y="750.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.47%)</title><rect x="976.0" y="723.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="976.0" y="707.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.47%)</title><rect x="981.4" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.86%)</title><rect x="986.9" y="723.0" width="22.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.9" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.47%)</title><rect x="986.9" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.9" y="718.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.47%)</title><rect x="986.9" y="691.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 1.40%)</title><rect x="992.4" y="707.0" width="16.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.4" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="997.9" y="691.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.9" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.47%)</title><rect x="1003.4" y="691.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.93%)</title><rect x="1008.9" y="723.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1014.4" y="707.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.93%)</title><rect x="1019.9" y="723.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.9" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="1025.3" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.93%)</title><rect x="1030.8" y="723.0" width="11.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.8" y="734.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.47%)</title><rect x="1036.3" y="707.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1039.3" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.47%)</title><rect x="1041.8" y="723.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.8" y="734.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.47%)</title><rect x="1041.8" y="707.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.93%)</title><rect x="1047.3" y="723.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1052.8" y="707.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.86%)</title><rect x="1058.3" y="723.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.3" y="734.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.47%)</title><rect x="1063.8" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.93%)</title><rect x="1069.3" y="707.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.3" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1074.7" y="691.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.7" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 6.05%)</title><rect x="1080.2" y="755.0" width="71.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.2" y="766.0">Compile:..</text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.47%)</title><rect x="1080.2" y="739.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.2" y="750.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (3 samples, 1.40%)</title><rect x="1085.7" y="739.0" width="16.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 1.40%)</title><rect x="1085.7" y="723.0" width="16.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.47%)</title><rect x="1085.7" y="707.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.47%)</title><rect x="1085.7" y="691.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.47%)</title><rect x="1085.7" y="675.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.47%)</title><rect x="1085.7" y="659.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.93%)</title><rect x="1091.2" y="707.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.93%)</title><rect x="1091.2" y="691.0" width="11.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.93%)</title><rect x="1091.2" y="675.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.2" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="1096.7" y="659.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.7" y="670.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.47%)</title><rect x="1096.7" y="643.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.7" y="654.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.258] (2 samples, 0.93%)</title><rect x="1102.2" y="739.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.47%)</title><rect x="1107.7" y="723.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="707.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="691.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.93%)</title><rect x="1113.2" y="739.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 1.86%)</title><rect x="1124.1" y="739.0" width="22.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.1" y="750.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.93%)</title><rect x="1124.1" y="723.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="1135.1" y="723.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.47%)</title><rect x="1140.6" y="707.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.6" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.47%)</title><rect x="1146.1" y="739.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.47%)</title><rect x="1146.1" y="723.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1146.1" y="707.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="718.0"></text>
</g>
<g>
<title>AndLNode::Identity(PhaseGVN*) (1 samples, 0.47%)</title><rect x="1146.1" y="691.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.1" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1146.1" y="675.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.1" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.47%)</title><rect x="1146.1" y="659.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.86%)</title><rect x="1151.6" y="755.0" width="21.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.6" y="766.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.86%)</title><rect x="1151.6" y="739.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.6" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.86%)</title><rect x="1151.6" y="723.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.86%)</title><rect x="1151.6" y="707.0" width="21.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.6" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.86%)</title><rect x="1151.6" y="691.0" width="21.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.6" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.86%)</title><rect x="1151.6" y="675.0" width="21.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.6" y="686.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.40%)</title><rect x="1151.6" y="659.0" width="16.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.40%)</title><rect x="1151.6" y="643.0" width="16.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.6" y="654.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.47%)</title><rect x="1151.6" y="627.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.47%)</title><rect x="1151.6" y="611.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1157.1" y="627.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1157.1" y="611.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1157.1" y="595.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1157.1" y="579.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.93%)</title><rect x="1157.1" y="563.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.1" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1162.6" y="547.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1162.6" y="531.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1162.6" y="515.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1162.6" y="499.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1162.6" y="483.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1162.6" y="467.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1162.6" y="451.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.47%)</title><rect x="1162.6" y="435.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1162.6" y="419.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1162.6" y="403.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1162.6" y="387.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.47%)</title><rect x="1162.6" y="371.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.47%)</title><rect x="1162.6" y="355.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="659.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="643.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="627.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1168.0" y="611.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1168.0" y="595.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1168.0" y="579.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1168.0" y="563.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="547.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="531.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1168.0" y="515.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1168.0" y="499.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1168.0" y="483.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1168.0" y="467.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1168.0" y="451.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1168.0" y="435.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="446.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.47%)</title><rect x="1168.0" y="419.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.47%)</title><rect x="1168.0" y="403.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1168.0" y="387.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="398.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.47%)</title><rect x="1168.0" y="371.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.47%)</title><rect x="1173.5" y="755.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.47%)</title><rect x="1173.5" y="739.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.93%)</title><rect x="1179.0" y="787.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.93%)</title><rect x="1179.0" y="771.0" width="11.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.93%)</title><rect x="1179.0" y="755.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.93%)</title><rect x="1179.0" y="739.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.47%)</title><rect x="1179.0" y="723.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="734.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.47%)</title><rect x="1179.0" y="707.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.47%)</title><rect x="1179.0" y="691.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.47%)</title><rect x="1179.0" y="675.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 0.47%)</title><rect x="1184.5" y="723.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.47%)</title><rect x="1184.5" y="707.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
</g>
</svg>
