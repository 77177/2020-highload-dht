<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (106 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.94%)</title><rect x="10.0" y="915.0" width="11.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.94%)</title><rect x="10.0" y="899.0" width="11.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.94%)</title><rect x="10.0" y="883.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="10.0" y="867.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="10.0" y="851.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="10.0" y="835.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.94%)</title><rect x="10.0" y="819.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.94%)</title><rect x="10.0" y="803.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.94%)</title><rect x="10.0" y="787.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.94%)</title><rect x="10.0" y="771.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.94%)</title><rect x="10.0" y="755.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="10.0" y="739.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.94%)</title><rect x="10.0" y="723.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.94%)</title><rect x="10.0" y="707.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.94%)</title><rect x="10.0" y="691.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (1 samples, 0.94%)</title><rect x="10.0" y="675.0" width="11.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.94%)</title><rect x="10.0" y="659.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.94%)</title><rect x="10.0" y="643.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.94%)</title><rect x="10.0" y="627.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.94%)</title><rect x="10.0" y="611.0" width="11.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.94%)</title><rect x="10.0" y="595.0" width="11.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.94%)</title><rect x="10.0" y="579.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.94%)</title><rect x="10.0" y="563.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 1.89%)</title><rect x="21.1" y="915.0" width="22.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="24.1" y="926.0">[..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.94%)</title><rect x="21.1" y="899.0" width="11.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="24.1" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.94%)</title><rect x="21.1" y="883.0" width="11.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.1" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="21.1" y="867.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.1" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="21.1" y="851.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="24.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="21.1" y="835.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="24.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.94%)</title><rect x="21.1" y="819.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.94%)</title><rect x="21.1" y="803.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="24.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.94%)</title><rect x="21.1" y="787.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.94%)</title><rect x="21.1" y="771.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.94%)</title><rect x="21.1" y="755.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.1" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="21.1" y="739.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.94%)</title><rect x="21.1" y="723.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="24.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.94%)</title><rect x="21.1" y="707.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.1" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.94%)</title><rect x="21.1" y="691.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="24.1" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (1 samples, 0.94%)</title><rect x="21.1" y="675.0" width="11.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="24.1" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (1 samples, 0.94%)</title><rect x="21.1" y="659.0" width="11.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="24.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.94%)</title><rect x="21.1" y="643.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.94%)</title><rect x="21.1" y="627.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.1" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.94%)</title><rect x="21.1" y="611.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.1" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.94%)</title><rect x="21.1" y="595.0" width="11.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="24.1" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.94%)</title><rect x="21.1" y="579.0" width="11.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="24.1" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.94%)</title><rect x="21.1" y="563.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.1" y="574.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.94%)</title><rect x="32.3" y="899.0" width="11.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="35.3" y="910.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (100 samples, 94.34%)</title><rect x="43.4" y="915.0" width="1113.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.4" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7 samples, 6.60%)</title><rect x="43.4" y="899.0" width="77.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.4" y="910.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (7 samples, 6.60%)</title><rect x="43.4" y="883.0" width="77.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.4" y="894.0">one/nio/n..</text>
</g>
<g>
<title>[unknown] (6 samples, 5.66%)</title><rect x="54.5" y="867.0" width="66.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="57.5" y="878.0">[unknown]</text>
</g>
<g>
<title>epoll_wait (6 samples, 5.66%)</title><rect x="54.5" y="851.0" width="66.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="57.5" y="862.0">epoll_w..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 5.66%)</title><rect x="54.5" y="835.0" width="66.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="57.5" y="846.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 5.66%)</title><rect x="54.5" y="819.0" width="66.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="57.5" y="830.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (6 samples, 5.66%)</title><rect x="54.5" y="803.0" width="66.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="57.5" y="814.0">__x64_s..</text>
</g>
<g>
<title>do_epoll_wait (6 samples, 5.66%)</title><rect x="54.5" y="787.0" width="66.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="57.5" y="798.0">do_epol..</text>
</g>
<g>
<title>ep_poll (6 samples, 5.66%)</title><rect x="54.5" y="771.0" width="66.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.5" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 1.89%)</title><rect x="65.7" y="755.0" width="22.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="68.7" y="766.0">e..</text>
</g>
<g>
<title>mutex_lock (2 samples, 1.89%)</title><rect x="65.7" y="739.0" width="22.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="68.7" y="750.0">m..</text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 2.83%)</title><rect x="87.9" y="755.0" width="33.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="90.9" y="766.0">sc..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 2.83%)</title><rect x="87.9" y="739.0" width="33.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="90.9" y="750.0">sc..</text>
</g>
<g>
<title>schedule (3 samples, 2.83%)</title><rect x="87.9" y="723.0" width="33.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="90.9" y="734.0">sc..</text>
</g>
<g>
<title>__sched_text_start (3 samples, 2.83%)</title><rect x="87.9" y="707.0" width="33.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="90.9" y="718.0">__..</text>
</g>
<g>
<title>finish_task_switch (3 samples, 2.83%)</title><rect x="87.9" y="691.0" width="33.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="90.9" y="702.0">fi..</text>
</g>
<g>
<title>one/nio/net/Session.process (93 samples, 87.74%)</title><rect x="121.3" y="899.0" width="1035.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.3" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (93 samples, 87.74%)</title><rect x="121.3" y="883.0" width="1035.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.3" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (86 samples, 81.13%)</title><rect x="121.3" y="867.0" width="957.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.3" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (83 samples, 78.30%)</title><rect x="121.3" y="851.0" width="924.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.3" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (83 samples, 78.30%)</title><rect x="121.3" y="835.0" width="924.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.3" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (82 samples, 77.36%)</title><rect x="121.3" y="819.0" width="912.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.3" y="830.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 31.13%)</title><rect x="121.3" y="803.0" width="367.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.3" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.94%)</title><rect x="121.3" y="787.0" width="11.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.94%)</title><rect x="121.3" y="771.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.94%)</title><rect x="121.3" y="755.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (31 samples, 29.25%)</title><rect x="132.5" y="787.0" width="345.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.5" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.94%)</title><rect x="132.5" y="771.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="135.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.94%)</title><rect x="132.5" y="755.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.94%)</title><rect x="132.5" y="739.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.94%)</title><rect x="132.5" y="723.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.94%)</title><rect x="132.5" y="707.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 28.30%)</title><rect x="143.6" y="771.0" width="333.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.6" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 28.30%)</title><rect x="143.6" y="755.0" width="333.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.6" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (30 samples, 28.30%)</title><rect x="143.6" y="739.0" width="333.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.6" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (30 samples, 28.30%)</title><rect x="143.6" y="723.0" width="333.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.6" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>__libc_send (30 samples, 28.30%)</title><rect x="143.6" y="707.0" width="333.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="146.6" y="718.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (29 samples, 27.36%)</title><rect x="154.7" y="691.0" width="322.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="157.7" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (29 samples, 27.36%)</title><rect x="154.7" y="675.0" width="322.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="157.7" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (28 samples, 26.42%)</title><rect x="154.7" y="659.0" width="311.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.7" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (28 samples, 26.42%)</title><rect x="154.7" y="643.0" width="311.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="157.7" y="654.0">__sys_sendto</text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.94%)</title><rect x="154.7" y="627.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="157.7" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (27 samples, 25.47%)</title><rect x="165.8" y="627.0" width="300.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="168.8" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (27 samples, 25.47%)</title><rect x="165.8" y="611.0" width="300.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="168.8" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (27 samples, 25.47%)</title><rect x="165.8" y="595.0" width="300.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="168.8" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.94%)</title><rect x="165.8" y="579.0" width="11.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="168.8" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (26 samples, 24.53%)</title><rect x="177.0" y="579.0" width="289.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="180.0" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.94%)</title><rect x="177.0" y="563.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="180.0" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.94%)</title><rect x="177.0" y="547.0" width="11.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="180.0" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 2.83%)</title><rect x="188.1" y="563.0" width="33.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="191.1" y="574.0">sk..</text>
</g>
<g>
<title>__alloc_skb (2 samples, 1.89%)</title><rect x="199.2" y="547.0" width="22.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="202.2" y="558.0">_..</text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.94%)</title><rect x="199.2" y="531.0" width="11.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="202.2" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.94%)</title><rect x="199.2" y="515.0" width="11.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="202.2" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.94%)</title><rect x="210.4" y="531.0" width="11.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="213.4" y="542.0"></text>
</g>
<g>
<title>tcp_push (21 samples, 19.81%)</title><rect x="221.5" y="563.0" width="233.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="224.5" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (21 samples, 19.81%)</title><rect x="221.5" y="547.0" width="233.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="224.5" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (21 samples, 19.81%)</title><rect x="221.5" y="531.0" width="233.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="224.5" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 18.87%)</title><rect x="221.5" y="515.0" width="222.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="224.5" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (20 samples, 18.87%)</title><rect x="221.5" y="499.0" width="222.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="224.5" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (20 samples, 18.87%)</title><rect x="221.5" y="483.0" width="222.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="224.5" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (20 samples, 18.87%)</title><rect x="221.5" y="467.0" width="222.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="224.5" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 5.66%)</title><rect x="221.5" y="451.0" width="66.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="224.5" y="462.0">__ip_lo..</text>
</g>
<g>
<title>nf_hook_slow (6 samples, 5.66%)</title><rect x="221.5" y="435.0" width="66.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="224.5" y="446.0">nf_hook..</text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.94%)</title><rect x="221.5" y="419.0" width="11.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="224.5" y="430.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.94%)</title><rect x="221.5" y="403.0" width="11.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="224.5" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (5 samples, 4.72%)</title><rect x="232.6" y="419.0" width="55.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="235.6" y="430.0">ipv4_..</text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (5 samples, 4.72%)</title><rect x="232.6" y="403.0" width="55.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="235.6" y="414.0">nf_co..</text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (1 samples, 0.94%)</title><rect x="232.6" y="387.0" width="11.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="235.6" y="398.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (1 samples, 0.94%)</title><rect x="243.8" y="387.0" width="11.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="246.8" y="398.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.94%)</title><rect x="254.9" y="387.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="257.9" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (2 samples, 1.89%)</title><rect x="266.0" y="387.0" width="22.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="269.0" y="398.0">n..</text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (1 samples, 0.94%)</title><rect x="277.2" y="371.0" width="11.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="280.2" y="382.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (1 samples, 0.94%)</title><rect x="277.2" y="355.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="280.2" y="366.0"></text>
</g>
<g>
<title>ip_output (14 samples, 13.21%)</title><rect x="288.3" y="451.0" width="155.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="291.3" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (13 samples, 12.26%)</title><rect x="288.3" y="435.0" width="144.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="291.3" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.94%)</title><rect x="288.3" y="419.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="291.3" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (12 samples, 11.32%)</title><rect x="299.4" y="419.0" width="133.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="302.4" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (12 samples, 11.32%)</title><rect x="299.4" y="403.0" width="133.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="302.4" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (9 samples, 8.49%)</title><rect x="310.6" y="387.0" width="100.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="313.6" y="398.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.20 (9 samples, 8.49%)</title><rect x="310.6" y="371.0" width="100.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="313.6" y="382.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (8 samples, 7.55%)</title><rect x="321.7" y="355.0" width="89.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="324.7" y="366.0">do_softirq..</text>
</g>
<g>
<title>__softirqentry_text_start (8 samples, 7.55%)</title><rect x="321.7" y="339.0" width="89.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="324.7" y="350.0">__softirqe..</text>
</g>
<g>
<title>net_rx_action (8 samples, 7.55%)</title><rect x="321.7" y="323.0" width="89.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="324.7" y="334.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (8 samples, 7.55%)</title><rect x="321.7" y="307.0" width="89.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="324.7" y="318.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (7 samples, 6.60%)</title><rect x="321.7" y="291.0" width="77.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="324.7" y="302.0">__netif_r..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (7 samples, 6.60%)</title><rect x="321.7" y="275.0" width="77.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="324.7" y="286.0">__netif_r..</text>
</g>
<g>
<title>ip_rcv (7 samples, 6.60%)</title><rect x="321.7" y="259.0" width="77.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="324.7" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (7 samples, 6.60%)</title><rect x="321.7" y="243.0" width="77.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="324.7" y="254.0">ip_rcv_fi..</text>
</g>
<g>
<title>ip_local_deliver (7 samples, 6.60%)</title><rect x="321.7" y="227.0" width="77.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="324.7" y="238.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (6 samples, 5.66%)</title><rect x="321.7" y="211.0" width="66.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="324.7" y="222.0">ip_loca..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (6 samples, 5.66%)</title><rect x="321.7" y="195.0" width="66.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="324.7" y="206.0">ip_prot..</text>
</g>
<g>
<title>tcp_v4_rcv (6 samples, 5.66%)</title><rect x="321.7" y="179.0" width="66.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="324.7" y="190.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_v4_do_rcv (6 samples, 5.66%)</title><rect x="321.7" y="163.0" width="66.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="324.7" y="174.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_rcv_established (6 samples, 5.66%)</title><rect x="321.7" y="147.0" width="66.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="324.7" y="158.0">tcp_rcv..</text>
</g>
<g>
<title>tcp_ack (3 samples, 2.83%)</title><rect x="321.7" y="131.0" width="33.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="324.7" y="142.0">tc..</text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 1.89%)</title><rect x="332.8" y="115.0" width="22.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="335.8" y="126.0">t..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.94%)</title><rect x="344.0" y="99.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="347.0" y="110.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.94%)</title><rect x="344.0" y="83.0" width="11.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="347.0" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.94%)</title><rect x="344.0" y="67.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.0" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.94%)</title><rect x="344.0" y="51.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.0" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.94%)</title><rect x="344.0" y="35.0" width="11.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="347.0" y="46.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 2.83%)</title><rect x="355.1" y="131.0" width="33.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="358.1" y="142.0">tc..</text>
</g>
<g>
<title>sock_def_readable (3 samples, 2.83%)</title><rect x="355.1" y="115.0" width="33.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="358.1" y="126.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 2.83%)</title><rect x="355.1" y="99.0" width="33.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="358.1" y="110.0">__..</text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 2.83%)</title><rect x="355.1" y="83.0" width="33.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="358.1" y="94.0">__..</text>
</g>
<g>
<title>__lock_text_start (3 samples, 2.83%)</title><rect x="355.1" y="67.0" width="33.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="358.1" y="78.0">__..</text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.94%)</title><rect x="388.5" y="211.0" width="11.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="391.5" y="222.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.94%)</title><rect x="388.5" y="195.0" width="11.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="391.5" y="206.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.94%)</title><rect x="388.5" y="179.0" width="11.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="391.5" y="190.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.94%)</title><rect x="399.6" y="291.0" width="11.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="402.6" y="302.0"></text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 1.89%)</title><rect x="410.8" y="387.0" width="22.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="413.8" y="398.0">d..</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.94%)</title><rect x="410.8" y="371.0" width="11.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="413.8" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.94%)</title><rect x="410.8" y="355.0" width="11.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="413.8" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.94%)</title><rect x="410.8" y="339.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="413.8" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.94%)</title><rect x="410.8" y="323.0" width="11.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="413.8" y="334.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.94%)</title><rect x="421.9" y="371.0" width="11.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="424.9" y="382.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (1 samples, 0.94%)</title><rect x="433.0" y="435.0" width="11.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="436.0" y="446.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.94%)</title><rect x="444.2" y="515.0" width="11.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="447.2" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.94%)</title><rect x="455.3" y="563.0" width="11.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="458.3" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.94%)</title><rect x="455.3" y="547.0" width="11.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="458.3" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.94%)</title><rect x="455.3" y="531.0" width="11.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="458.3" y="542.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (1 samples, 0.94%)</title><rect x="466.4" y="659.0" width="11.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="469.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.94%)</title><rect x="477.5" y="787.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.94%)</title><rect x="477.5" y="771.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.94%)</title><rect x="477.5" y="755.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.94%)</title><rect x="477.5" y="739.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.94%)</title><rect x="477.5" y="723.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.5" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.94%)</title><rect x="477.5" y="707.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stasyanoi/CustomServer.put (49 samples, 46.23%)</title><rect x="488.7" y="803.0" width="545.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.7" y="814.0">ru/mail/polis/service/stasyanoi/CustomServer.put</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/DAOImpl.upsert (49 samples, 46.23%)</title><rect x="488.7" y="787.0" width="545.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.7" y="798.0">ru/mail/polis/dao/stasyanoi/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (49 samples, 46.23%)</title><rect x="488.7" y="771.0" width="545.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.7" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (49 samples, 46.23%)</title><rect x="488.7" y="755.0" width="545.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.7" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.94%)</title><rect x="488.7" y="739.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.7" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (24 samples, 22.64%)</title><rect x="499.8" y="739.0" width="267.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="502.8" y="750.0">Java_org_rocksdb_RocksDB_put__J_3BII..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (23 samples, 21.70%)</title><rect x="510.9" y="723.0" width="256.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="513.9" y="734.0">rocksdb_put_helper(JNIEnv_*, rocks..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (23 samples, 21.70%)</title><rect x="510.9" y="707.0" width="256.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="513.9" y="718.0">rocksdb::DB::Put(rocksdb::WriteOpt..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (23 samples, 21.70%)</title><rect x="510.9" y="691.0" width="256.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="513.9" y="702.0">rocksdb::DBImpl::Put(rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (22 samples, 20.75%)</title><rect x="510.9" y="675.0" width="244.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.9" y="686.0">rocksdb::DB::Put(rocksdb::WriteO..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (20 samples, 18.87%)</title><rect x="510.9" y="659.0" width="222.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="513.9" y="670.0">rocksdb::DBImpl::Write(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (20 samples, 18.87%)</title><rect x="510.9" y="643.0" width="222.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="513.9" y="654.0">rocksdb::DBImpl::WriteImpl(ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (2 samples, 1.89%)</title><rect x="522.1" y="627.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.1" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (2 samples, 1.89%)</title><rect x="522.1" y="611.0" width="22.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="525.1" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 1.89%)</title><rect x="522.1" y="595.0" width="22.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="525.1" y="606.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (2 samples, 1.89%)</title><rect x="522.1" y="579.0" width="22.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="525.1" y="590.0">/..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (15 samples, 14.15%)</title><rect x="544.3" y="627.0" width="167.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="547.3" y="638.0">rocksdb::WriteBatchIn..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (14 samples, 13.21%)</title><rect x="555.5" y="611.0" width="155.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="558.5" y="622.0">rocksdb::WriteBatch:..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (14 samples, 13.21%)</title><rect x="555.5" y="595.0" width="155.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="558.5" y="606.0">rocksdb::WriteBatchI..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (14 samples, 13.21%)</title><rect x="555.5" y="579.0" width="155.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="558.5" y="590.0">rocksdb::MemTableIns..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (14 samples, 13.21%)</title><rect x="555.5" y="563.0" width="155.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="558.5" y="574.0">rocksdb::MemTableIns..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (13 samples, 12.26%)</title><rect x="566.6" y="547.0" width="144.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.6" y="558.0">rocksdb::MemTable:..</text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (1 samples, 0.94%)</title><rect x="566.6" y="531.0" width="11.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="569.6" y="542.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (12 samples, 11.32%)</title><rect x="577.7" y="531.0" width="133.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="580.7" y="542.0">bool rocksdb::Inl..</text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (11 samples, 10.38%)</title><rect x="577.7" y="515.0" width="122.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="580.7" y="526.0">/tmp/librocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni14975523043778140188.so (9 samples, 8.49%)</title><rect x="577.7" y="499.0" width="100.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="580.7" y="510.0">/tmp/librock..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 8.49%)</title><rect x="577.7" y="483.0" width="100.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="580.7" y="494.0">rocksdb::Mem..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (9 samples, 8.49%)</title><rect x="577.7" y="467.0" width="100.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="580.7" y="478.0">rocksdb::Bas..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.94%)</title><rect x="577.7" y="451.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="580.7" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.94%)</title><rect x="577.7" y="435.0" width="11.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="580.7" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.94%)</title><rect x="577.7" y="419.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="580.7" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (7 samples, 6.60%)</title><rect x="588.9" y="451.0" width="77.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.9" y="462.0">JNIEnv_::..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.94%)</title><rect x="588.9" y="435.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="591.9" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.94%)</title><rect x="600.0" y="435.0" width="11.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="603.0" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (5 samples, 4.72%)</title><rect x="611.1" y="435.0" width="55.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="614.1" y="446.0">jni_C..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.94%)</title><rect x="611.1" y="419.0" width="11.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="614.1" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.94%)</title><rect x="622.3" y="419.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.3" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 2.83%)</title><rect x="633.4" y="419.0" width="33.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="636.4" y="430.0">jn..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.94%)</title><rect x="644.5" y="403.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="647.5" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.94%)</title><rect x="655.7" y="403.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="658.7" y="414.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.94%)</title><rect x="655.7" y="387.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.7" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.94%)</title><rect x="666.8" y="451.0" width="11.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="669.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 1.89%)</title><rect x="677.9" y="499.0" width="22.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.9" y="510.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 1.89%)</title><rect x="677.9" y="483.0" width="22.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="680.9" y="494.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.94%)</title><rect x="677.9" y="467.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="680.9" y="478.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.94%)</title><rect x="677.9" y="451.0" width="11.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="680.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.94%)</title><rect x="689.1" y="467.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.1" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.94%)</title><rect x="689.1" y="451.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="692.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.94%)</title><rect x="700.2" y="515.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.94%)</title><rect x="700.2" y="499.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.2" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.94%)</title><rect x="700.2" y="483.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.2" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.94%)</title><rect x="700.2" y="467.0" width="11.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="703.2" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.94%)</title><rect x="700.2" y="451.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="703.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.94%)</title><rect x="711.3" y="627.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="714.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.94%)</title><rect x="722.5" y="627.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="725.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 1.89%)</title><rect x="733.6" y="659.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="736.6" y="670.0">r..</text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.94%)</title><rect x="733.6" y="643.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="736.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.94%)</title><rect x="744.7" y="643.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.7" y="654.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() [clone .plt] (1 samples, 0.94%)</title><rect x="744.7" y="627.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="747.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.94%)</title><rect x="755.8" y="675.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="758.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 15.09%)</title><rect x="767.0" y="739.0" width="178.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="770.0" y="750.0">[unknown]</text>
</g>
<g>
<title>__GI_write (14 samples, 13.21%)</title><rect x="767.0" y="723.0" width="155.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="770.0" y="734.0">__GI_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 13.21%)</title><rect x="767.0" y="707.0" width="155.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="770.0" y="718.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 13.21%)</title><rect x="767.0" y="691.0" width="155.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="770.0" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (14 samples, 13.21%)</title><rect x="767.0" y="675.0" width="155.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="770.0" y="686.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (14 samples, 13.21%)</title><rect x="767.0" y="659.0" width="155.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="770.0" y="670.0">ksys_write</text>
</g>
<g>
<title>vfs_write (14 samples, 13.21%)</title><rect x="767.0" y="643.0" width="155.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="770.0" y="654.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (14 samples, 13.21%)</title><rect x="767.0" y="627.0" width="155.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="770.0" y="638.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (14 samples, 13.21%)</title><rect x="767.0" y="611.0" width="155.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="770.0" y="622.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (14 samples, 13.21%)</title><rect x="767.0" y="595.0" width="155.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="770.0" y="606.0">ext4_file_write_iter</text>
</g>
<g>
<title>__generic_file_write_iter (13 samples, 12.26%)</title><rect x="778.1" y="579.0" width="144.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="781.1" y="590.0">__generic_file_wri..</text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.94%)</title><rect x="778.1" y="563.0" width="11.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="781.1" y="574.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.94%)</title><rect x="789.2" y="563.0" width="11.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="792.2" y="574.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.94%)</title><rect x="789.2" y="547.0" width="11.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="792.2" y="558.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.94%)</title><rect x="789.2" y="531.0" width="11.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="792.2" y="542.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.94%)</title><rect x="789.2" y="515.0" width="11.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="792.2" y="526.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.94%)</title><rect x="789.2" y="499.0" width="11.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="792.2" y="510.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.94%)</title><rect x="789.2" y="483.0" width="11.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="792.2" y="494.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.94%)</title><rect x="789.2" y="467.0" width="11.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="792.2" y="478.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.94%)</title><rect x="789.2" y="451.0" width="11.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="792.2" y="462.0"></text>
</g>
<g>
<title>generic_perform_write (10 samples, 9.43%)</title><rect x="800.4" y="563.0" width="111.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="803.4" y="574.0">generic_perfo..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.94%)</title><rect x="800.4" y="547.0" width="11.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="803.4" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 4.72%)</title><rect x="811.5" y="547.0" width="55.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="814.5" y="558.0">ext4_..</text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 1.89%)</title><rect x="811.5" y="531.0" width="22.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="814.5" y="542.0">_..</text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.94%)</title><rect x="822.6" y="515.0" width="11.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="825.6" y="526.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.94%)</title><rect x="822.6" y="499.0" width="11.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="825.6" y="510.0"></text>
</g>
<g>
<title>_raw_read_lock (1 samples, 0.94%)</title><rect x="822.6" y="483.0" width="11.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="825.6" y="494.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.94%)</title><rect x="833.8" y="531.0" width="11.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="836.8" y="542.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 1.89%)</title><rect x="844.9" y="531.0" width="22.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="847.9" y="542.0">g..</text>
</g>
<g>
<title>find_get_entry (1 samples, 0.94%)</title><rect x="844.9" y="515.0" width="11.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="847.9" y="526.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.94%)</title><rect x="856.0" y="515.0" width="11.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="859.0" y="526.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.94%)</title><rect x="856.0" y="499.0" width="11.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="859.0" y="510.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.94%)</title><rect x="856.0" y="483.0" width="11.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="859.0" y="494.0"></text>
</g>
<g>
<title>ext4_da_write_end (4 samples, 3.77%)</title><rect x="867.2" y="547.0" width="44.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="870.2" y="558.0">ext4..</text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.94%)</title><rect x="867.2" y="531.0" width="11.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="870.2" y="542.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.94%)</title><rect x="867.2" y="515.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="870.2" y="526.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.94%)</title><rect x="867.2" y="499.0" width="11.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="870.2" y="510.0"></text>
</g>
<g>
<title>generic_write_end (3 samples, 2.83%)</title><rect x="878.3" y="531.0" width="33.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="881.3" y="542.0">ge..</text>
</g>
<g>
<title>__mark_inode_dirty (3 samples, 2.83%)</title><rect x="878.3" y="515.0" width="33.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="881.3" y="526.0">__..</text>
</g>
<g>
<title>ext4_dirty_inode (3 samples, 2.83%)</title><rect x="878.3" y="499.0" width="33.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="881.3" y="510.0">ex..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.94%)</title><rect x="878.3" y="483.0" width="11.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="881.3" y="494.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.94%)</title><rect x="878.3" y="467.0" width="11.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="881.3" y="478.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.94%)</title><rect x="878.3" y="451.0" width="11.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="881.3" y="462.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.94%)</title><rect x="878.3" y="435.0" width="11.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="881.3" y="446.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 1.89%)</title><rect x="889.4" y="483.0" width="22.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="892.4" y="494.0">e..</text>
</g>
<g>
<title>ext4_reserve_inode_write (2 samples, 1.89%)</title><rect x="889.4" y="467.0" width="22.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="892.4" y="478.0">e..</text>
</g>
<g>
<title>__ext4_get_inode_loc (2 samples, 1.89%)</title><rect x="889.4" y="451.0" width="22.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="892.4" y="462.0">_..</text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.94%)</title><rect x="889.4" y="435.0" width="11.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="892.4" y="446.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.94%)</title><rect x="889.4" y="419.0" width="11.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="892.4" y="430.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.94%)</title><rect x="889.4" y="403.0" width="11.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="892.4" y="414.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.94%)</title><rect x="900.6" y="435.0" width="11.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="903.6" y="446.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.94%)</title><rect x="911.7" y="563.0" width="11.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="914.7" y="574.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (2 samples, 1.89%)</title><rect x="922.8" y="723.0" width="22.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="925.8" y="734.0">s..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.94%)</title><rect x="945.1" y="739.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (7 samples, 6.60%)</title><rect x="956.2" y="739.0" width="78.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.2" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/stasyanoi/ComparatorImpl.compare (7 samples, 6.60%)</title><rect x="956.2" y="723.0" width="78.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="959.2" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (7 samples, 6.60%)</title><rect x="956.2" y="707.0" width="78.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.2" y="718.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (7 samples, 6.60%)</title><rect x="956.2" y="691.0" width="78.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="959.2" y="702.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (7 samples, 6.60%)</title><rect x="956.2" y="675.0" width="78.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="959.2" y="686.0">org/rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (5 samples, 4.72%)</title><rect x="956.2" y="659.0" width="55.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="959.2" y="670.0">Java_..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.94%)</title><rect x="956.2" y="643.0" width="11.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="959.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.94%)</title><rect x="956.2" y="627.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.2" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 2.83%)</title><rect x="967.4" y="643.0" width="33.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="970.4" y="654.0">jn..</text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 1.89%)</title><rect x="978.5" y="627.0" width="22.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.5" y="638.0">T..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 1.89%)</title><rect x="978.5" y="611.0" width="22.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.5" y="622.0">C..</text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 1.89%)</title><rect x="978.5" y="595.0" width="22.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.5" y="606.0">M..</text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 1.89%)</title><rect x="978.5" y="579.0" width="22.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.5" y="590.0">O..</text>
</g>
<g>
<title>page_fault (2 samples, 1.89%)</title><rect x="978.5" y="563.0" width="22.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="981.5" y="574.0">p..</text>
</g>
<g>
<title>do_page_fault (2 samples, 1.89%)</title><rect x="978.5" y="547.0" width="22.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="981.5" y="558.0">d..</text>
</g>
<g>
<title>__do_page_fault (2 samples, 1.89%)</title><rect x="978.5" y="531.0" width="22.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="981.5" y="542.0">_..</text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.94%)</title><rect x="989.6" y="515.0" width="11.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="992.6" y="526.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.94%)</title><rect x="989.6" y="499.0" width="11.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="992.6" y="510.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.94%)</title><rect x="989.6" y="483.0" width="11.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="992.6" y="494.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.94%)</title><rect x="989.6" y="467.0" width="11.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="992.6" y="478.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.94%)</title><rect x="1000.8" y="643.0" width="11.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1003.8" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 1.89%)</title><rect x="1011.9" y="659.0" width="22.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1014.9" y="670.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.94%)</title><rect x="1034.2" y="819.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1037.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.94%)</title><rect x="1034.2" y="803.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1037.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.94%)</title><rect x="1034.2" y="787.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1037.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.94%)</title><rect x="1034.2" y="771.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1037.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 2.83%)</title><rect x="1045.3" y="851.0" width="33.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1048.3" y="862.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 1.89%)</title><rect x="1045.3" y="835.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1048.3" y="846.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.94%)</title><rect x="1067.5" y="835.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.94%)</title><rect x="1067.5" y="819.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1070.5" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 6.60%)</title><rect x="1078.7" y="867.0" width="77.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.7" y="878.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 6.60%)</title><rect x="1078.7" y="851.0" width="77.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1081.7" y="862.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 1.89%)</title><rect x="1089.8" y="835.0" width="22.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1092.8" y="846.0">J..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.94%)</title><rect x="1089.8" y="819.0" width="11.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1092.8" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.94%)</title><rect x="1089.8" y="803.0" width="11.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1092.8" y="814.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.94%)</title><rect x="1089.8" y="787.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.8" y="798.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.94%)</title><rect x="1100.9" y="819.0" width="11.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1103.9" y="830.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 3.77%)</title><rect x="1112.1" y="835.0" width="44.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1115.1" y="846.0">__GI..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 3.77%)</title><rect x="1112.1" y="819.0" width="44.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1115.1" y="830.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (4 samples, 3.77%)</title><rect x="1112.1" y="803.0" width="44.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1115.1" y="814.0">do_s..</text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 3.77%)</title><rect x="1112.1" y="787.0" width="44.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1115.1" y="798.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 3.77%)</title><rect x="1112.1" y="771.0" width="44.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1115.1" y="782.0">__sy..</text>
</g>
<g>
<title>sock_recvmsg (4 samples, 3.77%)</title><rect x="1112.1" y="755.0" width="44.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1115.1" y="766.0">sock..</text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 2.83%)</title><rect x="1112.1" y="739.0" width="33.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1115.1" y="750.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 1.89%)</title><rect x="1123.2" y="723.0" width="22.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1126.2" y="734.0">t..</text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 1.89%)</title><rect x="1123.2" y="707.0" width="22.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1126.2" y="718.0">s..</text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.94%)</title><rect x="1134.3" y="691.0" width="11.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1137.3" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.94%)</title><rect x="1145.5" y="739.0" width="11.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1148.5" y="750.0"></text>
</g>
<g>
<title>start_thread (3 samples, 2.83%)</title><rect x="1156.6" y="915.0" width="33.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1159.6" y="926.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 2.83%)</title><rect x="1156.6" y="899.0" width="33.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1159.6" y="910.0">th..</text>
</g>
<g>
<title>Thread::call_run() (3 samples, 2.83%)</title><rect x="1156.6" y="883.0" width="33.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="894.0">Th..</text>
</g>
<g>
<title>JavaThread::run() (3 samples, 2.83%)</title><rect x="1156.6" y="867.0" width="33.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="878.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 2.83%)</title><rect x="1156.6" y="851.0" width="33.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="862.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 2.83%)</title><rect x="1156.6" y="835.0" width="33.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="846.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 2.83%)</title><rect x="1156.6" y="819.0" width="33.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="830.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 2.83%)</title><rect x="1156.6" y="803.0" width="33.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="814.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 1.89%)</title><rect x="1156.6" y="787.0" width="22.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="798.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.94%)</title><rect x="1156.6" y="771.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.94%)</title><rect x="1156.6" y="755.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.94%)</title><rect x="1167.7" y="771.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.94%)</title><rect x="1167.7" y="755.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.94%)</title><rect x="1167.7" y="739.0" width="11.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.94%)</title><rect x="1167.7" y="723.0" width="11.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1170.7" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.94%)</title><rect x="1178.9" y="787.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.94%)</title><rect x="1178.9" y="771.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.94%)</title><rect x="1178.9" y="755.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.94%)</title><rect x="1178.9" y="739.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.94%)</title><rect x="1178.9" y="723.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.94%)</title><rect x="1178.9" y="707.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.94%)</title><rect x="1178.9" y="691.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.94%)</title><rect x="1178.9" y="675.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
</g>
</svg>
